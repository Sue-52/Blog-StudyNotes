"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[9617],{275:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-65c1457c",path:"/docs/02.Front-endFrameKnowledge/02.React/11.React%20Appendix.html",title:"React Appendix -- React 附录",lang:"en-US",frontmatter:{title:"React Appendix -- React 附录",date:"2022-04-14T21:45:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React Appendix -- React 附录",slug:"react-appendix-react-附录",children:[{level:3,title:"1. 类组件",slug:"_1-类组件",children:[]},{level:3,title:"2. 配置路径别名",slug:"_2-配置路径别名",children:[]}]}],git:{createdTime:1649981917e3,updatedTime:1649981917e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/11.React Appendix.md"}},6615:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});const e=(0,a(6252).uE)('<h2 id="react-appendix-react-附录" tabindex="-1"><a class="header-anchor" href="#react-appendix-react-附录" aria-hidden="true">#</a> React Appendix -- React 附录</h2><h3 id="_1-类组件" tabindex="-1"><a class="header-anchor" href="#_1-类组件" aria-hidden="true">#</a> 1. 类组件</h3><h4 id="_1-1-创建类组件" tabindex="-1"><a class="header-anchor" href="#_1-1-创建类组件" aria-hidden="true">#</a> 1.1 创建类组件</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { Component } from &#39;react&#39;;\n\nclass Person extends Component {\n  render () {\n    return &lt;div&gt;Hello I am a class component&lt;/div&gt;\n  }\n}\n\nexport default Person;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_1-2-向类组件内部传递属性" tabindex="-1"><a class="header-anchor" href="#_1-2-向类组件内部传递属性" aria-hidden="true">#</a> 1.2 向类组件内部传递属性</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;Person name=&quot;张三&quot; age={20}/&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>class Person extends Component {\n  render() {\n    const { name, age } = this.props\n    return (\n      &lt;div&gt;\n        &lt;span&gt;{name}&lt;/span&gt;\n        &lt;span&gt;{age}&lt;/span&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_1-3-props-默认值" tabindex="-1"><a class="header-anchor" href="#_1-3-props-默认值" aria-hidden="true">#</a> 1.3 Props 默认值</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>class Person extends Component {\n  static defaultProps = {}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-4-组件状态" tabindex="-1"><a class="header-anchor" href="#_1-4-组件状态" aria-hidden="true">#</a> 1.4 组件状态</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>class Person extends Component {\n  constructor(){\n    super();\n    this.state = {\n      name: &quot;张三&quot;,\n      age: 20\n    }\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n  \n \tonClickHandler() {\n    this.setState({ ...this.state, name: &quot;李四&quot; });\n  }\n\n  render() {\n    return (\n      &lt;&gt;\n        &lt;span&gt;{this.state.name}&lt;/span&gt;\n        &lt;span&gt;{this.state.age}&lt;/span&gt;\n      \t&lt;button onClick={this.onClickHandler}&gt;更改数据&lt;/button&gt;\n      &lt;/&gt;\n    )\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_1-5-类组件生命周期函数" tabindex="-1"><a class="header-anchor" href="#_1-5-类组件生命周期函数" aria-hidden="true">#</a> 1.5 类组件生命周期函数</h4><h5 id="_1-5-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-5-1-概述" aria-hidden="true">#</a> 1.5.1 概述</h5><p>生命周期如同四季更替，一个人的生、老、病、死，在每个特殊的年龄阶段，做着不同的事情。</p><p>组件也有生命周期，从组件被创建、被挂载到DOM中、直到从 DOM 中移除，这就是组件的生命周期。在组件生命周期的不同阶段，React 提供了对应的生命周期函数，让我们在不同阶段做不同的事情。这些函数将会被 React 自动调用执行。</p><p>生命周期大致分为三个部分：挂载、更新和卸载。</p><h5 id="_1-5-2-组件挂载" tabindex="-1"><a class="header-anchor" href="#_1-5-2-组件挂载" aria-hidden="true">#</a> 1.5.2 组件挂载</h5><p>当组件被创建并且被整体插入到 DOM 中叫做是挂载组件，在组件被创建和挂载的过程中以下方法被调用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 设置组件的初始配置</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 解析 JSX, 渲染DOM, 呈递用户界面</span>\n<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 组件挂载完成后执行, 放置所有和DOM相关的操作，比如发送Ajax请求、设置定时器、添加事件监听、获取DOM元素</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_1-5-3-组件更新" tabindex="-1"><a class="header-anchor" href="#_1-5-3-组件更新" aria-hidden="true">#</a> 1.5.3 组件更新</h5><p>当组件状态发生变化时，组件重新渲染。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>\nrender\ncomponentDidUpdate\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_1-5-3-组件卸载" tabindex="-1"><a class="header-anchor" href="#_1-5-3-组件卸载" aria-hidden="true">#</a> 1.5.3 组件卸载</h5><p>组件卸载是指将组件从 DOM 中删除。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>componentWillUnmount   // 这个方法在组件从 DOM 中移除之前调用. 方法中可以执行清理工作. 例如删除事件监听, 清除定时器\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_1-6-上下文" tabindex="-1"><a class="header-anchor" href="#_1-6-上下文" aria-hidden="true">#</a> 1.6 上下文</h4><ol><li><p>创建 Context 上下文对象, 导出 Provider 组件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// TestContext.js\nimport { createContext } from &quot;react&quot;\n\nexport const TestContext = createContext()\n\nexport function TestProvider({ children, value }) {\n  return &lt;TestContext.Provider value={value}&gt;{children}&lt;/TestContext.Provider&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>将状态存储到上下文对象中</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ReactDOM from &quot;react-dom&quot;\nimport App from &quot;./App&quot;\nimport { TestProvider } from &quot;./TestContext&quot;\n\nReactDOM.render(\n  &lt;TestProvider value={{ test: &quot;test&quot; }}&gt;\n    &lt;App /&gt;\n  &lt;/TestProvider&gt;,\n  document.getElementById(&quot;root&quot;)\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>在组件中获取上下文对象中的状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Component } from &quot;react&quot;\nimport { TestContext } from &quot;./TestContext&quot;\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;TestContext.Consumer&gt;\n          {context =&gt; &lt;div&gt;{context.test}&lt;/div&gt;}\n        &lt;/TestContext.Consumer&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>在组件中获取上下文的另一种方式</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Component } from &quot;react&quot;\nimport { TestContext } from &quot;./TestContext&quot;\n\nclass App extends Component {\n  static contextType = TestContext\n  render() {\n    return &lt;div&gt;{this.context.test}&lt;/div&gt;\n  }\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h4 id="_1-7-错误边界" tabindex="-1"><a class="header-anchor" href="#_1-7-错误边界" aria-hidden="true">#</a> 1.7 错误边界</h4><p>默认情况下，组件渲染错误会导致整个应用程序中断，创建错误边界可确保在特定组件发生错误时应用程序不会中断。</p><p>错误边界是一个 React 组件，可以捕获子级组件在渲染时发生的错误，当错误发生时可以将错误记录下来，可以显示备用 UI 界面。</p><p>错误边界涉及到两个生命周期函数，分别为 getDerivedStateFromError 和 componentDidCatch。</p><p>getDerivedStateFromError 为静态方法，方法中需要返回一个对象，该对象会和state对象进行合并，用于更改应用程序状态。</p><p>componentDidCatch 方法用于记录应用程序错误信息，该方法的参数就是错误对象。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// ErrorBoundaries.js\nimport React from &quot;react&quot;\nimport App from &quot;./App&quot;\n\nexport default class ErrorBoundaries extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hasError: false\n    }\n  }\n  componentDidCatch(error) {\n    console.log(&quot;componentDidCatch&quot;)\n  }\n  static getDerivedStateFromError() {\n    console.log(&quot;getDerivedStateFromError&quot;)\n    return {\n      hasError: true\n    }\n  }\n  render() {\n    if (this.state.hasError) {\n      return &lt;div&gt;发生了错误&lt;/div&gt;\n    }\n    return &lt;App /&gt;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// App.js\nimport React from &quot;react&quot;\n\nexport default class App extends React.Component {\n  render() {\n    // throw new Error(&quot;lalala&quot;)\n    return &lt;div&gt;App works&lt;/div&gt;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// index.js\nimport React from &quot;react&quot;\nimport ReactDOM from &quot;react-dom&quot;\nimport ErrorBoundaries from &quot;./ErrorBoundaries&quot;\n\nReactDOM.render(&lt;ErrorBoundaries /&gt;, document.getElementById(&quot;root&quot;))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_1-8-渲染属性" tabindex="-1"><a class="header-anchor" href="#_1-8-渲染属性" aria-hidden="true">#</a> 1.8 渲染属性</h4><p>渲染属性是 React 中实现逻辑复用的一种高级技巧。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// Resizeable.js\nimport React, { useEffect, useState } from &quot;react&quot;\n\nfunction Resizeable({ render }) {\n  const [sizes, setSizes] = useState([window.innerWidth, window.innerHeight])\n  useEffect(() =&gt; {\n    window.addEventListener(&quot;resize&quot;, () =&gt; {\n      setSizes([window.innerWidth, window.innerHeight])\n    })\n  }, [])\n  return render(sizes)\n}\n\nexport default Resizeable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// index.js\nimport React from &quot;react&quot;\nimport ReactDOM from &quot;react-dom&quot;\nimport Resizeable from &quot;Resizeable&quot;\nimport App from &quot;./App&quot;\n\nReactDOM.render(\n  &lt;Resizeable render={sizes =&gt; &lt;App sizes={sizes} /&gt;} /&gt;,\n  document.getElementById(&quot;root&quot;)\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// App.js\nimport React from &quot;react&quot;\n\nfunction App({ sizes }) {\n  return &lt;div&gt;{JSON.stringify(sizes)}&lt;/div&gt;\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_1-9-高阶组件" tabindex="-1"><a class="header-anchor" href="#_1-9-高阶组件" aria-hidden="true">#</a> 1.9 高阶组件</h4><p>高阶组件用于共享代码，增加逻辑复用。</p><p>高阶组件是一种模式，一个函数接收组件作为参数，返回一个新的组件。</p><p>函数名称通常以with开头，接收的组件形参名称为 WrappedComponent，返回的组件名称和函数名称一样，只不过with中的w要大写。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function withResizable(WrappedComponent, number) {\n  class WithResizable extends Component {\n    constructor() {\n      this.state = {\n        size: [window.innerWidth, window.innerHeight],\n      };\n    }\n    onResize = () =&gt; {\n      this.setState({\n        size: [window.innerWidth * number, window.innerHeight],\n      });\n    };\n    componentDidMount() {\n      window.addEventListener(&quot;resize&quot;, this.onResize);\n    }\n    componentWillUnMount() {\n      window.removeEventListener(&quot;resize&quot;, this.onResize);\n    }\n    render() {\n      return &lt;WrappedComponent size={this.state.size} {...this.props} /&gt;;\n    }\n  }\n  return WithResizable;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>class Foo extends Component {\n  render () {\n    const size = this.props.size;\n    return &lt;div&gt;{size[0]} --- {size[1]}&lt;/div&gt;\n  }\n}\n\nconst WrapperedFoo = withResizable(Foo, 10);\nexport default WrapperedFoo;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;WrapperedFoo hello=&quot;world&quot;/&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_2-配置路径别名" tabindex="-1"><a class="header-anchor" href="#_2-配置路径别名" aria-hidden="true">#</a> 2. 配置路径别名</h3><ol><li><p>下载 <code>@craco/craco</code> 用于覆盖 <code>create-react-app</code> 脚手架工具自动生成的配置</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @craco/craco\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在应用根目录下创建 <code>craco.config.js</code> 配置文件并加入路径别名配置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">webpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&quot;@component&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/components/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&quot;@layouts&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/components/layouts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&quot;@pages&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/components/pages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&quot;@shared&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/components/shared&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&quot;@state&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src/state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>修改 <code>package.json</code> 文件中的应用启动命令</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;craco start&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;craco build&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;craco test&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>在应用根目录下创建 <code>jsconfig.json</code> 文件，加入路径别名的配置，该配置用于让编译器识别路径别名。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;@component/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/components/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;@layouts/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/components/layouts/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;@pages/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/components/pages/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;@shared/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/components/shared/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;@state/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/state/*&quot;</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ol><p>一般建议把不依赖props和state的函数提到你的组件外面，把那些仅被useEffect使用的函数放到useEffect里面。</p><p>如果在 useEffect 里面用到了组件内的函数或者通过 props 传递过来的函数，建议在创建函数的地方使用 useCallback 包裹函数并指定依赖项。</p><p>每次组件重新渲染，所有的东西都属于这次特定渲染，包括 props、state、事件处理函数、effect 等等。</p>',53),p={},r=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])}}]);