"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[436],{3069:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-93de11d2",path:"/docs/02.Front-endFrameKnowledge/02.React/05.React%20State%20Control.html",title:"React State Control -- React 全局状态管理",lang:"en-US",frontmatter:{title:"React State Control -- React 全局状态管理",date:"2022-04-11T15:15:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React State Control -- React 全局状态管理",slug:"react-state-control-react-全局状态管理",children:[{level:3,title:"1. Redux",slug:"_1-redux",children:[]},{level:3,title:"2. ReduxToolkit",slug:"_2-reduxtoolkit",children:[]},{level:3,title:"3. MobX",slug:"_3-mobx",children:[]},{level:3,title:"4. Recoil",slug:"_4-recoil",children:[]}]}],git:{createdTime:1649661453e3,updatedTime:165024106e4,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:2}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/05.React State Control.md"}},7041:(n,s,a)=>{a.r(s),a.d(s,{default:()=>O});var e=a(6252);const r=(0,e.uE)('<h2 id="react-state-control-react-全局状态管理" tabindex="-1"><a class="header-anchor" href="#react-state-control-react-全局状态管理" aria-hidden="true">#</a> React State Control -- React 全局状态管理</h2><p>全局状态管理是组件状态管理的另一种思路，传统的组件状态由组件管理，组件状态在组件之间通过 props 传递，传递和更改状态使组件代码变得复杂。</p><p>全局状态管理是指组件状态被状态仓库集中管理，组件从仓库中获取状态，组件通过特定方式更改仓库中的状态。</p><p>全局状态管理使组件状态共享变得简单。</p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/34.jpeg" align="left" width="60%"><h3 id="_1-redux" tabindex="-1"><a class="header-anchor" href="#_1-redux" aria-hidden="true">#</a> 1. Redux</h3><h4 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h4>',7),p={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("Redux"),l=(0,e.Uk)(" 是最为流行的用于实现全局状态管理的第三方库，它的核心功能是提供了状态管理规则以及相应的状态管理API。"),c={href:"https://react-redux.js.org/",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("React Redux"),u=(0,e.Uk)(" 是和 Redux 配合使用的，它提供了组件获取状态的方式并在状态更新后更新组件。"),i=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> redux@4.1.2 react-redux@7.2.6\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/35.png" align="left" width="80%"><h4 id="_1-2-光速入门" tabindex="-1"><a class="header-anchor" href="#_1-2-光速入门" aria-hidden="true">#</a> 1.2 光速入门</h4><ol><li><p>创建用于存储状态的 Store 对象</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 从 redux 中导入 createStore 方法\n// createStore 方法用于创建存储状态的 Store 对象\nimport { createStore } from &quot;redux&quot;;\n// createStore 方法的第一个参数是一个函数, 函数函数返回什么, Store 中就存储什么, 我们通常将这个函数命名为 reducer\n// createStore 方法的第二个参数是状态的初始值\n// createStore 方法的返回值就是用于存储状态的 Store 对象\nconst store = createStore(reducer, {count: 0});\n// 测试代码 -&gt; 获取 store 中存储的状态\nconsole.log(store.getState())\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>创建用于返回状态的 reducer 函数</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// reducer 函数的第一个参数是状态\n// 状态的初始值就是通过 createStore 方法的第二个参数指定的\n// 目前状态的值是一个对象 对象中存储了 count 属性, 值为 0\nfunction reducer(state) {\n  // 返回状态, reducer 函数返回什么, Store 对象中就存储什么\n  return state;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>搭建&quot;天梯&quot;，通过&quot;天梯&quot;打通组件从 Store 对象中获取状态的通道</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 从 react-redux 中导入 Provider 组件\n// Provider 组件就是&quot;天梯&quot;, 有了它组件就可以从 Store 对象中获取状态了\nimport { Provider } from &quot;react-redux&quot;;\n\n// 将天梯组件作为应用的根组件, 这样做以后应用中的任何组件就都可以从 Store 中获取状态了\n// 将 store 对象挂载到&quot;天梯&quot;中\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>组件从 Store 中获取状态并渲染状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 从 react-redux 中导入 useSelector 钩子函数\n// 它是用于从 Store 中获取状态的\nimport { useSelector } from &quot;react-redux&quot;;\n\nfunction App() {\n  // 在组件中调用 useSelector 方法从 Store 对象中获取状态\n  // 我们在调用 useSelector 方法时需要传递一个回调函数\n  // useSelector 方法内部在调用这个函数时通过参数的方式将状态传递给我们, 即当前代码中的 state 参数\n  // 我们在拿到 state 参数以后, 可以将它作为回调函数的返回值, 或者再从参数内部找到你想要的状态, 再作为返回值进行返回\n  // useSelector 方法的返回值就是回调函数的返回值, 就是我们想要获取的状态值\n  const count = useSelector((state) =&gt; state.count);\n  return &lt;div&gt;{count}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>在组件中通过 dispatch 方法发送更改状态的指令 ( action )</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 从 react-redux 导入 useDispatch 钩子函数\n// 该钩子函数用于在组件中获取 dispatch 方法\nimport { useDispatch } from &quot;react-redux&quot;;\n\nfunction App() {\n  // 在组件中通过调用 useDispatch 钩子函数获取 dispatch 方法\n  // dispatch 方法用于发送更改状态的指令\n  const dispatch = useDispatch();\n  // 在点击 div 时调用 dispatch 方法发送用于更改状态的指令\n  // 指令就是 action 对象, 通过 action 中的 type 属性描述要对状态进行怎样的操作\n  // type 属性的值由开发者自定义\n  return &lt;div onClick={() =&gt; dispatch({ type: &quot;increment&quot; })}&gt;{count}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>在 reducer 中接收更改状态的指令并根据指令对状态进行更改</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// reducer 函数的第二个参数是 action 对象\n// 其实就是在调用 dispatch 方法时传递的参数对象 (用于描述如果更改状态的指令)\nfunction reducer(state, action) {\n  // 在 reducer 函数中对 action 对象中的 type 值进行匹配\n  // 不同的 type 值表示要对状态进行不同的操作\n  switch (action.type) {\n    // 如果 type 属性值时 &quot;increment&quot;, 表示要对当前状态值进行 +1 操作\n    case &quot;increment&quot;:\n      // 对状态进行操作并将操作结果作为 reducer 函数的返回值\n      // 返回新的状态, 表示更新 Store 对象中存储的状态值\n      // Store 中的状态被更新了会触发使用了该状态的组件的自动更新\n      // 注意: 不能对原有状态进行直接修改, 比如 return state.count + 1, 这样的代码不合规, 必须返回新状态对象\n      return {count: state.count + 1};\n    default:\n      // 如果所有的 action.type 都没有匹配上就默认返回当前状态值\n      // 切记 reducer 函数一定要有返回值\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>在发送更改状态的指令时传递参数，比如让状态加任意值，我传什么值它就加什么值</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  // 在 action 对象中除了可以有 type 属性以外, 还可以有其他的自定义属性及值\n  // 当前我们就添加一个自定义的 payload 属性作为参数, 值为 5\n  // 也就是说当点击 div 时, 让状态在当前值的基础上 +5\n  return (\n    &lt;div onClick={() =&gt; dispatch({ type: &quot;increment&quot;, payload: 5 })}&gt;\n      {count}\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function reducer(state, action) {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      // 从 action 对象中获取 payload 参数,\n      // 将当前状态值和参数进行相加并返回结果\n      return {count: state.count + action.payload};\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h4 id="_1-3-action-creator" tabindex="-1"><a class="header-anchor" href="#_1-3-action-creator" aria-hidden="true">#</a> 1.3 action creator</h4><p>需求：在组件中添加两个按钮，点击第一个按钮时让数值 +5，点击第二个按钮时让数值 +10。</p><p>你的代码可能会很自然的写成下面这样：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const count = useSelector((state) =&gt; state.count);\n  const dispatch = useDispatch();\n  return (\n    &lt;div&gt;\n      {count}\n      &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot;, payload: 5 })}&gt;\n        +5\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot;, payload: 10 })}&gt;\n        +10\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在以上代码中存在一个问题，就是多次调用了 dispatch 方法，每次调用它的都传递了 action 对象，而这个参数对象属于冗余代码，可以被简化。</p><p>按照思路我们可以将以上代码改成下面这样，为了简化代码，我们将 action 对象提取了出来。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const increment = { type: &quot;increment&quot;, payload: 5 };\n\nfunction App() {\n  const count = useSelector((state) =&gt; state.count);\n  const dispatch = useDispatch();\n  return (\n    &lt;div&gt;\n      {count}\n      &lt;button onClick={() =&gt; dispatch(increment)}&gt;+5&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(increment)}&gt;+10&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>但是改成这样以后，payload 属性的值就无法动态化了，所以为了传递参数，我们对代码做出了更改。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useDispatch, useSelector } from &quot;react-redux&quot;;\n\n// action creator 函数: 返回 action 对象的函数\nconst increment = (payload) =&gt; ({ type: &quot;increment&quot;, payload });\n\nfunction App() {\n  const count = useSelector((state) =&gt; state.count);\n  const dispatch = useDispatch();\n  return (\n    &lt;div&gt;\n      {count}\n      &lt;button onClick={() =&gt; dispatch(increment(5))}&gt;+5&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(increment(10))}&gt;+10&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在 Redux 中，返回 action 对象的函数被叫做 action creator 函数。</p><h4 id="_1-4-combinereducers" tabindex="-1"><a class="header-anchor" href="#_1-4-combinereducers" aria-hidden="true">#</a> 1.4 combineReducers</h4><p>目前在 store 中只存储了一个状态，当 store 中存储多个状态的时候会存在什么问题呢?</p><p>需求：新建 Message 组件，该组件负责发送消息，发送的消息需要被存储在 store 中。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Message.js\nimport { useRef } from &quot;react&quot;;\nimport { useDispatch, useSelector } from &quot;react-redux&quot;;\n\nconst saveMessage = (payload) =&gt; ({ type: &quot;save_message&quot;, payload });\n\nfunction Message() {\n  // 和 input 进行绑定, 用于获取用户在文本框中输入的内容\n  const inputRef = useRef();\n  // 获取用于发送指令的 dispatch 方法\n  const dispatch = useDispatch();\n  // 从 store 中获取状态\n  const message = useSelector((state) =&gt; state.message);\n  // 用户发送 message 的方法\n  const onMessageSendHandler = () =&gt; dispatch(saveMessage(inputRef.current.value));\n  return (\n    &lt;&gt;\n      &lt;input ref={inputRef} /&gt;\n      &lt;button onClick={onMessageSendHandler}&gt;send&lt;/button&gt;\n      {message}\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/index.js\n// 在状态初始值中加入 message\nexport const store = createStore(reducer, { count: 0, message: &quot;&quot; });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/index.js\nfunction reducer(state, action) {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      // 在修改状态时, 要先获取到原有状态, 在原有状态的基础上创建新状态, 返回新状态\n      return { ...state, count: state.count + action.payload };\n    // 在 reducer 函数中加入处理 message 状态的代码\n    case &quot;save_message&quot;:\n      return { ...state, message: action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>以上代码存在两个问题，第一个是当状态变得庞大时 reducer 函数一定会变得庞大，第二个是 reducer 函数在处理多个不相关的状态。</p><p>为解决上述问题，为提高代码的可维护性，Redux 允许开发者对状态进行分类，通过编写多个 reducer 函数对不同的状态进行处理。</p><p>虽然 Redux 允许存在多个 reducer 函数，但最终 createStore 方法只接收一个，就是说 reducer 函数们最终要被合并，createStore 方法只接收合并结果。</p><p>第一步：对 reducer 函数进行拆分，将一个 reducer 函数拆分为多个 reducer 函数</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// counter 状态的初始值\n// 一个大的 reducer 函数被拆分成了多个小的 reducer 函数，每个 reducer 函数负责处理不同的状态\n// 每个 reducer 函数处理的状态又都会有初始值，由于原来的一个状态的初始值变成了现在的多个状态的初始\n// 所以这个初始值就不能通过 createStore 方法的第二个参数传递了\n// 所以现在状态的默认值改成了通过函数参数默认值的方式进行传递\nconst counterInitialState = { count: 0 };\n\n// counterReducer 函数用于处理并返回和 counter 相关的状态\nfunction counterReducer(state = counterInitialState, action) {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      return { count: state.count + action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const messageInitialState = { value: &quot;&quot; };\n\n// messageReducer 函数用于处理并返回和 message 相关的状态\nfunction messageReducer(state = messageInitialState, action) {\n  switch (action.type) {\n    case &quot;save_message&quot;:\n      return { value: action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>第二步：合并 reducer 函数，因为 createStore 方法要接收最终被合并之后的 reducer 函数。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// combineReducers 方法的参数是一个对象, 这个对象就是 Store 对象中存储的状态对象\n// 对象中的属性就是状态属性，属性值就是用于返回状态的 reducer 函数\n// 所以现在用于存储状态的 store 对象长成这样: {counter: {count: 0}, message: {value: &quot;&quot;}}\n// combineReducers 方法的返回值就是合并好的 reducer 函数, 我们可以将它传递给 createStore 方法\n// reducer 函数状态拆分是为了方便代码维护，reducer 函数合并是为了将 reducer 函数作为参数传递给 createStore 方法\n\n// {count: 0, message: &#39;&#39;}\n// {counter: {count: 0}, message: {value: &#39;&#39;}}\nconst reducers = combineReducers({\n  counter: counterReducer,\n  message: messageReducer,\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 将合并之后的 rootReducer 函数作为 createStore 方法的参数\n// 同时去除原本的第二个参数, 状态初始值\nexport const store = createStore(reducers);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在组件中重新获取状态，因为 store 对象中存储的数据层级发生了变化。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const count = useSelector((state) =&gt; state.counter.count);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Message() {\n  const message = useSelector((state) =&gt; state.message.value);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-5-代码重构" tabindex="-1"><a class="header-anchor" href="#_1-5-代码重构" aria-hidden="true">#</a> 1.5 代码重构</h4><ol><li><p>在 src 目录下创建 state 文件夹，用于存放和全局状态相关的代码。</p></li><li><p>在 state 目录下创建 reducers 文件夹用于存放 reducer 函数</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/reducers/counter.js\nconst initialState = { count: 0 };\n\nexport default function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      return { count: state.count + action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/reducers/message.js\nconst initialState = { value: &quot;&quot; };\n\nexport default function messageReducer(state = initialState, action) {\n  switch (action.type) {\n    case &quot;save_message&quot;:\n      return { value: action.payload };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/reducers/index.js\nimport { combineReducers } from &quot;redux&quot;;\nimport counterReducer from &quot;./counter&quot;;\nimport messageReducer from &quot;./message&quot;;\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n  message: messageReducer,\n});\n\nexport default rootReducer;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>在 state 目录新建 store.js 文件，用于存放创建 store 对象的代码。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/store.js\nimport { createStore } from &quot;redux&quot;;\nimport reducers from &quot;./reducers&quot;;\n\nexport const store = createStore(reducers);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>在 store 目录下创建 action-creators 文件夹，用于存放 action creator 代码</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-creators/counter.js\nexport const increment = (payload) =&gt; ({ type: &quot;increment&quot;, payload });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-creators/message.js\nexport const saveMessage = (payload) =&gt; ({ type: &quot;save_message&quot;, payload });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-creators/index.js\nexport * from &quot;./counter&quot;;\nexport * from &quot;./message&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>在 state 目录下新建 index.js 文件，作为 state 文件夹下模块的导入口</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export * as actionCreators from &quot;./action-creators&quot;;\nexport * from &quot;./store&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>在应用入口文件中导入 store</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { store } from &quot;./state&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在组件中导入 action creator</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { increment } from &quot;./state&quot;;\nimport { saveMessage } from &quot;./state&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h4 id="_1-6-actiontype-常量" tabindex="-1"><a class="header-anchor" href="#_1-6-actiontype-常量" aria-hidden="true">#</a> 1.6 actionType 常量</h4><p>action 对象中的 type 属性值是一个字符串，我们要将它抽象成常量值，为什么呢？</p><ol><li>防止字符串书写错误，因为这个字符串既在 action creator 函数中用到，又在 reducer 函数中用到，而字符串在代码编辑器中是没有提示的。</li><li>方便修改，在后续的代码编辑中，很可能认识到之前定义的值不合适。</li></ol><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-types/counter.js\nexport const INCREMENT = &quot;increment&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-types/message.js\nexport const SAVE_MESSAGE = &quot;save_message&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-creators/counter.js\nimport { INCREMENT } from &quot;../action-types/counter&quot;;\n\nexport const increment = (payload) =&gt; ({ type: INCREMENT, payload });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-creators/message.js\nimport { SAVE_MESSAGE } from &quot;../action-types/message&quot;;\n\nexport const saveMessage = (payload) =&gt; ({ type: SAVE_MESSAGE, payload });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/reducers/counter.js\nimport { INCREMENT } from &quot;../action-types/counter&quot;;\n\nexport default function counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case INCREMENT:\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/reducers/message.js\nimport { SAVE_MESSAGE } from &quot;../action-types/message&quot;;\n\nexport default function messageReducer(state = initialState, action) {\n  switch (action.type) {\n    case SAVE_MESSAGE:\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_1-7-bindactioncreators" tabindex="-1"><a class="header-anchor" href="#_1-7-bindactioncreators" aria-hidden="true">#</a> 1.7 bindActionCreators</h4><p>组件：每个组件只要获取状态就都需要获取 dispatch，都需要导入 actionCreator 并传入 dispatch。此处代码可以通过 <code>bindActionCreators</code> 方法简化。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useDispatch } from &quot;react-redux&quot;;\nimport { bindActionCreators } from &quot;redux&quot;;\nimport { actionCreators } from &quot;../state&quot;;\n\nexport const useActions = () =&gt; {\n  const dispatch = useDispatch();\n  return bindActionCreators(actionCreators, dispatch);\n};\n\n/**\n * actionCreators 是一个对象，对象中存储了所有的 action creator 函数\n * actionCreators =&gt; {increment: (){}, save_message: () {}}\n * bindActionCreators =&gt; {increment: dispatch(increment)}\n */\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_1-8-中间件函数" tabindex="-1"><a class="header-anchor" href="#_1-8-中间件函数" aria-hidden="true">#</a> 1.8 中间件函数</h4><h5 id="_1-中间件函数概述" tabindex="-1"><a class="header-anchor" href="#_1-中间件函数概述" aria-hidden="true">#</a> 1. 中间件函数概述</h5><p>默认的 Redux 工作流程只能处理同步状态，但在实际的项目开发中状态的获取、更新、删除等都需要通过异步来实现，那么如何在 Redux 中实现异步呢？</p><p>Redux 提供了中间件机制供开发者处理副作用代码，中间件其实就是一堆依次执行的函数，一堆供开发者执行副作用的函数。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/37.png" alt="37"></p><p>创建中间件函数要遵循中间件函数的创建规则，以下是创建中间件函数的模板代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 注意: 当 Action 被触发后，执行的是最里层函数，外层函数是用来传递参数的，只有初始化时执行。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_2-创建中间件函数" tabindex="-1"><a class="header-anchor" href="#_2-创建中间件函数" aria-hidden="true">#</a> 2. 创建中间件函数</h5><p>需求：创建一个用于输出 action 对象的中间件函数，当组件调用 dispatch 方法发送指令时，在控制台输出指令 action 对象。</p><p><code>src/store/middlewares/logger.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// logger 是中间件的名字, 它的作用是当组件发送操作状态的指令action对象时, 在控制台中输出该 action 对象</span>\n<span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// store, 对象类型, store.dispatch、store.getState</span>\n  <span class="token comment">// 中间件函数内部的自定义逻辑</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 当前的中间件函数执行完成后必须调用 next 方法, 使 redux 流程继续向前走, 否则代码会卡在当前函数中.</span>\n  <span class="token comment">// 调用 next 方法时必须将 action 对象作为参数, 否则下一个中间件函数或者 reducer 就不知道当前要做什么事情了.</span>\n  <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> logger<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="_3-注册中间件函数" tabindex="-1"><a class="header-anchor" href="#_3-注册中间件函数" aria-hidden="true">#</a> 3. 注册中间件函数</h5><p><code>src/store/index.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { applyMiddleware } from &quot;redux&quot;;\nimport logger from &quot;./middlewares/logger&quot;;\n\nexport const store = createStore(rootReducer, applyMiddleware(logger));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>中间件函数是可以批量注册的，当存在多个中间件时，中间函数是按照 applyMiddleware 方法的参数顺序执行的。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import logger from &quot;./middlewares/logger&quot;;\nimport speak from &quot;./middlewares/speak&quot;;\n\n// 先执行 speak, 后执行 logger\nexport const store = createStore(rootReducer, applyMiddleware(speak, logger));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/36.png" alt="36"></p><h5 id="_4-状态调试工具" tabindex="-1"><a class="header-anchor" href="#_4-状态调试工具" aria-hidden="true">#</a> 4. 状态调试工具</h5>',64),b=(0,e.Uk)("在谷歌浏览器中安装 "),m={href:"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=zh-CN",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("Redux DevTools"),g=(0,e.uE)('<li><p>在应用中安装 <code>redux-devtools-extension</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> redux-devtools-extension\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在应用中进行配置以开启调试工具</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> composeWithDevTools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-devtools-extension&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li>',2),k=(0,e.uE)('<h4 id="_1-9-redux-thunk" tabindex="-1"><a class="header-anchor" href="#_1-9-redux-thunk" aria-hidden="true">#</a> 1.9 redux-thunk</h4><h5 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1. 基本使用</h5><p>redux-thunk 是 Redux 官方提供的用于在 Redux 工作流程中加入异步代码的中间件。</p><p>需求：向 npm 发送请求加载 npm 包列表信息。</p><p>第一步：下载 redux-thunk 中间件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> redux-thunk axios\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第二步：注册 redux-thunk 中间件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/store.js\nimport { applyMiddleware } from &quot;redux&quot;;\nimport thunk from &quot;redux-thunk&quot;;\n\nexport const store = createStore(reducers, applyMiddleware(thunk));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第三步：设计并定义 Action Type</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-types/packages.action.type.js\nexport const SEARCH_PACKAGES = &quot;search_packages&quot;;\nexport const SEARCH_PACKAGES_SUCCESS = &quot;search_packages_success&quot;;\nexport const SEARCH_PACKAGES_ERROR = &quot;search_packages_error&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第四步：在 Reducer 函数中匹配 Action Type 并返回对应的新状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/reducers/packages.reducer.js\nimport { \n  SEARCH_PACKAGES, \n  SEARCH_PACKAGES_SUCCESS, \n  SEARCH_PACKAGES_ERROR \n} from &quot;../action-types/packages.action.type.js&quot;;\n\nconst initialState = {\n  list: [],\n  loading: false,\n  error: null,\n};\n\nexport default function packagesReducer(state = initialState, action) {\n  switch (action.type) {\n    case SEARCH_PACKAGES:\n      return {\n        loading: true,\n        error: null,\n        list: [],\n      };\n    case SEARCH_PACKAGES_SUCCESS:\n      return {\n        loading: false,\n        error: null,\n        list: action.payload,\n      };\n    case SEARCH_PACKAGES_ERROR:\n      return {\n        loading: false,\n        error: action.error,\n        list: [],\n      };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>第五步：将 packagesReducer 合并到根 reducer</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import packagesReducer from &quot;./packages&quot;\n\nexport const reducers = combineReducers({\n  packages: packagesReducer,\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第六步：创建 Action Creator 函数并在其中完成异步逻辑</p><p>在使用了 Redux Thunk 中间件以后，dispatch 方法可以接收一个函数作为参数，也就是说在 Action Creator 函数中可以再返回一个函数，我们需要在这个函数中完成异步操作，在该函数中根据异步流程更改 Store 中对应的状态。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/action-creators/packages.action.creator.js\nimport axios from &quot;axios&quot;;\nimport {\n  SEARCH_PACKAGES,\n  SEARCH_PACKAGES_ERROR,\n  SEARCH_PACKAGES_SUCCESS,\n} from &quot;../action-types/packages.action.type&quot;;\n\nexport const searchPackages = (key) =&gt; async (dispatch) =&gt; {\n  dispatch({ type: SEARCH_PACKAGES });\n  try {\n    const { data } = await axios.get(`https://registry.npmjs.org/-/v1/search`, {\n      params: {\n        text: key,\n      },\n    });\n    dispatch({\n      type: SEARCH_PACKAGES_SUCCESS,\n      payload: data.objects.map((item) =&gt; item.package.name),\n    });\n  } catch (error) {\n    dispatch({ type: SEARCH_PACKAGES_ERROR, error: error.message });\n  }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>第七步：在组件中实现对 npm 包的搜索</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRef } from &quot;react&quot;;\nimport { useDispatch, useSelector } from &quot;react-redux&quot;;\nimport { searchPackages } from &quot;./state/action-creators/packages.action.creator&quot;;\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const packages = useSelector((state) =&gt; state.packages);\n  const inputRef = useRef();\n\n  const getPackages = () =&gt; {\n    if (packages.loading) {\n      return &lt;div&gt;loading...&lt;/div&gt;;\n    }\n    if (packages.error) {\n      return &lt;div&gt;{packages.error}&lt;/div&gt;;\n    }\n    return (\n      &lt;div&gt;\n        &lt;pre&gt;{JSON.stringify(packages, null, 2)}&lt;/pre&gt;\n      &lt;/div&gt;\n    );\n  };\n\n  return (\n    &lt;&gt;\n      &lt;input type=&quot;text&quot; ref={inputRef} /&gt;\n      &lt;button onClick={() =&gt; dispatch(searchPackages(inputRef.current.value))}&gt;\n        search\n      &lt;/button&gt;\n      {getPackages()}\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h5 id="_2-实现原理" tabindex="-1"><a class="header-anchor" href="#_2-实现原理" aria-hidden="true">#</a> 2. 实现原理</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// createThunkMiddleware 方法用于返回中间件函数\nfunction createThunkMiddleware(extraArgument) {\n  // 返回中间件函数\n  return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {\n    // 如果 action 是函数类型\n    if (typeof action === &#39;function&#39;) {\n      // 调用函数并传递相关参数\n      return action(dispatch, getState, extraArgument);\n    }\n    // 如果 action 是对象类型, 调用 next 执行下一个中间件函数\n    return next(action);\n  };\n}\n// 调用 createThunkMiddleware 得到中间件函数\nconst thunk = createThunkMiddleware();\n\n// 暴露获取中间件函数的方法, 用于方便开发者自己传递 extraArgument 参数\nthunk.withExtraArgument = createThunkMiddleware;\n\n// 导出默认创建好的 thunk 中间件函数\nexport default thunk;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_4-1-10-redux-saga" tabindex="-1"><a class="header-anchor" href="#_4-1-10-redux-saga" aria-hidden="true">#</a> 4.1.10 redux-saga</h4>',22),v={href:"https://redux-saga.js.org/",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("redux-saga"),q=(0,e.Uk)(" 可以将异步操作从 Action Creator 文件中抽离出来，放在一个单独的文件中。"),f=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> redux-saga\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export const SEARCH_PACKAGES = &quot;search_packages&quot;;\nexport const SEARCH_PACKAGES_SUCCESS = &quot;search_packages_success&quot;;\nexport const SEARCH_PACKAGES_ERROR = &quot;search_packages_error&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { SEARCH_PACKAGES, SEARCH_PACKAGES_ERROR, SEARCH_PACKAGES_SUCCESS } from &quot;../action-types/packages&quot;;\n\nexport const search_packages = (payload) =&gt; ({type: SEARCH_PACKAGES,payload});\nexport const search_packages_success = (payload) =&gt; ({type: SEARCH_PACKAGES_SUCCESS, payload});\nexport const search_packages_error = (error) =&gt; ({type: SEARCH_PACKAGES_ERROR, error});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;;\nimport { put, takeEvery } from &quot;redux-saga/effects&quot;;\nimport { search_packages_error, search_packages_success } from &quot;../action-creators/packages&quot;;\nimport { SEARCH_PACKAGES } from &quot;../action-types/packages&quot;;\n\nfunction* searchPackages(action) {\n  try {\n    const { data } = yield axios.get(`https://registry.npmjs.org/-/v1/search`, {\n      params: {\n        text: action.payload,\n      },\n    });\n    yield put(\n      search_packages_success(data.objects.map((item) =&gt; item.package.name))\n    );\n  } catch (error) {\n    yield put(search_packages_error(error));\n  }\n}\n// reducer 和 saga 可以同时匹配同一个 action, reducer 先接收, saga 后接收\nexport default function* packageSaga() {\n  yield takeEvery(SEARCH_PACKAGES, searchPackages);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { SEARCH_PACKAGES, SEARCH_PACKAGES_ERROR, SEARCH_PACKAGES_SUCCESS } from &quot;../action-types/packages&quot;;\n\nconst initialState = {\n  list: [],\n  loading: false,\n  error: null,\n};\n\nexport default function packagesReducer(state = initialState, action) {\n  switch (action.type) {\n    case SEARCH_PACKAGES:\n      return {\n        loading: true,\n        error: null,\n        list: [],\n      };\n    case SEARCH_PACKAGES_SUCCESS:\n      return {\n        loading: false,\n        error: null,\n        list: action.payload,\n      };\n    case SEARCH_PACKAGES_ERROR:\n      return {\n        loading: false,\n        error: action.error,\n        list: [],\n      };\n    default:\n      return state;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRef } from &quot;react&quot;;\nimport { useDispatch, useSelector } from &quot;react-redux&quot;;\nimport { search_packages } from &quot;../state/action-creators/packages&quot;;\n\nfunction Packages() {\n  const inputRef = useRef();\n  const dispatch = useDispatch();\n  const packages = useSelector((state) =&gt; state.packages.list);\n  const onClickHandler = () =&gt; {\n    dispatch(search_packages(inputRef.current.value));\n  };\n  return (\n    &lt;&gt;\n      &lt;input type=&quot;text&quot; ref={inputRef} /&gt;\n      &lt;button onClick={onClickHandler}&gt;search&lt;/button&gt;\n      &lt;pre&gt;{JSON.stringify(packages, null, 2)}&lt;/pre&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default Packages;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 合并 saga\nimport { all } from &quot;redux-saga/effects&quot;;\nimport packageSaga from &quot;./packages&quot;;\n\nexport default function* sagas() {\n  yield all([packageSaga()]);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import createSagaMiddleware from &quot;redux-saga&quot;;\nimport sagas from &quot;./sagas&quot;;\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = createStore(reducers, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(sagas);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_1-11-redux-actions" tabindex="-1"><a class="header-anchor" href="#_1-11-redux-actions" aria-hidden="true">#</a> 1.11 redux-actions</h4>',9),x=(0,e.Uk)("Redux流程中大量的样板代码读写很痛苦，使用"),y={href:"https://redux-actions.js.org/",target:"_blank",rel:"noopener noreferrer"},S=(0,e.Uk)("redux-actions"),C=(0,e.Uk)("可以简化Action和Reducer的处理。"),R=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save redux-actions\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { createAction } from &quot;redux-actions&quot;;\n\n// createAction 方法用于创建 Action Creator 函数\n// 它在 reducer 函数中也用于 action 对象类型的匹配\nexport const increment = createAction(&quot;increment&quot;);\n\n// increment() -&gt; {type: &quot;increment&quot;}\n// increment(1) -&gt; {type: &quot;increment&quot;, payload: 1}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { handleActions as createReducer } from &quot;redux-actions&quot;;\nimport { increment } from &quot;../action-creators/counter&quot;;\n\nconst initialState = { count: 0 };\n\n// createReducer 函数用于创建 reducer 函数\n// 它的理念是对原有的 reducer 函数中的 switch case 进行拆分, 拆分为多个小的函数\nconst counterReducer = createReducer(\n  {\n    [increment]: (state, action) =&gt; ({\n      ...state,\n      count: state.count + action.payload,\n    }),\n  },\n  initialState\n);\n\nexport default counterReducer;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_2-reduxtoolkit" tabindex="-1"><a class="header-anchor" href="#_2-reduxtoolkit" aria-hidden="true">#</a> 2. ReduxToolkit</h3><h4 id="_2-1-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-概述" aria-hidden="true">#</a> 2.1 概述</h4><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/39.png"><p>ReduxTookit 是 Redux 官方推出的基于 Redux 进行高度封装的工具包，降低了 Redux 的使用难度，使开发者能够用更少的代码完成更多的工作。</p><p>ReduxTookit 提供了强大且丰富状态编辑方法，进一步增强了 Redux 对状态进行处理的能力。</p><p>ReduxTookit 简化了创建、配置 Store 的各种和应用逻辑无关的代码，比如配置调试工具的代码，配置中间件的代码等等。</p><p>ReduxTookit 集成了常用的 Redux 中间件，不需要开发者单独下载，单独配置。</p><h4 id="_2-2-下载-reduxtoolkit" tabindex="-1"><a class="header-anchor" href="#_2-2-下载-reduxtoolkit" aria-hidden="true">#</a> 2.2 下载 ReduxToolkit</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 新项目</span>\n<span class="token comment"># Redux + Plain JS template</span>\nnpx create-react-app my-app --template redux\n<span class="token comment"># Redux + TypeScript template</span>\nnpx create-react-app my-app --template redux-typescript\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 现有项目</span>\n<span class="token function">npm</span> <span class="token function">install</span> @reduxjs/toolkit react-redux\n<span class="token function">yarn</span> <span class="token function">add</span> @reduxjs/toolkit react-redux\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-3-createaction" tabindex="-1"><a class="header-anchor" href="#_2-3-createaction" aria-hidden="true">#</a> 2.3 createAction</h4><p>createAction 方法用于创建 action creator 函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&quot;counter/increment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// increment() =&gt; {type: &quot;counter/increment&quot;}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&quot;counter/decrement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// decrement() =&gt; {type: &quot;counter/decrement&quot;}</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> incrementByCount <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&quot;counter/incrementByCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// incrementByCount(5) =&gt; {type: &quot;counter/incrementByCount&quot;, payload: 5}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2-4-creatreducer" tabindex="-1"><a class="header-anchor" href="#_2-4-creatreducer" aria-hidden="true">#</a> 2.4 creatReducer</h4><p>createReducer 方法用于创建 reducer 函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建 reducer 函数的第一种写法</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> incrementByCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../actions/counter.action&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  builder\n    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>increment<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>decrement<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n          action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;counter/incrementByCount&quot;</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>payload <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">addDefaultCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建 reducer 函数的第二种写法</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> incrementByCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../actions/counter.action&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>increment<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>decrement<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>incrementByCount<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建 reducer 函数的第三种写法</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> incrementByCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../actions/counter.action&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>\n  initialState<span class="token punctuation">,</span>\n  <span class="token comment">// normal reducer</span>\n  <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>increment<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>decrement<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// matcher reducer</span>\n  <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token function-variable function">matcher</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n          action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&quot;counter/incrementByCount&quot;</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>payload <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// default reducer</span>\n  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建 reducer 函数的第四种写法</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&quot;counter/increment&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&quot;counter/decrement&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&quot;counter/incrementByCount&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_2-5-configurestore" tabindex="-1"><a class="header-anchor" href="#_2-5-configurestore" aria-hidden="true">#</a> 2.5 configureStore</h4><p>configureStore 方法用于创建 store 对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 导入 configureStore 方法, 用于创建、配置 store 对象</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 导入 counterReducer 函数, 用于配置 store 对象</span>\n<span class="token keyword">import</span> counterReducer <span class="token keyword">from</span> <span class="token string">&quot;./reducers/counter.reducer&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建、配置、导出 store 对象</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 是否开启浏览器的 redux 开发者调试工具</span>\n  <span class="token literal-property property">devTools</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// reducer 选项用于替换原有的 combineReducers 方法, 用于合并应用中的多个 reducer 函数, 组成最终的 Store 对象</span>\n  <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">counter</span><span class="token operator">:</span> counterReducer<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_2-6-createslice" tabindex="-1"><a class="header-anchor" href="#_2-6-createslice" aria-hidden="true">#</a> 2.6 createSlice</h4><p>ReduxToolkit 中的状态切片指的是管理状态、处理状态的地方，就是说原本 Redux 中由 Reducer 函数做的事情现在由状态切片来做。</p><p>ReduxToolkit 中可以有很多状态切片，每个状态切片负责处理一类状态，就是说原本 Redux 中的众多小的 Reducer 函数现在变成了众多小的状态切片。</p><p>ReduxToolkit 中的状态切片是 Reducer 函数的升级，创建状态切片的 API 会返回 Action Creators 函数和 Reducer 函数，使开发者可以专注于状态的管理。</p><p><code>store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// createSlice: 用于创建状态切片\nimport { createSlice } from &quot;@reduxjs/toolkit&quot;;\n\n// actions: 对象类型, 用于存储 action creator 函数, 函数名字和 reducers 配置选项中 reducer 函数的名字相对应\nconst { actions, reducer: TodoReducer } = createSlice({\n  // createSlice 方法将会返回 action creator 函数, action creator 函数将要返回 action 对象\n  // 按照约定, action 对象中的 type 属性值应该由两部分组成, 第一部分表示你要处理什么状态, 第二部分表示你要对该状态进行什么处理\n  // 这样约定的目的是为了让代码看起来更加的清晰 {type: &quot;todos/addTodo&quot;}\n  // name 属性配置的就是 action 对象中 type 属性值的一部分, 表示你要对什么状态进行处理\n  name: &quot;todos&quot;,\n  // initialState 配置的是当前状态切片中状态的初始值\n  initialState: [],\n  // reducers 对象中配置的是对状态进行处理的 reducer 函数\n  // 在原本的 reducer 函数中, 对状态进行的不同的处理是通过 switch case 语句匹配 action.type 属性实现的\n  // ReduxToolkit 将原本的 switch case 抽象成了多个 reducer 函数, 每个 reducer 函数对应的就是原本 switch case 中的一种情况\n  // 在 ReduxToolkit 中 reducer 函数的名字会作为 action 对象中 type 属性值的第二部分, 这样的话就形成了完整的 type 属性值了\n  reducers: {\n    // 添加任务\n    addTodo(state, action) {\n      // 在 ReduxToolkit 中的 reducer 函数里, 可以直接对状态进行处理, 不必拷贝新的状态再对其进行处理\n      // 因为 ReduxToolkit 内部集成了不可变数据结构, 此处操作不会改变原有状态\n      // 状态处理完成后也不必显式的在 reducer 函数中返回新的处理后的状态, 内部会帮助我们使用新状态替换旧状态\n      // action.payload 是 ReduxToolkit 为 action 对象添加的属性, 属性值是调用 action creator 函数时传递的参数\n      state.push(action.payload);\n    },\n  },\n});\n// 导出 action creator 函数, 供组件使用\nexport const { addTodo } = actions;\n// 导出 reducer 函数, 因为在后续的代码中还是要合并 reducer 函数\nexport default TodoReducer;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="_2-7-prepare" tabindex="-1"><a class="header-anchor" href="#_2-7-prepare" aria-hidden="true">#</a> 2.7 prepare</h4><p>当 Action 指令被发出后，ReduxToolkit 允许开发者在 Reducer 函数接收 Action 之前预先对 Action 对象中的 payload 属性值进行预处理。</p><p>这样做的目的是抽离组件中和组件无关的逻辑，净化组件代码。</p><p><code>store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { nanoid } from &quot;@reduxjs/toolkit&quot;;\n\ncreateSlice({\n  reducers: {\n    addTodo: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(payload) {\n        return {\n          payload: { ...payload,  id: nanoid(), date: new Date },\n        };\n      },\n    },\n  },\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_2-8-createasyncthunk" tabindex="-1"><a class="header-anchor" href="#_2-8-createasyncthunk" aria-hidden="true">#</a> 2.8 createAsyncThunk</h4><p>通过实现 <code>加载服务端任务列表</code> 功能学习 ReduxToolkit 是如何在工作流程中加入异步功能的。</p><p><code>src/store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 导入 createAsyncThunk 方法, 用于处理异步代码\nimport { createAsyncThunk } from &quot;@reduxjs/toolkit&quot;;\n// 导入 axios 对象, 用于发送 Ajax 请求\nimport axios from &quot;axios&quot;;\n\n// 调用 createAsyncThunk 方法, 用于处理异步代码\n// createAsyncThunk 方法的第一个参数是 action 对象中 type 属性值的前缀, 按照约定, 异步 action 的 type 属性值由三部分构成\n// 第一部分表示要对什么状态进行处理, 第二部分表示对状态进行什么处理, 第三部分表示对状态处理的过程进行到哪一步了\n// 等待: todos/loadTodos/pending, 成功: todos/loadTodos/fulfilled, 失败: todos/loadTodos/rejected\n\n// createAsyncThunk 方法的第二个参数是函数类型, 用于放置步代码\n// 该参数函数有一个 payload 参数, 是调用 action creator 函数时传递的参数\n\n// createAsyncThunk 方法的返回值是 action creator 函数, 调用它并将返回值传递给 dispatch, 可以触发该异步操作的执行\nexport const loadTodos = createAsyncThunk(&quot;todos/loadTodos&quot;, (payload) =&gt; {\n  // 异步操作成功, 返回异步操作结果, 它将会被作为 fulfilled action 的 payload\n  // 异步操作失败, 抛出异常, 它将会作为 rejected action 的 error\n  try {\n    return axios.get(payload).then((response) =&gt; response.data);\n  } catch (error) {\n    throw new Error(&quot;自定义错误信息&quot;);\n  }\n});\n\nconst { actions, reducer: TodoReducer } = createSlice({\n  // 通过 extraReducers 配置项处理异步 action \n  extraReducers: {\n    // 等待\n    [loadTodos.pending]() {\n      console.log(&quot;loadTodos.pending&quot;);\n    },\n    // 成功\n    [loadTodos.fulfilled](state, action) {\n      // action.payload: 存储异步操作成功的结果\n      action.payload.forEach((todo) =&gt; state.push(todo));\n    },\n    // 失败\n    [loadTodos.rejected](state, action) {\n      // action.error: 存储异步操作失败的原因\n      console.log(&quot;loadTodos.rejected&quot;);\n    },\n  },\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p><code>src/components/TodoMain.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect } from &quot;react&quot;;\nimport { useDispatch } from &quot;react-redux&quot;;\nimport { loadTodos } from &quot;../store/todos.slice&quot;;\n\nfunction TodoMain() {\n  const dispatch = useDispatch();\n  useEffect(() =&gt; {\n    dispatch(loadTodos(&quot;http://localhost:3001/todos&quot;));\n  }, [dispatch]);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_2-9-feature-key" tabindex="-1"><a class="header-anchor" href="#_2-9-feature-key" aria-hidden="true">#</a> 2.9 feature_key</h4><p>关于状态名称字符串，在多个地方被用到，比如设置状态名称前缀时，创建异步 Action Creator 时，在创建 Store 对象时，在组件中获取状态时，为了保持应用代码的可维护性，ReduxToolkit 官方推荐我们将它抽取成一个常量，然后在每个地方都使用这个常量，当常量值发生变化时每个使用的地方都会得到同步，不会轻易导致程序报错。</p><p><code>src/store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export const TODO_FEATURE_KEY = &quot;todos&quot;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>createSlice({\n  name: TODO_FEATURE_KEY,\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>createAsyncThunk(\n  `${TODO_FEATURE_KEY}/loadTodos`\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>src/store/index.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export default configureStore({\n  reducer: {\n    [TODO_FEATURE_KEY]: TodoReducer,\n  }\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>src/components/TodoMain.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function TodoMain() {\n  const todos = useSelector((state) =&gt; state[TODO_FEATURE_KEY]);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-10-middleware" tabindex="-1"><a class="header-anchor" href="#_2-10-middleware" aria-hidden="true">#</a> 2.10 middleware</h4><p>在 configureStore 方法的配置对象中，ReduxToolkit 提供了 middleware 选项用来配置中间件，它的值是一个函数，函数中要返回包含中间件的数组。</p><p>ReduxToolkit 默认内置了一些中间件，在 middleware 函数的返回值中要包含内置中间件，内置中间件通过函数参数获取。</p><p><code>src/store/index.js</code></p><p><code>npm i redux-logger</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import logger from &quot;redux-logger&quot;;\n\nexport default configureStore({\n  middleware: (getDefaultMiddeware) =&gt; {\n    return getDefaultMiddeware().concat(logger);\n  },\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-11-实体适配器" tabindex="-1"><a class="header-anchor" href="#_2-11-实体适配器" aria-hidden="true">#</a> 2.11 实体适配器</h4><h5 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h5><p>实体指的就是状态，可以将实体适配器理解为状态适配器。</p><p>实体适配器是对象类型，开发者必须按照要求的格式将状态存储在其中，实体适配器会提供操作状态的快捷方法，以简化 reducer 中对状态的操作代码。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>{\n  // The unique IDs of each item. Must be strings or numbers\n  ids: []\n  // A lookup table mapping entity IDs to the corresponding entity objects\n  entities: {}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>{\n  ids: [1,2,3],\n  entities: {\n    1: { &quot;id&quot;: 1, &quot;title&quot;: &quot;吃饭&quot;, &quot;isCompleted&quot;: false },\n    2: { &quot;id&quot;: 2, &quot;title&quot;: &quot;睡觉&quot;, &quot;isCompleted&quot;: false },\n    3: { &quot;id&quot;: 3, &quot;title&quot;: &quot;打豆豆&quot;, &quot;isCompleted&quot;: false }\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_2-创建实体适配器" tabindex="-1"><a class="header-anchor" href="#_2-创建实体适配器" aria-hidden="true">#</a> 2. 创建实体适配器</h5><p><code>src/store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// createEntityAdapter: 用于创建实体适配器对象\nimport { createEntityAdapter } from &quot;@reduxjs/toolkit&quot;;\n\n// 创建用于存储 todo 任务列表的实体适配器\nconst todosAdapter = createEntityAdapter();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_3-应用实体适配器" tabindex="-1"><a class="header-anchor" href="#_3-应用实体适配器" aria-hidden="true">#</a> 3. 应用实体适配器</h5><p><code>src/store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const { actions, reducer: TodoReducer } = createSlice({\n  // 将实体适配器的初始值作为状态切片的初始状态\n  initialState: todosAdapter.getInitialState(),\n  reducers: {\n    addTodo: {\n      reducer(state, action) {\n        // 向实体适配器中添加一条状态\n        todosAdapter.addOne(state, action);\n      }\n    },\n  },\n  extraReducers: {\n    [loadTodos.fulfilled](state, action) {\n      // 向实体适配器中添加多条状态\n      todosAdapter.addMany(state, action);\n    },\n  },\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>src/components/TodoMain.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function TodoMain() {\n  const todos = useSelector((state) =&gt; state[TODO_FEATURE_KEY].entities);\n  return (\n    &lt;ul className=&quot;todo-list&quot;&gt;\n      {Object.values(todos).map((item) =&gt; ())}\n    &lt;/ul&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在实体操作方法的部它会判断如果方法接受到的第二个参数为 <code>action</code>，它会直接找到 action 对象中的 <code>payload</code>属性值，使用它和 <code>state</code> 对象进行交互，所以调用实体操作方法的代码可以简化为以下形式：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>createSlice({\n  reducers: {\n    addTodo: {\n      reducer: todosAdaptor.addOne,\n    },\n  },\n  extraReducers: {\n    [loadTodos.fulfilled]: todosAdaptor.addMany\n  },\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_2-12-状态选择器" tabindex="-1"><a class="header-anchor" href="#_2-12-状态选择器" aria-hidden="true">#</a> 2.12 状态选择器</h4><p>状态选择器用于从 store 对象中获取状态并将状态的格式转换为开发者想要的。</p><p><code>src/store/todos.slice.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { createSelector } from &quot;@reduxjs/toolkit&quot;;\n\nconst { selectAll } = todosAdaptor.getSelectors();\n\nexport const selectTodos = createSelector(\n  (state) =&gt; state[TODO_FEATURE_KEY],\n  selectAll\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>src/components/TodosMain.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { loadTodos, selectTodos } from &quot;../store/todos.slice&quot;;\n\nconst todos = useSelector(selectTodos);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-13-rtk-query" tabindex="-1"><a class="header-anchor" href="#_2-13-rtk-query" aria-hidden="true">#</a> 2.13 RTK Query</h4><h5 id="_1-概述-1" tabindex="-1"><a class="header-anchor" href="#_1-概述-1" aria-hidden="true">#</a> 1. 概述</h5><p>RTK Query 是一个强大的状态获取和缓存工具，它可以简化 Redux 应用程序中的状态获取与缓存逻辑。</p><p>当从服务器端同步状态时，RTK Query 会将状态作为&quot;缓存&quot;存储在 Redux 存储中。</p><p>当对相同的状态执行额外的请求时，RTK Query 将提供现有的缓存数据，而不是向服务器端再次发送请求。</p><h5 id="_2-createapi" tabindex="-1"><a class="header-anchor" href="#_2-createapi" aria-hidden="true">#</a> 2. createApi</h5><p>通过 createApi 方法可以创建 API 状态切片，它用于定义请求、返回用于在组件中使用的同步状态的钩子函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/state/services/api.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit/query/react&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> apiService <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 设置状态存储在 store 中的名字</span>\n  <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&quot;api&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// baseQuery 选项用于设置请求的公共配置</span>\n  <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 请求基准 URL</span>\n    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;http://jsonplaceholder.typicode.com/&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="_3-配置-store" tabindex="-1"><a class="header-anchor" href="#_3-配置-store" aria-hidden="true">#</a> 3. 配置 store</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/state/store.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> apiService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./services&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>apiService<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span><span class="token operator">:</span> apiService<span class="token punctuation">.</span>reducer<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter">getDefaultMiddles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">getDefaultMiddles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>apiService<span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_4-定义获取状态的逻辑" tabindex="-1"><a class="header-anchor" href="#_4-定义获取状态的逻辑" aria-hidden="true">#</a> 4. 定义获取状态的逻辑</h5><p>正常来说，请求的定义要写在 endpoints 选项中，但是为了进行代码拆分，我们要根据不同类型的状态将其对应的请求定义拆分到不同的文件中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/state/services/todo.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> apiService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> todoService <span class="token operator">=</span> apiService<span class="token punctuation">.</span><span class="token function">injectEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 获取任务列表</span>\n    <span class="token literal-property property">getTodos</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 定义请求信息</span>\n      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/todos&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// 对响应数据进行转换</span>\n    <span class="token function-variable function">transformResponse</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 服务器端响应数据</span>\n      <span class="token comment">// console.log(response);</span>\n\n      <span class="token comment">// 对象类型, 内包含请求对象 request, 响应对象 response</span>\n      <span class="token comment">// console.log(meta);</span>\n\n      <span class="token comment">// 请求参数对象, 即 params</span>\n      <span class="token comment">// console.log(arg);</span>\n\n      <span class="token comment">// 该函数中返回什么, 客户端就缓存什么</span>\n      <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetTodosQuery <span class="token punctuation">}</span> <span class="token operator">=</span> todoService<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h5 id="_5-在组件中同步状态" tabindex="-1"><a class="header-anchor" href="#_5-在组件中同步状态" aria-hidden="true">#</a> 5. 在组件中同步状态</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/components/pages/Todo/index.js\nimport { useGetTodosQuery } from &quot;@state&quot;;\n\nexport default function Todo() {\n  // isLoading: 只有初次加载状态时为true, 后续的每次重新加载都为false\n  // error: 请求出错时包含错误信息的对象\n  // data: 服务器端返回的状态\n  // 优化: 当组件中的其他不相关状态的变化引起组件重新渲染时, 并不会同步状态\n  const { data, error, isLoading } = useGetTodosQuery({ _limit: 5, _page: page });\n  // 初始加载过程中显示的等待状态\n  if (isLoading) return &lt;div&gt;loading....&lt;/div&gt;;\n\t// 请求出现错误后显示的错误信息\n  if (error) return &lt;div&gt;{error.error}&lt;/div&gt;;\n  return &lt;ul&gt; {data &amp;&amp; data.map((item) =&gt; &lt;li key={item.id}&gt;{item.title}&lt;/li&gt;)} &lt;/ul&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="_6-同步状态选项" tabindex="-1"><a class="header-anchor" href="#_6-同步状态选项" aria-hidden="true">#</a> 6. 同步状态选项</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// isFetching: 初次加载状态时为false, 后续的每次重新加载都为true</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> isFetching <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetTodosQuery</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">_limit</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">_page</span><span class="token operator">:</span> page <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 间隔 3s 重新发送请求同步状态</span>\n    <span class="token literal-property property">pollingInterval</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>\n    <span class="token comment">// 当参数发生变化或者发生组件挂载行为时重新同步状态</span>\n    <span class="token literal-property property">refetchOnMountOrArgChange</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 当浏览器窗口重新获取焦点时同步状态</span>\n    <span class="token literal-property property">refetchOnFocus</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 当网络重新链接时同步状态</span>\n    <span class="token literal-property property">refetchOnReconnect</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 阻止默认同步状态的行为或者根据条件忽略某次同步状态的行为</span>\n    <span class="token comment">// 如果值为 true, 将忽略同步状态的行为</span>\n    <span class="token comment">// 比如组件初次挂载时同步状态的行为, 再比如当页面为3时忽略同步状态的行为</span>\n    <span class="token literal-property property">skip</span><span class="token operator">:</span> page <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>注意：<code>refetchOnFocus</code> 和 <code>refetchOnReconnect</code> 默认是不生效的，需要做以下配置才可以。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/store.js\nimport { setupListeners } from &quot;@reduxjs/toolkit/dist/query&quot;;\nsetupListeners(store.dispatch);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_7-定义状态突变逻辑" tabindex="-1"><a class="header-anchor" href="#_7-定义状态突变逻辑" aria-hidden="true">#</a> 7. 定义状态突变逻辑</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/services/todo.js\nimport { apiService } from &quot;.&quot;;\n\nexport const todoService = apiService.injectEndpoints({\n  endpoints: (builder) =&gt; ({\n    // 删除任务\n    removeTodoById: builder.mutation({\n      query: (id) =&gt; ({\n        url: `/todos/${id}`,\n        method: &quot;delete&quot;,\n      })\n    })\n  }),\n});\n\nexport const { useRemoveTodoByIdMutation } = todoService;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="_8-组件执行状态突变" tabindex="-1"><a class="header-anchor" href="#_8-组件执行状态突变" aria-hidden="true">#</a> 8. 组件执行状态突变</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/components/pages/Todo/index.js\nimport { useRemoveToByIdMutation } from &quot;@state&quot;;\n\nexport default function Todo() {\n  // removeTodoById: 调用该方法执行状态突变\n  // result: 突变过程中的状态跟踪及突变结果\n  const [removeTodoById, result] = useRemoveToByIdMutation();\n  return &lt;button onClick={() =&gt; removeToById(item.id)}&gt;delete&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="_9-状态突变后更新列表" tabindex="-1"><a class="header-anchor" href="#_9-状态突变后更新列表" aria-hidden="true">#</a> 9. 状态突变后更新列表</h5><p>方式一：在删除操作成功以后重新同步列表状态。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/components/pages/Todo/index.js\nexport default function Todo() {\n  // refetch: 调用该方法, 表示重新同步状态\n  // 优化: 当组件中的其他不相关状态的变化引起组件重新渲染时, 并不会同步状态\n  const { refetch } = useGetTodosQuery();\n  const [removeToById, result] = useRemoveToByIdMutation();\n\t// 监听突变操作是否成功\n  useEffect(() =&gt; {\n    // 重新同步状态\n    refetch();\n  }, [result.isSuccess, refetch]);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>方式二：使列表状态无效，RTK Query 会自动重新同步状态。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/state/services/todo.js\nexport const todoService = apiService.injectEndpoints({\n  endpoints: (builder) =&gt; ({\n    // 获取任务列表\n    getTodos: builder.query({\n      // 为缓存数据附加标签, 通过标签可以定位到数据从而对数据进行操作\n      providesTags: [&quot;todos&quot;],\n    }),\n    // 删除任务\n    removeToById: builder.mutation({\n      invalidatesTags: [&quot;todos&quot;],\n    }),\n  }),\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="_10-数据预取" tabindex="-1"><a class="header-anchor" href="#_10-数据预取" aria-hidden="true">#</a> 10. 数据预取</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/state/services/todo.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">usePrefetch</span><span class="token operator">:</span> useTodosPrefetch <span class="token punctuation">}</span> <span class="token operator">=</span> todoService<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useTodosPrefetch } from &quot;@state&quot;;\n\nexport default function Todo() {\n  const prefetchTodos = useTodosPrefetch(&quot;getTodos&quot;);\n\n  const prefetchNext = useCallback(() =&gt; {\n    prefetchTodos({ _page: page + 1, _limit: 5 });\n  }, [prefetchTodos, page]);\n  return &lt;button onMouseEnter={prefetchNext} onClick={() =&gt; setPage((page) =&gt; page + 1)}&gt;{page}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-mobx" tabindex="-1"><a class="header-anchor" href="#_3-mobx" aria-hidden="true">#</a> 3. MobX</h3><h4 id="_4-3-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-3-1-概述" aria-hidden="true">#</a> 4.3.1. 概述</h4><p>MobX 是一个简单的可扩展的状态管理库，无样板代码风格简约。</p><p>目前最新版本为 6，版本 4 和版本 5 已不再支持。</p><p>在 MobX 6 中不推荐使用装饰器语法，因为它不是 ES 标准，并且标准化过程要花费很长时间，但是通过配置仍然可以启用装饰器语法。</p><p>MobX 可以运行在任何支持 ES5 的环境中，包含浏览器和 Node。</p>',117),T={href:"https://mobx.js.org/README.html",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("MobX"),A=(0,e.Uk)(" 通常和 React 配合使用，但是在 "),E={href:"https://github.com/mobxjs/mobx-angular",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("Angular"),j=(0,e.Uk)(" 和 "),M={href:"https://github.com/mobxjs/mobx-vue",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("Vue"),D=(0,e.Uk)(" 中也可以使用 MobX。"),P=(0,e.uE)('<h4 id="_4-3-2-核心概念" tabindex="-1"><a class="header-anchor" href="#_4-3-2-核心概念" aria-hidden="true">#</a> 4.3.2 核心概念</h4><ol><li>observable：被 MobX 跟踪的状态。</li><li>action：允许修改状态的方法，在严格模式下只有 action 方法被允许修改状态。</li><li>computed：根据现有状态衍生出来的状态。</li><li>flow：执行副作用，它是 generator 函数。可以更改状态值。</li></ol><h4 id="_4-3-3-工作流程" tabindex="-1"><a class="header-anchor" href="#_4-3-3-工作流程" aria-hidden="true">#</a> 4.3.3 工作流程</h4><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/54.png"><h4 id="_3-4-下载" tabindex="-1"><a class="header-anchor" href="#_3-4-下载" aria-hidden="true">#</a> 3.4 下载</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">yarn</span> <span class="token function">add</span> mobx@6.3.1 mobx-react-lite@3.2.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>mobx：MobX 核心库</li><li>mobx-react-lite：仅支持函数组件</li><li>mobx-react：既支持函数组件也支持类组件</li></ul><h4 id="_3-5-案例驱动之计数器" tabindex="-1"><a class="header-anchor" href="#_3-5-案例驱动之计数器" aria-hidden="true">#</a> 3.5 案例驱动之计数器</h4><p>在组件中显示数值状态，单击[+1]按钮使数值加一，单击[-1]按钮使数值减一。</p><ol><li><p>创建用于存储状态的 Store</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export default class CounterStore {\n  constructor() {\n    this.count = 0\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>创建用于修改状态的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export default class CounterStore {\n  constructor() {\n    this.count = 0\n  }\n  increment() {\n    this.count += 1\n  }\n  decrement() {\n    this.count -= 1\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>让 MobX 可以追踪状态的变化</p><ol><li>通过 observable 标识状态，使状态可观察</li><li>通过 action 标识修改状态的方法，状态只有通过 action 方法修改后才会通知视图更新</li></ol><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { action, makeObservable, observable } from &quot;mobx&quot;\n\nexport default class CounterStore {\n  constructor() {\n    this.count = 0\n    makeObservable(this, {\n      count: observable,\n      increment: action,\n      decrement: action\n    })\n  }\n  increment() {\n    this.count += 1\n  }\n  decrement() {\n    this.count -= 1\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>创建 Store 类的实例对象并将实例对象传递给组件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// App.js\nimport Counter from &quot;./Counter&quot;\nimport CounterStore from &quot;../store/Counter&quot;\n\nconst counterStore = new CounterStore()\n\nfunction App() {\n  return &lt;Counter counterStore={counterStore} /&gt;\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>在组件中通过 Store 实例对象获取状态以及操作状态的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Counter({ counterStore }) {\n  return (\n    &lt;Container&gt;\n      &lt;Button onClick={() =&gt; counterStore.increment()}&gt;\n        INCREMENT\n      &lt;/Button&gt;\n      &lt;Button&gt;{counterStore.count}&lt;/Button&gt;\n      &lt;Button onClick={() =&gt; counterStore.decrement()}&gt;\n        DECREMENT\n      &lt;/Button&gt;\n    &lt;/Container&gt;\n  )\n}\n\nexport default Counter\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>当组件中使用到的 MobX 管理的状态发生变化后，使视图更新。通过 observer 方法包裹组件实现目的</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\n\nfunction Counter() { }\n\nexport default observer(Counter)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>简化组件代码</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Counter({ counterStore }) {\n  const { count, increment, decrement } = counterStore\n  return (\n    &lt;Container&gt;\n      &lt;Button border=&quot;left&quot; onClick={increment}&gt;\n        INCREMENT\n      &lt;/Button&gt;\n      &lt;Button&gt;{count}&lt;/Button&gt;\n      &lt;Button border=&quot;right&quot; onClick={decrement}&gt;\n        DECREMENT\n      &lt;/Button&gt;\n    &lt;/Container&gt;\n  )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>当代码简化后，修改状态的方法中的 this 指向出现了问题，通过 action.bound 强制绑定 this，使 this 指向 Store 实例对象</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { action, makeObservable, observable } from &quot;mobx&quot;\n\nexport default class CounterStore {\n  constructor() {\n    this.count = 0\n    makeObservable(this, {\n      count: observable,\n      increment: action.bound,\n      decrement: action.bound\n    })\n  }\n  increment() {\n    this.count += 1\n  }\n  decrement() {\n    this.count -= 1\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>总结：状态变化更新视图的必要条件</p><ol><li>状态必须被标记为 <code>observable</code></li><li>更改状态的方法必须被标记为 <code>action</code></li><li>组件必须通过 <code>observer</code> 方法包裹</li></ol></li><li><p>创建 RootStore</p><p>在应用中可存在多个 Store，多个 Store 最终要通过 RootStore 管理，在每个组件都需要获取到 RootStore。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// store/index.js\nimport { createContext, useContext } from &quot;react&quot;\nimport CounterStore from &quot;./Counter&quot;\n\nclass RootStore {\n  constructor() {\n    this.counterStore = new CounterStore()\n  }\n}\nconst rootStore = new RootStore()\nconst RootStoreContext = createContext()\n\nexport const RootStoreProvider = ({ children }) =&gt; {\n  return (\n    &lt;RootStoreContext.Provider value={rootStore}&gt;\n      {children}\n    &lt;/RootStoreContext.Provider&gt;\n  )\n}\n\nexport const useRootStore = () =&gt; {\n  return useContext(RootStoreContext)\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// App.js\nimport { RootStoreProvider } from &quot;../store&quot;\nimport Counter from &quot;./Counter&quot;\n\nfunction App() {\n  return (\n    &lt;RootStoreProvider&gt;\n      &lt;Counter /&gt;\n    &lt;/RootStoreProvider&gt;\n  )\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport { useRootStore } from &quot;../store&quot;\n\nfunction Counter() {\n  const { counterStore } = useRootStore()\n  const { count, increment, decrement } = counterStore\n  return (\n    &lt;Container&gt;\n      &lt;Button onClick={increment}&gt;\n        INCREMENT\n      &lt;/Button&gt;\n      &lt;Button&gt;{count}&lt;/Button&gt;\n      &lt;Button onClick={decrement}&gt;\n        DECREMENT\n      &lt;/Button&gt;\n    &lt;/Container&gt;\n  )\n}\n\nexport default observer(Counter)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li></ol><h4 id="_3-6-案例驱动之-todo" tabindex="-1"><a class="header-anchor" href="#_3-6-案例驱动之-todo" aria-hidden="true">#</a> 3.6 案例驱动之 Todo</h4><h5 id="_1-创建-store" tabindex="-1"><a class="header-anchor" href="#_1-创建-store" aria-hidden="true">#</a> 1. 创建 Store</h5><ol><li><p>创建用于管理 Todo 任务的 Store</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { makeObservable, observable } from &quot;mobx&quot;\n\nexport default class Todo {\n  constructor(todo) {\n    this.id = todo.id\n    this.title = todo.title\n    this.isCompleted = todo.isCompleted || false\n    this.isEditing = false\n    makeObservable(this, {\n      title: observable,\n      isCompleted: observable,\n      isEditing: observable\n    })\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>创建用于管理 Todo 任务列表的 Store</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { makeObservable, observable } from &quot;mobx&quot;\n\nexport default class TodoStore {\n  constructor() {\n    this.todos = []\n    makeObservable(this, {\n      todos: observable\n    })\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ol><h5 id="_2-添加任务" tabindex="-1"><a class="header-anchor" href="#_2-添加任务" aria-hidden="true">#</a> 2. 添加任务</h5><ol><li><p>创建向 todo 任务列表中添加 todo 任务的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { action, makeObservable, observable } from &quot;mobx&quot;\nimport Todo from &quot;./Todo&quot;\n\nexport default class TodoStore {\n  constructor() {\n    this.todos = []\n    makeObservable(this, {\n      todos: observable,\n      addTodo: action.bound\n    })\n  }\n  addTodo(title) {\n    this.todos.push(new Todo({ title, id: this.generateTodoId() }))\n  }\n  generateTodoId() {\n    if (!this.todos.length) return 1\n    return this.todos.reduce((id, todo) =&gt; (id &lt; todo.id ? todo.id : id), 0) + 1\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>在组件中实现添加任务的逻辑</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;\nimport { useRootStore } from &quot;../../store&quot;\n\nfunction Header() {\n  const [title, setTitle] = useState(&quot;&quot;)\n  const { todoStore } = useRootStore()\n  const { addTodo } = todoStore\n  return (\n    &lt;header className=&quot;header&quot;&gt;\n      &lt;input\n        value={title}\n        onChange={e =&gt; setTitle(e.target.value)}\n        onKeyUp={e =&gt; {\n          if (e.key !== &quot;Enter&quot;) return\n          addTodo(title)\n          setTitle(&quot;&quot;)\n        }}\n      /&gt;\n    &lt;/header&gt;\n  )\n}\n\nexport default Header\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ol><h5 id="_3-显示任务列表" tabindex="-1"><a class="header-anchor" href="#_3-显示任务列表" aria-hidden="true">#</a> 3. 显示任务列表</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport { useRootStore } from &quot;../../store&quot;\nimport Todo from &quot;./Todo&quot;\n\nfunction Main() {\n  const { todoStore } = useRootStore()\n  const { todos } = todoStore\n  return (\n    &lt;section className=&quot;main&quot;&gt;\n      &lt;ul className=&quot;todo-list&quot;&gt;\n        {todos.map(todo =&gt; (\n          &lt;Todo key={todo.id} todo={todo} /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/section&gt;\n  )\n}\n\nexport default observer(Main)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Todo({ todo }) {\n  return (\n    &lt;li&gt;\n      &lt;div className=&quot;view&quot;&gt;\n        &lt;input className=&quot;toggle&quot; type=&quot;checkbox&quot; /&gt;\n        &lt;label&gt;{todo.title}&lt;/label&gt;\n        &lt;button className=&quot;destroy&quot; /&gt;\n      &lt;/div&gt;\n      &lt;input className=&quot;edit&quot; /&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default Todo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="_4-加载远端任务" tabindex="-1"><a class="header-anchor" href="#_4-加载远端任务" aria-hidden="true">#</a> 4 加载远端任务</h5><ol><li><p>下载 json-server：<code>yarn add json-server@0.16.3</code></p></li><li><p>创建 db.json</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;todos&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isCompleted&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isCompleted&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isCompleted&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>在 package.json 文件中添加启动命令</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;json-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json-server --watch ./db.json --port 3001&quot;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>启动 json-server：<code>npm run json-server</code></p></li><li><p>在 todoStore 中添加加载任务列表的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { flow, makeObservable, observable } from &quot;mobx&quot;\nimport Todo from &quot;./Todo&quot;\n\nexport default class TodoStore {\n  constructor() {\n    this.todos = []\n    makeObservable(this, {\n      todos: observable,\n      loadTodos: flow\n    })\n    this.loadTodos()\n  }\n  *loadTodos() {\n    let response = yield axios.get(&quot;http://localhost:3001/todos&quot;)\n    response.data.forEach(todo =&gt; this.todos.push(new Todo(todo)))\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ol><h5 id="_5-更改任务状态" tabindex="-1"><a class="header-anchor" href="#_5-更改任务状态" aria-hidden="true">#</a> 5. 更改任务状态</h5><ol><li><p>在 Todo 类中添加修改任务是否已经完成的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export default class Todo {\n  constructor() {\n    makeObservable(this, {\n      modifyTodoIsCompleted: action.bound\n    })\n  }\n  modifyTodoIsCompleted() {\n    this.isCompleted = !this.isCompleted\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>创建 <code>TodoCompleted</code> 组件实现逻辑</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\n\nfunction TodoCompleted({ todo }) {\n  const { isCompleted, modifyTodoIsCompleted } = todo\n  return (\n    &lt;input\n      className=&quot;toggle&quot;\n      type=&quot;checkbox&quot;\n      checked={isCompleted}\n      onChange={modifyTodoIsCompleted}\n    /&gt;\n  )\n}\n\nexport default observer(TodoCompleted)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>在 <code>Todo</code> 组件中引用<code>TodoCompleted</code> 组件并根据条件决定是否为 <code>li</code> 添加 <code>completed</code> 类名</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport TodoCompleted from &quot;./TodoCompleted&quot;\n\nfunction Todo({ todo }) {\n  return (\n    &lt;li className={todo.isCompleted ? &quot;completed&quot; : &quot;&quot;}&gt;\n      &lt;div className=&quot;view&quot;&gt;\n        &lt;TodoCompleted todo={todo} /&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default observer(Todo)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ol><h5 id="_6-删除任务" tabindex="-1"><a class="header-anchor" href="#_6-删除任务" aria-hidden="true">#</a> 6. 删除任务</h5><ol><li><p>在 <code>todoStore</code> 中添加实现删除任务的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { action, makeObservable,  } from &quot;mobx&quot;\n\nexport default class TodoStore {\n  constructor() {\n    makeObservable(this, {\n      removeTodo: action.bound\n    })\n  }\n  removeTodo(id) {\n    this.todos = this.todos.filter(todo =&gt; todo.id !== id)\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>创建 <code>TodoDelete</code> 组件实现删除 todo 任务逻辑</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRootStore } from &quot;../../store&quot;\n\nfunction TodoDelete({ id }) {\n  const { todoStore } = useRootStore()\n  const { removeTodo } = todoStore\n  return &lt;button className=&quot;destroy&quot; onClick={removeTodo.bind(null, id)} /&gt;\n}\n\nexport default TodoDelete\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>在 <code>Todo</code> 组件调用 <code>TodoDelete</code> 组件并传入 todo ID</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport TodoDelete from &quot;./TodoDelete&quot;\n\nfunction Todo({ todo }) {\n  return (\n    &lt;li&gt;\n      &lt;div className=&quot;view&quot;&gt;\n        &lt;TodoDelete id={todo.id} /&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default observer(Todo)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ol><h5 id="_7-编辑任务" tabindex="-1"><a class="header-anchor" href="#_7-编辑任务" aria-hidden="true">#</a> 7. 编辑任务</h5><ol><li><p>在 todoStore 中添加更改任务是否处于编辑状态的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { action, makeObservable } from &quot;mobx&quot;\n\nexport default class Todo {\n  constructor(todo) {\n    makeObservable(this, {\n      modifyTodoIsEditing: action.bound,\n    })\n  }\n  modifyTodoIsEditing() {\n    this.isEditing = !this.isEditing\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>添加 <code>TodoTitle</code> 组件展示任务标题并为其添加双击事件，当事件发生时将任务更改为可编辑状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function TodoTitle({ todo }) {\n  const { title, modifyTodoIsEditing } = todo\n  return &lt;label onDoubleClick={modifyTodoIsEditing}&gt;{title}&lt;/label&gt;\n}\n\nexport default TodoTitle\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>在 <code>Todo</code> 组件中调用 <code>TodoTitle</code> 组件，并为 <code>li</code> 添加 <code>editing</code> 类名</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport TodoTitle from &quot;./TodoTitle&quot;\nimport classnames from &quot;classnames&quot;\n\nfunction Todo({ todo }) {\n  return (\n    &lt;li className={classnames({ completed: todo.isCompleted, editing: todo.isEditing })} &gt;\n      &lt;div className=&quot;view&quot;&gt;\n        &lt;TodoTitle todo={todo} /&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default observer(Todo)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>创建 <code>TodoEditing</code> 组件实现编辑 todo 任务标题</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRef, useEffect } from &quot;react&quot;\n\nfunction TodoEditing({ todo }) {\n  const { title, modifyTodoTitle, isEditing } = todo\n  const ref = useRef(null)\n  useEffect(() =&gt; {\n    if (isEditing) ref.current.focus()\n  }, [isEditing])\n  return (\n    &lt;input\n      ref={ref}\n      className=&quot;edit&quot;\n      defaultValue={title}\n      onBlur={e =&gt; modifyTodoTitle(e.target.value)}\n    /&gt;\n  )\n}\n\nexport default TodoEditing\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>在 <code>Todo</code> 组件中调用 <code>TodoEditing</code> 组件并传递 todo 任务</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport TodoTitle from &quot;./TodoTitle&quot;\nimport classnames from &quot;classnames&quot;\nimport TodoEditing from &quot;./TodoEditing&quot;\n\nfunction Todo({ todo }) {\n  return (\n    &lt;li className={classnames({ completed: todo.isCompleted, editing: todo.isEditing })} &gt;\n      &lt;div className=&quot;view&quot;&gt;\n        &lt;TodoTitle todo={todo} /&gt;\n      &lt;/div&gt;\n      &lt;TodoEditing todo={todo} /&gt;\n    &lt;/li&gt;\n  )\n}\n\nexport default observer(Todo)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ol><h5 id="_8-计算未完成任务数量" tabindex="-1"><a class="header-anchor" href="#_8-计算未完成任务数量" aria-hidden="true">#</a> 8. 计算未完成任务数量</h5><ol><li><p>在 todoStore 中添加获取未完成任务数量的派生状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { makeObservable, computed } from &quot;mobx&quot;\n\nexport default class TodoStore {\n  constructor() {\n    makeObservable(this, {\n      unCompletedTodoCount: computed\n    })\n  }\n  get unCompletedTodoCount() {\n    return this.todos.filter(todo =&gt; !todo.isCompleted).length\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>创建 <code>UnCompletedTodoCount</code> 组件实现逻辑</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport { useRootStore } from &quot;../../store&quot;\n\nfunction UnCompletedTodoCount() {\n  const { todoStore } = useRootStore()\n  const { unCompletedTodoCount } = todoStore\n  return (\n    &lt;span className=&quot;todo-count&quot;&gt;\n      &lt;strong&gt;{unCompletedTodoCount}&lt;/strong&gt; item left\n    &lt;/span&gt;\n  )\n}\n\nexport default observer(UnCompletedTodoCount)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>在 <code>Footer</code> 组件中调用 <code>UnCompletedTodoCount</code> 组件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import UnCompletedTodoCount from &quot;./UnCompletedTodoCount&quot;\n\nfunction Footer() {\n  return (\n    &lt;footer className=&quot;footer&quot;&gt;\n      &lt;UnCompletedTodoCount /&gt;\n    &lt;/footer&gt;\n  )\n}\n\nexport default Footer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h5 id="_9-任务过滤" tabindex="-1"><a class="header-anchor" href="#_9-任务过滤" aria-hidden="true">#</a> 9. 任务过滤</h5><ol><li><p>在 <code>todoStore</code> 中添加存储过滤条件的属性以及更改过滤条件的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { action, makeObservable, observable, } from &quot;mobx&quot;\n\nexport default class TodoStore {\n  constructor() {\n    this.filterCondition = &quot;All&quot;\n    makeObservable(this, {\n      modifyFilterCondition: action.bound,\n      filterCondition: observable,\n    })\n  }\n  modifyFilterCondition(filterCondition) {\n    this.filterCondition = filterCondition\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>创建 <code>TodoFilter</code> 组件，为过滤按钮添加事件以更改过滤条件，根据过滤条件为按钮添加 <code>selected</code> 类名</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import classNames from &quot;classnames&quot;\nimport { observer } from &quot;mobx-react-lite&quot;\nimport { useRootStore } from &quot;../../store&quot;\n\nfunction TodoFilter() {\n  const { todoStore } = useRootStore()\n  const { filterCondition, modifyFilterCondition } = todoStore\n  return (\n    &lt;ul className=&quot;filters&quot;&gt;\n      &lt;li&gt;\n        &lt;button\n          onClick={() =&gt; modifyFilterCondition(&quot;All&quot;)}\n          className={classNames({ selected: filterCondition === &quot;All&quot; })}\n        &gt;\n          All\n        &lt;/button&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n        &lt;button\n          onClick={() =&gt; modifyFilterCondition(&quot;Active&quot;)}\n          className={classNames({ selected: filterCondition === &quot;Active&quot; })}\n        &gt;\n          Active\n        &lt;/button&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n        &lt;button\n          onClick={() =&gt; modifyFilterCondition(&quot;Completed&quot;)}\n          className={classNames({ selected: filterCondition === &quot;Completed&quot; })}\n        &gt;\n          Completed\n        &lt;/button&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  )\n}\n\nexport default observer(TodoFilter)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div></li><li><p>在 <code>Footer</code> 组件中调用 <code>TodoFilter</code> 组件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import TodoFilter from &quot;./TodoFilter&quot;\n\nfunction Footer() {\n  return (\n    &lt;footer className=&quot;footer&quot;&gt;\n      &lt;TodoFilter /&gt;\n    &lt;/footer&gt;\n  )\n}\n\nexport default Footer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>在 <code>TodoStore</code> 中添加派生状态，根据条件获取过滤后的 todo 列表</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { action, flow, makeObservable, observable, computed } from &quot;mobx&quot;\nimport Todo from &quot;./Todo&quot;\n\nexport default class TodoStore {\n  constructor() {\n    makeObservable(this, {\n      filterTodos: computed\n    })\n  }\n  get filterTodos() {\n    switch (this.filterCondition) {\n      case &quot;Active&quot;:\n        return this.todos.filter(todo =&gt; !todo.isCompleted)\n      case &quot;Completed&quot;:\n        return this.todos.filter(todo =&gt; todo.isCompleted)\n      default:\n        return this.todos\n    }\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>在 Main 组件获取 <code>filterTodos</code> 派生状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { observer } from &quot;mobx-react-lite&quot;\nimport { useRootStore } from &quot;../../store&quot;\nimport Todo from &quot;./Todo&quot;\n\nfunction Main() {\n  const { todoStore } = useRootStore()\n  const { filterTodos } = todoStore\n  return (\n    &lt;section className=&quot;main&quot;&gt;\n      &lt;ul className=&quot;todo-list&quot;&gt;\n        {filterTodos.map(todo =&gt; (\n          &lt;Todo key={todo.id} todo={todo} /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/section&gt;\n  )\n}\n\nexport default observer(Main)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li></ol><h5 id="_10-清除已完成任务" tabindex="-1"><a class="header-anchor" href="#_10-清除已完成任务" aria-hidden="true">#</a> 10. 清除已完成任务</h5><ol><li><p>在 <code>TodoStore</code> 中添加清除已完成任务的方法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { action, makeObservable, } from &quot;mobx&quot;\n\nexport default class TodoStore {\n  constructor() {\n    makeObservable(this, {\n      clearCompleted: action.bound\n    })\n  }\n  clearCompleted() {\n    this.todos = this.todos.filter(todo =&gt; !todo.isCompleted)\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>创建 <code>ClearCompleted</code> 组件实现清除已完成任务功能</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRootStore } from &quot;../../store&quot;\n\nfunction ClearCompleted() {\n  const { todoStore } = useRootStore()\n  const { clearCompleted } = todoStore\n  return (\n    &lt;button className=&quot;clear-completed&quot; onClick={clearCompleted}&gt;\n      Clear completed\n    &lt;/button&gt;\n  )\n}\n\nexport default ClearCompleted\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>在 <code>Footer</code> 组件中调用 <code>ClearCompleted</code> 组件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ClearCompleted from &quot;./ClearCompleted&quot;\n\nfunction Footer() {\n  return (\n    &lt;footer className=&quot;footer&quot;&gt;\n      &lt;ClearCompleted /&gt;\n    &lt;/footer&gt;\n  )\n}\n\nexport default Footer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h3 id="_4-recoil" tabindex="-1"><a class="header-anchor" href="#_4-recoil" aria-hidden="true">#</a> 4. Recoil</h3><h4 id="_4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a> 4.1 概述</h4><p>Recoil 是 Facebook 提供的在 React 中实现全局状态管理的扩展库，目前仍然在实验阶段。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> recoil\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_4-2-recoilroot" tabindex="-1"><a class="header-anchor" href="#_4-2-recoilroot" aria-hidden="true">#</a> 4.2 RecoilRoot</h4><p>RecoilRoot 用于为组件提供获取状态的上下文对象。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ReactDOM from &quot;react-dom&quot;;\nimport App from &quot;./App&quot;;\nimport { RecoilRoot } from &quot;recoil&quot;;\n\nReactDOM.render(\n  &lt;RecoilRoot&gt;\n    &lt;App /&gt;\n  &lt;/RecoilRoot&gt;,\n  document.getElementById(&quot;root&quot;)\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_4-3-atom" tabindex="-1"><a class="header-anchor" href="#_4-3-atom" aria-hidden="true">#</a> 4.3 atom</h4><p>atom 方法用于创建全局状态。</p><h5 id="_1-未使用全局状态" tabindex="-1"><a class="header-anchor" href="#_1-未使用全局状态" aria-hidden="true">#</a> 1. 未使用全局状态</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nfunction DarkModeSwitch({ dark, setDark }) {\n  return (\n    &lt;input\n      type=&quot;checkbox&quot;\n      checked={dark}\n      onChange={(event) =&gt; setDark(event.target.checked)}\n    /&gt;\n  );\n}\n\nfunction Paragraph({ dark }) {\n  const styles = {\n    background: dark ? &quot;black&quot; : &quot;white&quot;,\n    color: dark ? &quot;white&quot; : &quot;black&quot;,\n  };\n  return &lt;p style={styles}&gt;Paragraph ...&lt;/p&gt;;\n}\n\nfunction App() {\n  const [dark, setDark] = useState(false);\n  return (\n    &lt;&gt;\n      &lt;DarkModeSwitch dark={dark} setDark={setDark} /&gt;\n      &lt;Paragraph dark={dark} /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h5 id="_2-使用了全局状态" tabindex="-1"><a class="header-anchor" href="#_2-使用了全局状态" aria-hidden="true">#</a> 2. 使用了全局状态</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { atom, useRecoilState, useRecoilValue } from &quot;recoil&quot;;\n\nconst darkModeState = atom({\n  key: &quot;darkModeState&quot;,\n  default: false,\n});\n\nfunction DarkModeSwitch() {\n  const [dark, setDark] = useRecoilState(darkModeState);\n  return (\n    &lt;input\n      type=&quot;checkbox&quot;\n      checked={dark}\n      onChange={(event) =&gt; setDark(event.target.checked)}\n    /&gt;\n  );\n}\n\nfunction Paragraph() {\n  const dark = useRecoilValue(darkModeState);\n  const styles = {\n    background: dark ? &quot;black&quot; : &quot;white&quot;,\n    color: dark ? &quot;white&quot; : &quot;black&quot;,\n  };\n  return &lt;p style={styles}&gt;Paragraph ...&lt;/p&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;DarkModeSwitch /&gt;\n      &lt;Paragraph /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h5 id="_3-代码拆分" tabindex="-1"><a class="header-anchor" href="#_3-代码拆分" aria-hidden="true">#</a> 3. 代码拆分</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/atoms/darkMode.js\nimport { atom, useRecoilState, useRecoilValue } from &quot;recoil&quot;;\n\nconst darkModeState = atom({\n  key: &quot;darkModeState&quot;,\n  default: false,\n});\n\nexport function useDarkModeState() {\n  return useRecoilState(darkModeState);\n}\n\nexport function useDarkModeValue() {\n  return useRecoilValue(darkModeState);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useDarkModeState, useDarkModeValue } from &quot;./atoms/darkMode&quot;;\n\nfunction DarkModeSwitch() {\n  const [dark, setDark] = useDarkModeState();\n  return (\n    &lt;input\n      type=&quot;checkbox&quot;\n      checked={dark}\n      onChange={(event) =&gt; setDark(event.target.checked)}\n    /&gt;\n  );\n}\n\nfunction Paragraph() {\n  const dark = useDarkModeValue();\n  const styles = {\n    background: dark ? &quot;black&quot; : &quot;white&quot;,\n    color: dark ? &quot;white&quot; : &quot;black&quot;,\n  };\n  return &lt;p style={styles}&gt;Paragraph ...&lt;/p&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;DarkModeSwitch /&gt;\n      &lt;Paragraph /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h4 id="_4-4-selector" tabindex="-1"><a class="header-anchor" href="#_4-4-selector" aria-hidden="true">#</a> 4.4 selector</h4><p>selector 表示派生状态，基于现有状态计算新的状态。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { atom, selector, useRecoilState, useRecoilValue } from &quot;recoil&quot;;\n// 汇率\nconst exChangeRate = 0.1572;\n// 人民币\nconst CNYState = atom({\n  key: &quot;CNY&quot;,\n  default: 1,\n});\n// 根据汇率将人民币转换为美元\nconst USDSelector = selector({\n  key: &quot;USD&quot;,\n  get: ({ get }) =&gt; {\n    const CNY = get(CNYState);\n    return CNY * exChangeRate;\n  },\n  // 设置新的美元时重新计算人民币\n  set({ set }, newValue) {\n    const newCNY = newValue / exChangeRate;\n    set(CNYState, newCNY);\n  },\n});\n\nfunction App() {\n  const [CNY, setCNY] = useRecoilState(CNYState);\n  const [USD, setUSD] = useRecoilState(USDSelector);\n  return (\n    &lt;&gt;\n      &lt;input\n        type=&quot;text&quot;\n        value={CNY}\n        onChange={(event) =&gt; setCNY(event.target.value)}\n      /&gt;\n      &lt;input\n        type=&quot;text&quot;\n        value={USD}\n        onChange={(event) =&gt; setUSD(event.target.value)}\n      /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h4 id="_4-5-data-fetching" tabindex="-1"><a class="header-anchor" href="#_4-5-data-fetching" aria-hidden="true">#</a> 4.5 data fetching</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;;\nimport { Suspense } from &quot;react&quot;;\nimport { atom, selector, useRecoilState, useRecoilValue } from &quot;recoil&quot;;\n\nconst userIdState = atom({\n  key: &quot;userId&quot;,\n  default: &quot;&quot;,\n});\n\nconst userState = selector({\n  key: &quot;userState&quot;,\n  get: async ({ get }) =&gt; {\n    const userId = get(userIdState);\n    if (userId) {\n      let response = await axios.get(\n        `https://jsonplaceholder.typicode.com/users/${userId}`\n      );\n      return response.data;\n    }\n  },\n});\n\nfunction User() {\n  const user = useRecoilValue(userState);\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{user.name}&lt;/li&gt;\n      &lt;li&gt;{user.email}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n\nfunction App() {\n  const [userId, setUserId] = useRecoilState(userIdState);\n  return (\n    &lt;&gt;\n      &lt;select\n        value={userId}\n        onChange={(event) =&gt; setUserId(event.target.value)}\n      &gt;\n        &lt;option value=&quot;&quot;&gt;请选择用户&lt;/option&gt;\n        &lt;option value=&quot;1&quot;&gt;用户一&lt;/option&gt;\n        &lt;option value=&quot;2&quot;&gt;用户二&lt;/option&gt;\n        &lt;option value=&quot;3&quot;&gt;用户三&lt;/option&gt;\n      &lt;/select&gt;\n      {userId &amp;&amp; (\n        &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;\n          &lt;User /&gt;\n        &lt;/Suspense&gt;\n      )}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h4 id="_4-6-selectorfamily" tabindex="-1"><a class="header-anchor" href="#_4-6-selectorfamily" aria-hidden="true">#</a> 4.6 selectorFamily</h4><p>selectorFamily 允许开发者在调用查询时传递参数。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;;\nimport { Suspense, useState } from &quot;react&quot;;\nimport { selectorFamily, useRecoilValue } from &quot;recoil&quot;;\n\nconst userState = selectorFamily({\n  key: &quot;userState&quot;,\n  get: (userId) =&gt; async () =&gt; {\n    if (userId) {\n      let response = await axios.get(\n        `https://jsonplaceholder.typicode.com/users/${userId}`\n      );\n      return response.data;\n    }\n  },\n});\n\nfunction User({ userId }) {\n  const user = useRecoilValue(userState(userId));\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{user.name}&lt;/li&gt;\n      &lt;li&gt;{user.email}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n\nfunction App() {\n  const [userId, setUserId] = useState(&quot;&quot;);\n  return (\n    &lt;&gt;\n      &lt;select\n        value={userId}\n        onChange={(event) =&gt; setUserId(event.target.value)}\n      &gt;\n        &lt;option value=&quot;&quot;&gt;请选择用户&lt;/option&gt;\n        &lt;option value=&quot;1&quot;&gt;用户一&lt;/option&gt;\n        &lt;option value=&quot;2&quot;&gt;用户二&lt;/option&gt;\n        &lt;option value=&quot;3&quot;&gt;用户三&lt;/option&gt;\n      &lt;/select&gt;\n      {userId &amp;&amp; (\n        &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;\n          &lt;User userId={userId} /&gt;\n        &lt;/Suspense&gt;\n      )}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="_4-7-catch-errors" tabindex="-1"><a class="header-anchor" href="#_4-7-catch-errors" aria-hidden="true">#</a> 4.7 catch errors</h4><p>使用错误边界组件捕获程序执行过程中出现的错误。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i react-error-boundary@3.1.4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;;\nimport { Suspense, useState } from &quot;react&quot;;\nimport { selectorFamily, useRecoilValue } from &quot;recoil&quot;;\nimport { ErrorBoundary } from &quot;react-error-boundary&quot;;\n\nconst userState = selectorFamily({\n  key: &quot;userState&quot;,\n  get: (userId) =&gt; async () =&gt; {\n    if (userId) {\n      let response = await axios.get(\n        `https://jsonplaceholder.typicode.com/users/${userId}`\n      );\n      // 模拟程序出现错误\n      if (userId === &quot;4&quot;) throw new Error(&quot;用户不存在&quot;);\n      return response.data;\n    }\n  },\n});\n\nfunction User({ userId }) {\n  const user = useRecoilValue(userState(userId));\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{user.name}&lt;/li&gt;\n      &lt;li&gt;{user.email}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n\n// resetErrorBoundary: 用于重置错误边界\nfunction ErrorFallback({ error, resetErrorBoundary }) {\n  return (\n    &lt;&gt;\n      &lt;p&gt;发生了错误:&lt;/p&gt;\n      &lt;pre&gt;{error.message}&lt;/pre&gt;\n      &lt;button onClick={resetErrorBoundary}&gt;重试&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction App() {\n  const [userId, setUserId] = useState(&quot;&quot;);\n  return (\n    &lt;&gt;\n      &lt;select\n        value={userId}\n        onChange={(event) =&gt; setUserId(event.target.value)}\n      &gt;\n        &lt;option value=&quot;&quot;&gt;请选择用户&lt;/option&gt;\n        &lt;option value=&quot;1&quot;&gt;用户一&lt;/option&gt;\n        &lt;option value=&quot;2&quot;&gt;用户二&lt;/option&gt;\n        &lt;option value=&quot;3&quot;&gt;用户三&lt;/option&gt;\n        &lt;option value=&quot;4&quot;&gt;用户四&lt;/option&gt;\n      &lt;/select&gt;\n      {/*\n          FallbackComponent: 指定发生错误时显示的用户界面\n          onReset: 错误边界被重置时执行的回调函数\n          resetKeys: 当指定的状态发生更改时重置错误边界\n        */}\n      &lt;ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[userId]}&gt;\n        {userId &amp;&amp; (\n          &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;\n            &lt;User userId={userId} /&gt;\n          &lt;/Suspense&gt;\n        )}\n      &lt;/ErrorBoundary&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><h4 id="_4-8-effects" tabindex="-1"><a class="header-anchor" href="#_4-8-effects" aria-hidden="true">#</a> 4.8 effects</h4><p>effects 用于执行副作用。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\nimport { atom, useRecoilState } from &quot;recoil&quot;;\n\nconst todoListState = atom({\n  key: &quot;todoList&quot;,\n  default: [],\n  effects: [\n    ({ setSelf, onSet }) =&gt; {\n      const storedTodo = localStorage.getItem(&quot;todos&quot;);\n      if (storedTodo) setSelf(JSON.parse(storedTodo));\n      onSet((value) =&gt; {\n        localStorage.setItem(&quot;todos&quot;, JSON.stringify(value));\n      });\n    },\n  ],\n});\n\nfunction App() {\n  const [title, setTitle] = useState(&quot;&quot;);\n  const [todos, setTodos] = useRecoilState(todoListState);\n  const addTodo = (event) =&gt; {\n    if (event.key === &quot;Enter&quot;) {\n      setTodos([...todos, { title }]);\n      setTitle(&quot;&quot;);\n    }\n  };\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=&quot;text&quot;\n        value={title}\n        onChange={(event) =&gt; setTitle(event.target.value)}\n        onKeyUp={addTodo}\n      /&gt;\n      &lt;ul&gt;\n        {todos.map((todo, index) =&gt; (\n          &lt;li key={index}&gt;{todo.title}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div>',63),N={},O=(0,a(3744).Z)(N,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[r,(0,e._)("p",null,[(0,e._)("a",p,[t,(0,e.Wm)(a)]),l]),(0,e._)("p",null,[(0,e._)("a",c,[o,(0,e.Wm)(a)]),u]),i,(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("p",null,[b,(0,e._)("a",m,[d,(0,e.Wm)(a)])])]),g]),k,(0,e._)("p",null,[(0,e._)("a",v,[h,(0,e.Wm)(a)]),q]),f,(0,e._)("p",null,[x,(0,e._)("a",y,[S,(0,e.Wm)(a)]),C]),R,(0,e._)("p",null,[(0,e._)("a",T,[_,(0,e.Wm)(a)]),A,(0,e._)("a",E,[w,(0,e.Wm)(a)]),j,(0,e._)("a",M,[I,(0,e.Wm)(a)]),D]),P],64)}]])}}]);