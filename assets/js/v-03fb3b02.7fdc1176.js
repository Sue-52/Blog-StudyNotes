"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[8673],{4196:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-03fb3b02",path:"/docs/02.Front-endFrameKnowledge/02.React/10.React%20Immutable%20data.html",title:"React Immutable data -- React 不可变数据结构",lang:"en-US",frontmatter:{title:"React Immutable data -- React 不可变数据结构",date:"2022-04-14T21:45:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"不可变数据结构",slug:"不可变数据结构",children:[{level:3,title:"1. 概述",slug:"_1-概述",children:[]},{level:3,title:"2. JS 中的数据不可变",slug:"_2-js-中的数据不可变",children:[]},{level:3,title:"3. JS 中避免数据突变的方式",slug:"_3-js-中避免数据突变的方式",children:[]},{level:3,title:"4. 目前存在的问题",slug:"_4-目前存在的问题",children:[]},{level:3,title:"5. Immer",slug:"_5-immer",children:[]},{level:3,title:"6.  React 与 Immer",slug:"_6-react-与-immer",children:[]},{level:3,title:"7. Immutable",slug:"_7-immutable",children:[]},{level:3,title:"8. React 与 Immutable",slug:"_8-react-与-immutable",children:[]}]}],git:{createdTime:1649943529e3,updatedTime:1649943529e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/10.React Immutable data.md"}},6323:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var p=a(6252);const t=(0,p.uE)('<h2 id="不可变数据结构" tabindex="-1"><a class="header-anchor" href="#不可变数据结构" aria-hidden="true">#</a> 不可变数据结构</h2><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h3><p>不可变数据结构是指在更改变量时不在原有值的基础上进行修改而是创建一个新值重新赋值给变量。</p><p>不可变数据结构使应用程序更加稳定，比如将对象传递给一个函数，不必担心函数执行完成后该对象是否仍然具有相同的值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>\nname <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/55.png" alt="55"></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/56.png" alt="56"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> IDCard <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">createNewIdCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  IDCard<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span>\n<span class="token punctuation">}</span>\n\nIDCard <span class="token comment">// ?</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-js-中的数据不可变" tabindex="-1"><a class="header-anchor" href="#_2-js-中的数据不可变" aria-hidden="true">#</a> 2. JS 中的数据不可变</h3><p>JavaScript 这门编程语言并不具备完全的数据不可变特性。</p><p>在 JavaScript 中，基本数据类型完全遵循了数据的不可变特性，而引用数据类型并没有完全遵循。</p><h4 id="_2-1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-1-基本数据类型" aria-hidden="true">#</a> 2.1 基本数据类型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nameOne <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> nameTwo <span class="token operator">=</span> nameOne<span class="token punctuation">;</span>\nnameOne <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// nameTwo ?</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>由于在 JavaScript 中基本数据类型遵循了数据的不可变特性，更改变量值时并没有在原有值&quot;张三&quot;的基础上进行修改，而是创建了一个新值，然后将新值重新赋值给变量，所以 nameTwo 变量仍然指向&quot;张三&quot;这个值。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/57.png" alt="57"></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/58.png" alt="58"></p><h4 id="_2-2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-引用数据类型" aria-hidden="true">#</a> 2.2 引用数据类型</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\np1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/61.png" alt="61"></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/62.png" alt="62"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\np2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>\np1<span class="token punctuation">.</span>name <span class="token comment">// ?</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/59.png" alt="59"></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/60.png" alt="60"></p><p>在以上代码中，更改 p2 变量时并没有重新为 p2 变量赋值而是对已有值进行了更改，由于变量 p1 和变量 p2 指向了同一个对象，所以对 p2 变量进行的更改也影响到了 p1 变量。</p><p>这种情况在程序世界中被称之为数据突变，这是相对于数据的不可变特性而言的，数据突变带来的结果就是程序的不稳定性，所以在编写 JavaScript 应用程序时要时刻确保不要发生数据突变。</p><h3 id="_3-js-中避免数据突变的方式" tabindex="-1"><a class="header-anchor" href="#_3-js-中避免数据突变的方式" aria-hidden="true">#</a> 3. JS 中避免数据突变的方式</h3><h4 id="_3-1-对象" tabindex="-1"><a class="header-anchor" href="#_3-1-对象" aria-hidden="true">#</a> 3.1 对象</h4><p>如果是简单对象，即不包含对象嵌套对象，在修改对象值时最简单的避免数据突变的方式就是使用扩展运算符将原有对象属性展开到新的对象中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> modifiedPerson <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>person<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果是复杂对象，即包含了对象嵌套对象，在修改对象值时要对原有对象进行深拷贝，在拷贝出来的新对象中进行修改。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;居家&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;goods&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;暖腰暖腹暖胃，蕲艾暖宫腰带&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newData <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\nnewData<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;海鲜&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>复杂对象不能使用扩展运算符的原因是扩展运算符是浅拷贝，对于内层嵌套对象来说不能起到拷贝的作用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;super me&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newState <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnewState<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;state:&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token comment">// state: [{name: &quot;李四}]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_3-2-数组" tabindex="-1"><a class="header-anchor" href="#_3-2-数组" aria-hidden="true">#</a> 3.2 数组</h4><p>对于 JavaScript 数组来说，目前既提供了数据突变方法，又提供了数据不可变方法，在实际编程中推荐使用数据不可变方法。</p><p>sort、splice、push、pop 等就属于数据突变方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>map、filter、reduce、slice 等就属于数据不可变方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> after <span class="token operator">=</span> before<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>JavaScript 中的扩展运算符也可以比较方便的实现数据的不可变特性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 向数组中添加元素</span>\n<span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> after <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>before<span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after:&#39;</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span>   <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before:&#39;</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 从数组中删除元素</span>\n<span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> after <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>before<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>before<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;after:&quot;</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span>   <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before:&quot;</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 修改数组中的元素</span>\n<span class="token keyword">const</span> before <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> after <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>before<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token operator">...</span>before<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;after:&quot;</span><span class="token punctuation">,</span> after<span class="token punctuation">)</span> <span class="token comment">//  // [&quot;a&quot;, &quot;x, &quot;y&quot;, &quot;d&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before:&quot;</span><span class="token punctuation">,</span> before<span class="token punctuation">)</span>  <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_4-目前存在的问题" tabindex="-1"><a class="header-anchor" href="#_4-目前存在的问题" aria-hidden="true">#</a> 4. 目前存在的问题</h3><p>在数据结构复杂的情况下，比如对象嵌套对象、数组嵌套对象，就必须使用深拷贝，但是使用深拷贝存在两个问题。</p><p>第一，深拷贝必须递归遍历所有对象属性，逐层对数据进行拷贝，执行效率低。</p><p>第二，进行了深拷贝以后，内存中将会存在很多重复的数据，影响性能。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">skill</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;编程&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;驾驶&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>\np2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>比如在上面的代码中将 p1 进行了深拷贝，p1 和 p2 就变成了两个完全独立的对象，虽然实现了数据不可变特性，但同时在内存中也多出了一份完全相同的 skill 属性值。理想状态应该是两个对象中 name 属性是独立的，skill 属性是共享的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> skill <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;编程&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;驾驶&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> skill<span class="token punctuation">}</span>\n<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> skill<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',50),e={id:"_5-immer",tabindex:"-1"},o=(0,p._)("a",{class:"header-anchor",href:"#_5-immer","aria-hidden":"true"},"#",-1),c=(0,p.Uk)(" 5. "),l={href:"https://immerjs.github.io/immer/zh-CN/",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("Immer"),r=(0,p.uE)('<h4 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述" aria-hidden="true">#</a> 5.1 概述</h4><p>Immer 是一个 JavaScript 扩展库，可以让开发者方便的实现数据不可变特性，每次操作都会产生一个新的不可变数据，无论这个操作是增加，删除还是修改，都不会影响到原有数据。</p><p>Immer 具有数据结构共享特性，在拷贝对象时可以实现不变的属性值在内存中进行共享，变化的属性值与原对象之间完全独立。</p><p>Immer 可以让开发者使用数据不可变特性的同时极大提升应用程序的性能。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> immer@9.0.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_5-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_5-2-基本使用" aria-hidden="true">#</a> 5.2 基本使用</h4><p>Immer 向外默认导出了一个 可以完成所有工作的方法即 produce。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> produce <span class="token keyword">from</span> <span class="token string">&quot;immer&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> baseState <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Hello JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Hello Immer&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">draftState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  draftState<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  draftState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;Learn React&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>案例：封装一个用于切换任务是否完成的方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toggleTodo</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">produce</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">draftState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> todo <span class="token operator">=</span> draftState<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    todo<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>done<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token function">toggleTodo</span><span class="token punctuation">(</span>baseState<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_6-react-与-immer" tabindex="-1"><a class="header-anchor" href="#_6-react-与-immer" aria-hidden="true">#</a> 6. React 与 Immer</h3><h4 id="_6-1-概述" tabindex="-1"><a class="header-anchor" href="#_6-1-概述" aria-hidden="true">#</a> 6.1 概述</h4><p>在 React 中，它要求状态必须具有不可变性，即不能直接更改原状态对象，必须创建新的状态对象，使用新的状态对象替换旧的状态对象。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nexport default function App() {\n  const [person, setPerson] = useState({ name: &quot;张三&quot; });\n  const onClickHandler = () =&gt; {\n    // 此处的状态修改并不会触发视图更新, 原因是违背了数据不可变原则\n    person.name = &quot;李四&quot;;\n    setPerson(person);\n    // 正确的做法是创建一个新的状态状态, 传递新状态对象才能触发视图更新\n    // const newPerson = { ...person, name: &quot;李四&quot; };\n    // setPerson(newPerson);\n  };\n  return &lt;button onClick={onClickHandler}&gt;{person.name}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nexport default function App() {\n  const [person, setPerson] = useState([&quot;张三&quot;]);\n  const onClickHandler = () =&gt; {\n    // 此处更新并不会触发视图更新, 原因是违背了数据不可变原则\n    person.push(&quot;李四&quot;);\n    setPerson(person);\n    // 以下为正确用法\n    // const newPerson = [...person, &quot;李四&quot;];\n    // setPerson(newPerson);\n  };\n  return &lt;button onClick={onClickHandler}&gt;{person}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_6-2-在-react-中使用-immer" tabindex="-1"><a class="header-anchor" href="#_6-2-在-react-中使用-immer" aria-hidden="true">#</a> 6.2 在 React 中使用 Immer</h4><h5 id="_1-usestate" tabindex="-1"><a class="header-anchor" href="#_1-usestate" aria-hidden="true">#</a> 1. useState</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\nimport produce from &quot;immer&quot;;\n\nexport default function App() {\n  const [person, setPerson] = useState({ name: &quot;张三&quot; });\n  const onClickHandler = () =&gt; {\n    setPerson(\n      produce(person, (draftState) =&gt; {\n        draftState.name = &quot;李四&quot;;\n      })\n    );\n  };\n  return &lt;button onClick={onClickHandler}&gt;{person.name}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> use-immer\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useImmer } from &quot;use-immer&quot;;\n\nexport default function App() {\n  const [person, setPerson] = useImmer({ name: &quot;张三&quot; });\n  const onClickHandler = () =&gt; {\n    setPerson((draftState) =&gt; {\n      draftState.name = &quot;李四&quot;;\n    });\n  };\n  return &lt;button onClick={onClickHandler}&gt;{person.name}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="_2-usereducer" tabindex="-1"><a class="header-anchor" href="#_2-usereducer" aria-hidden="true">#</a> 2. useReducer</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useReducer } from &quot;react&quot;;\nimport produce from &quot;immer&quot;;\n\nconst reducer = produce((draft, action) =&gt; {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      draft.count = draft.count + 1;\n      break;\n  }\n});\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n  return &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot; })}&gt;{state.count}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useImmerReducer } from &quot;use-immer&quot;;\n\nconst reducer = (draft, action) =&gt; {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      draft.count = draft.count + 1;\n      break;\n  }\n};\n\nexport default function App() {\n  const [state, dispatch] = useImmerReducer(reducer, { count: 0 });\n  return &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot; })}&gt;{state.count}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_7-immutable" tabindex="-1"><a class="header-anchor" href="#_7-immutable" aria-hidden="true">#</a> 7. Immutable</h3><h4 id="_7-1-概述" tabindex="-1"><a class="header-anchor" href="#_7-1-概述" aria-hidden="true">#</a> 7.1 概述</h4>',25),i=(0,p.Uk)("在 "),k={href:"https://immutable-js.github.io/immutable-js/",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("Immutable.js"),b=(0,p.Uk)(" 中提供了多种数据结构用于实现不可变数据，常用的有两种，即 List 和 Map。"),d=(0,p.uE)('<p>List 对应 JavaScript 中的数组。</p><p>Map 对应 JavaScript 中的对象。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> immutable@4.0.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List<span class="token punctuation">,</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_7-2-实例方法" tabindex="-1"><a class="header-anchor" href="#_7-2-实例方法" aria-hidden="true">#</a> 7.2 实例方法</h4><h5 id="_1-设置数据" tabindex="-1"><a class="header-anchor" href="#_1-设置数据" aria-hidden="true">#</a> 1. 设置数据</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> l2 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;x&quot;,&quot;b&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;a&quot;, &quot;b&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 100, b: 2}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 1, b: 2}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_2-获取数据" tabindex="-1"><a class="header-anchor" href="#_2-获取数据" aria-hidden="true">#</a> 2. 获取数据</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="_3-合并数据" tabindex="-1"><a class="header-anchor" href="#_3-合并数据" aria-hidden="true">#</a> 3. 合并数据</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> l3 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;a&quot;, &quot;b&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;c&quot;, &quot;d&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m3 <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 1, b: 2, c: 3, d: 4}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 1, b: 2}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {c: 3, d: 4}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_4-删除数据" tabindex="-1"><a class="header-anchor" href="#_4-删除数据" aria-hidden="true">#</a> 4. 删除数据</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> l2 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;b&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;a&quot;, &quot;b&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {b: 2}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 1, b: 2}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_5-更新数据" tabindex="-1"><a class="header-anchor" href="#_5-更新数据" aria-hidden="true">#</a> 5. 更新数据</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> l2 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> target <span class="token operator">+</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;aHello&quot;, &quot;b&quot;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List [&quot;a&quot;, &quot;b&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> target <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 1, b: 4}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {a: 1, b: 2}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_7-3-工具方法" tabindex="-1"><a class="header-anchor" href="#_7-3-工具方法" aria-hidden="true">#</a> 7.3 工具方法</h4><h5 id="_1-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_1-数据类型转换" aria-hidden="true">#</a> 1. 数据类型转换</h5><p>使用 <code>fromJS 方法</code> 将数组和对象转换为不可变数据，数组转为 List，对象转为 Map。</p><p>Map 和 List 方法在创建数据时不支持深层嵌套，fromJS 方法支持深层嵌套。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {&quot;a&quot;: [object Object]}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {&quot;a&quot;: Map {b: Map {c: 1}}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> f2 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {&quot;a&quot;: Map {b: Map {c: 100}}}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map {&quot;a&quot;: Map {b: Map {c: 1}}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_2-数据比对" tabindex="-1"><a class="header-anchor" href="#_2-数据比对" aria-hidden="true">#</a> 2. 数据比对</h5><p>使用 <code>is 方法</code> 判断两个不可变数据是否相同。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS<span class="token punctuation">,</span> is <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> m2 <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_8-react-与-immutable" tabindex="-1"><a class="header-anchor" href="#_8-react-与-immutable" aria-hidden="true">#</a> 8. React 与 Immutable</h3><h5 id="_1-usestate-1" tabindex="-1"><a class="header-anchor" href="#_1-usestate-1" aria-hidden="true">#</a> 1. useState</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>person<span class="token punctuation">,</span> setPerson<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setPerson</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClickHandler<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_2-redux" tabindex="-1"><a class="header-anchor" href="#_2-redux" aria-hidden="true">#</a> 2. Redux</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ReactDOM from &quot;react-dom&quot;\nimport App from &quot;./App&quot;\nimport { createStore } from &quot;redux&quot;\nimport { Provider } from &quot;react-redux&quot;\nimport { fromJS } from &quot;immutable&quot;\n\nconst initialState = fromJS({count: 0 })\n\nfunction reducer(state = initialState, action) {\n  let count = state.get(&quot;count&quot;)\n  switch (action.type) {\n    case &quot;increment&quot;:\n      return state.set(&quot;count&quot;, count + 1)\n    case &quot;decrement&quot;:\n      return state.set(&quot;count&quot;, count - 1)\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&quot;root&quot;)\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useDispatch, useSelector } from &quot;react-redux&quot;\n\nexport default function App() {\n  const dispatch = useDispatch()\n  const count = useSelector(state =&gt; state.get(&quot;count&quot;))\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot; })}&gt; increment {count} &lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: &quot;decrement&quot; })}&gt; decrement {count} &lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',36),g={},q=(0,a(3744).Z)(g,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("h3",e,[o,c,(0,p._)("a",l,[u,(0,p.Wm)(a)])]),r,(0,p._)("p",null,[i,(0,p._)("a",k,[m,(0,p.Wm)(a)]),b]),d],64)}]])}}]);