"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[4606],{9663:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-635f7db0",path:"/docs/02.Front-endFrameKnowledge/02.React/06.React%20Router.html",title:"React Router -- React 路由管理",lang:"en-US",frontmatter:{title:"React Router -- React 路由管理",date:"2022-04-11T15:25:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React Router -- React 路由管理",slug:"react-router-react-路由管理",children:[{level:3,title:"1. 客户端路由概述",slug:"_1-客户端路由概述",children:[]},{level:3,title:"2. 基本使用",slug:"_2-基本使用",children:[]},{level:3,title:"3. NavLink 组件",slug:"_3-navlink-组件",children:[]},{level:3,title:"4. 404 与 Navigate",slug:"_4-404-与-navigate",children:[]},{level:3,title:"5. 嵌套路由",slug:"_5-嵌套路由",children:[]},{level:3,title:"6. 索引路由",slug:"_6-索引路由",children:[]},{level:3,title:"7. 编程式导航",slug:"_7-编程式导航",children:[]},{level:3,title:"8. 路由参数",slug:"_8-路由参数",children:[]},{level:3,title:"9. 查询参数",slug:"_9-查询参数",children:[]},{level:3,title:"10. 路由组件懒加载",slug:"_10-路由组件懒加载",children:[]},{level:3,title:"11. 路由守卫 单路由守卫",slug:"_11-路由守卫-单路由守卫",children:[]},{level:3,title:"12. 路由守卫 多路由守卫",slug:"_12-路由守卫-多路由守卫",children:[]},{level:3,title:"13. 滚动行为修正",slug:"_13-滚动行为修正",children:[]},{level:3,title:"14. useRoutes",slug:"_14-useroutes",children:[]},{level:3,title:"15. 嵌套路由与布局组件",slug:"_15-嵌套路由与布局组件",children:[]}]}],git:{createdTime:164966203e4,updatedTime:164966203e4,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/06.React Router.md"}},5591:(n,s,e)=>{e.r(s),e.d(s,{default:()=>l});const a=(0,e(6252).uE)('<h2 id="react-router-react-路由管理" tabindex="-1"><a class="header-anchor" href="#react-router-react-路由管理" aria-hidden="true">#</a> React Router -- React 路由管理</h2><h3 id="_1-客户端路由概述" tabindex="-1"><a class="header-anchor" href="#_1-客户端路由概述" aria-hidden="true">#</a> 1. 客户端路由概述</h3><p>在 Web 应用中，客户端路由就是导航，就是 URL 地址与页面之间的对应关系，可以实现点击不同的链接跳转到不同的页面。</p><p>传统 Web 应用的中的路由是由 a 标记实现的，通过 a 标记可以实现在不同的 HTML 文件之间进行跳转。</p><p>在 React 应用中，只有一个 HTML 文件，React 应用通过不同的组件模拟不同的页面，所以 React 应用中的路由要实现的是在不同的组件之间进行跳转。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220411152527293.png" alt="image-20220411152527293"></p><p>示例图：</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/42.gif" alt="42"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-router-dom\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_2-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-基本使用" aria-hidden="true">#</a> 2. 基本使用</h3><p>需求：为应用创建首页和新闻两个页面。</p><ol><li><p>创建页面级路由组件</p><p><code>src/pages/Home.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Home() {\n  return &lt;div&gt;欢迎来到首页 🌶🌶🌶 &lt;/div&gt;;\n}\nexport default Home;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>src/pages/News.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function News() {\n  return &lt;div&gt;欢迎来到关于新闻页 😁😁😁&lt;/div&gt;;\n}\nexport default News;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>src/pages/Error.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Error() {\n  return &lt;div&gt;页面走丢了 😭😭😭&lt;/div&gt;;\n}\nexport default Error;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>配置路由规则</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { BrowserRouter, Routes, Route } from &quot;react-router-dom&quot;;\nimport News from &quot;./pages/News&quot;;\nimport Home from &quot;./pages/Home&quot;;\n\nfunction App() {\n  // 注意: 在 v6 版本中，一旦路由规则匹配成功，则不再继续向后匹配，所以不再需要使用 exact 属性\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=&quot;/news&quot; element={&lt;News /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>为应用添加用于跳转页面的链接地址</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Link } from &quot;react-router-dom&quot;;\n\nfunction App() {\n  // 注意: react-router-dom 提供的组件都必须被 BrowserRouter 组件包裹, 包括 Link 组件\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;\n      &lt;Link to=&quot;/news&quot;&gt;News&lt;/Link&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h3 id="_3-navlink-组件" tabindex="-1"><a class="header-anchor" href="#_3-navlink-组件" aria-hidden="true">#</a> 3. NavLink 组件</h3><p>Link 组件是用于生成普通链接的组件，导航链接应该使用 NavLink 组件，当前链接被激活时，链接元素身上会自动添加 active 激活类名。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;NavLink to=&quot;/&quot;&gt;\n  Home\n&lt;/NavLink&gt;\n&lt;NavLink to=&quot;/news&quot;&gt;\n  News\n&lt;/NavLink&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过以下方式更改默认的激活类名。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const activeClassName = ({ isActive }) =&gt; (isActive ? &quot;on&quot; : &quot;off&quot;);\n\n&lt;NavLink to=&quot;/&quot; className={activeClassName}&gt;\n  Home\n&lt;/NavLink&gt;\n&lt;NavLink to=&quot;/about&quot; className={activeClassName}&gt;\n  News\n&lt;/NavLink&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过同样的方式也可以为导航链接添加行内样式。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;NavLink to=&quot;/&quot; style={({ isActive }) =&gt; ({ color: isActive ? &quot;red&quot; : &quot;blue&quot; })}&gt;\n  Home\n&lt;/NavLink&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-404-与-navigate" tabindex="-1"><a class="header-anchor" href="#_4-404-与-navigate" aria-hidden="true">#</a> 4. 404 与 Navigate</h3><p>在路由规则配置的最后，可以使用 <code>*</code> 号匹配不存在的路由规则，匹配到以后可以指定表示 404 的页面组件。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Error from &quot;./pages/Error&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;*&quot; element={&lt;Error /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果不想展示 404，也可以将路由重定向到应用中已经存在的页面路由组件。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Navigate } from &quot;react-router-dom&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;*&quot; element={&lt;Navigate to=&quot;/&quot; /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_5-嵌套路由" tabindex="-1"><a class="header-anchor" href="#_5-嵌套路由" aria-hidden="true">#</a> 5. 嵌套路由</h3><p>嵌套路由可以理解为二级路由乃至三级路由. 就是在路由组件中还包含路由匹配组件。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/40.png" alt="40"></p><ol><li><p>配置新闻页面中的二级路由规则</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import News from &quot;./pages/News&quot;;\nimport InnerNews from &quot;./pages/InnerNews&quot;;\nimport OuterNews from &quot;./pages/OuterNews&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/news&quot; element={&lt;News /&gt;}&gt;\n          &lt;Route path=&quot;inner&quot; element={&lt;InnerNews /&gt;} /&gt;\n          &lt;Route path=&quot;outer&quot; element={&lt;OuterNews /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>在一级路由页面组件 ( 新闻页面组件 ) 中放置路由插槽、配置跳转链接</p><p><code>src/pages/News.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { NavLink, Outlet } from &quot;react-router-dom&quot;;\n\nfunction News() {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;欢迎来到关于新闻页 😁😁😁&lt;/p&gt;\n      &lt;NavLink to=&quot;/news/inner&quot;&gt;国内新闻&lt;/NavLink&gt;\n      &lt;NavLink to=&quot;/news/outer&quot;&gt;国际新闻&lt;/NavLink&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ol><h3 id="_6-索引路由" tabindex="-1"><a class="header-anchor" href="#_6-索引路由" aria-hidden="true">#</a> 6. 索引路由</h3><p>通过索引路由可以指定默认显示的二级路由，比如上述案例中，当进入新闻页面时二级路由组件所在区域是空白的，该缺陷就可以通过索引路由补救。</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  // 注意: 索引路由不能有 path\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/news&quot; element={&lt;News /&gt;}&gt;\n          &lt;Route index element={&lt;InnerNews /&gt;} /&gt;\n          &lt;Route path=&quot;inner&quot; element={&lt;InnerNews /&gt;} /&gt;\n          &lt;Route path=&quot;outer&quot; element={&lt;OuterNews /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_7-编程式导航" tabindex="-1"><a class="header-anchor" href="#_7-编程式导航" aria-hidden="true">#</a> 7. 编程式导航</h3><p>通过事件的方式进行跳转。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useNavigate } from &quot;react-router-dom&quot;;\n\nfunction Home() {\n  const navigate = useNavigate();\n  return &lt;button onClick={() =&gt; navigate(&quot;/news&quot;)}&gt;News&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_8-路由参数" tabindex="-1"><a class="header-anchor" href="#_8-路由参数" aria-hidden="true">#</a> 8. 路由参数</h3><p>通过路由参数可以实现在不同的页面组件之间跳转时携带数据。</p><p>比如在文章列表页面中，点击某一篇文章跳转到文章详情页面，此时就需要将被点击的那篇文章的 id 传递到文章详情页面。</p><p>在应用中会有很多篇文章，但是文章详情页面组件只有一个，可以将它理解为文章详情的模板页面，在跳转到这个模板页面时，需要将文章id传进来，在模板页面中需要通过 id 获取详情，从而展示详情数据。</p><ol><li><p>添加路由规则并指定跳转到该路由时需要传递参数</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Detail from &quot;./pages/Detail&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/detail/:id&quot; element={&lt;Detail /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>在实现跳转的路由链接中传递参数</p><p><code>src/pages/Home.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Link } from &quot;react-router-dom&quot;;\n\nfunction Home() {\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;\n        &lt;Link to=&quot;/detail/1&quot;&gt;老旧小区改造, 这三区名单来了!&lt;/Link&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n        &lt;Link to=&quot;/detail/2&quot;&gt;穿鞋把脚放列车座位上, 韩总统候选人尹锡悦引发网友批..&lt;/Link&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>在目标跳转页面组件接收路由参数</p><p><code>src/pages/Detail.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useParams } from &quot;react-router-dom&quot;;\n\nfunction Detail() {\n  const { id } = useParams();\n  return &lt;div&gt;Detail Page {id}&lt;/div&gt;;\n}\n\nexport default Detail;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h3 id="_9-查询参数" tabindex="-1"><a class="header-anchor" href="#_9-查询参数" aria-hidden="true">#</a> 9. 查询参数</h3><ol><li><p>定义路由时不需要加路由参数占位符</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/detail&quot; element={&lt;Detail /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>在链接跳转时添加参数</p><p><code>src/pages/Home.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Link } from &quot;react-router-dom&quot;;\n\nfunction Home() {\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;\n        &lt;Link to=&quot;/detail?id=1&quot;&gt;老旧小区改造, 这三区名单来了!&lt;/Link&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n        &lt;Link to=&quot;/detail?id=2&quot;&gt;穿鞋把脚放列车座位上, 韩总统候选人尹锡悦引发网友批..&lt;/Link&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>在目标跳转页面组件接收路由参数</p><p><code>src/pages/Detail.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useSearchParams } from &quot;react-router-dom&quot;;\n\nfunction Detail() {\n  const [searchParams] = useSearchParams();\n  return &lt;div&gt;Detail Page {searchParams.get(&quot;id&quot;)}&lt;/div&gt;;\n}\n\nexport default Detail;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h3 id="_10-路由组件懒加载" tabindex="-1"><a class="header-anchor" href="#_10-路由组件懒加载" aria-hidden="true">#</a> 10. 路由组件懒加载</h3><p>默认情况下应用中所有的组件都被打包到了同一个文件中，就是说应用初始加载时就加载了所有的组件，这样会导致初始加载应用时间长用户体验差。</p><p>解决办法就是在打包应用时以页面组件为单位，将不同的页面组件打包到不同的文件中，初始加载时只加载用户访问的页面组件。</p><ol><li><p>通过 lazy, import 异步加载组件</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { lazy } from &#39;react&#39;;\n\nconst Home = lazy(() =&gt; import(/* webpackChunkName: &quot;Home&quot; */ &quot;./pages/Home&quot;));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过 import 方法动态导入模块时，webpack 会将导入的模块拆分成单独的文件。</p><p>webpackChunkName 定义拆分文件名称。</p></li><li><p>在调用异步加载的组件时，组件的外面必须包裹 Suspense 组件，通过 Suspense 组件可以指定组件加载过程中的等待 UI。</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Suspense } from &quot;react&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route\n          path=&quot;/&quot;\n          element={\n            &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;\n              &lt;Home /&gt;\n            &lt;/Suspense&gt;\n          }\n        /&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>封装 Loadable 组件以复用 Suspense 组件</p><p><code>src/common/Loadable.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Suspense } from &quot;react&quot;;\n\nfunction Loadable(Component) {\n  return function (props) {\n    return (\n      &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;\n        &lt;Component {...props} /&gt;\n      &lt;/Suspense&gt;\n    );\n  };\n}\n\nexport default Loadable;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Loadable from &quot;./pages/Loadable&quot;;\n\nconst Home = Loadable(\n  lazy(() =&gt; import(/* webpackChunkName: &quot;Home&quot; */ &quot;./pages/Home&quot;))\n);\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;}/&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ol><h3 id="_11-路由守卫-单路由守卫" tabindex="-1"><a class="header-anchor" href="#_11-路由守卫-单路由守卫" aria-hidden="true">#</a> 11. 路由守卫 单路由守卫</h3><p>当用户去访问那些需要鉴权以后才能进入的路由组件时，需要先通过路由守卫对其进行鉴权，只有通过才允许用户进入，否则进行重定向。</p><ol><li><p>定义执行鉴权的钩子函数供路由守卫进行使用</p><p><code>src/common/useAuth.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect, useState } from &quot;react&quot;;\n\nfunction isAuth() {\n  // 模拟鉴权成功\n  return Promise.resolve();\n  // 模拟鉴权失败\n  // return Promise.reject();\n}\n\nfunction useAuth() {\n  // 用于存储鉴权结果\n  // true 成功\n  // false 失败 (默认值)\n  const [auth, setAuth] = useState(false);\n  // 用于存储异步状态\n  // true 等待 (默认值)\n  // false 结束\n  const [loading, setLoading] = useState(true);\n  useEffect(() =&gt; {\n    // 开始鉴权\n    isAuth()\n      // 成功\n      .then(() =&gt; setAuth(true))\n      // 失败\n      .catch(() =&gt; setAuth(false))\n      // 不管成功还是失败, 都将异步状态更新为结束\n      .finally(() =&gt; setLoading(false));\n  }, []);\n  // 返回异步状态和鉴权结果\n  return { loading, auth };\n}\n\nexport default useAuth;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li><li><p>创建用于实现身份验证的路由守卫组件</p><p><code>src/common/AuthGuard.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Navigate } from &quot;react-router-dom&quot;;\nimport useAuth from &quot;../hooks/useAuth&quot;;\n\nfunction AuthGuard({ children }) {\n  // 调用鉴权钩子, 获取异步状态及鉴权结果\n  const { auth, loading } = useAuth();\n  // 如果异步状态为等待, 渲染等待过程中的UI界面\n  if (loading) return &lt;div&gt;loading...&lt;/div&gt;;\n  // 判断鉴权结果, 如果通过, 进入目标路由组件, 如果没通过, 重定向到执行授权的页面\n  return auth ? children : &lt;Navigate to=&quot;/login&quot; /&gt;;\n}\n\nexport default AuthGuard;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>对 Admin 组件，即需要鉴权以后才能访问的页面路由组件进行守卫</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import AuthGuard from &quot;./common/AuthGuard&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/admin&quot; element={&lt;AuthGuard&gt;&lt;Admin /&gt;&lt;/AuthGuard&gt;}/&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h3 id="_12-路由守卫-多路由守卫" tabindex="-1"><a class="header-anchor" href="#_12-路由守卫-多路由守卫" aria-hidden="true">#</a> 12. 路由守卫 多路由守卫</h3><p>通过 Outlet 路由插座组件可以实现多路由守卫。</p><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Admin from &quot;./pages/Admin&quot;;\nimport AuthGuardOutlet from &quot;./common/AuthGuardOutlet&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n        &lt;Route path=&quot;/admin&quot; element={&lt;AuthGuardOutlet /&gt;}&gt;\n          &lt;Route path=&quot;&quot; element={&lt;Admin /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>src/common/AuthGuardOutlet.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Navigate, Outlet } from &quot;react-router-dom&quot;;\nimport useAuth from &quot;../hooks/useAuth&quot;;\n\nfunction AuthGuardOutlet() {\n  // 调用鉴权钩子, 获取异步状态及鉴权结果\n  const { auth, loading } = useAuth();\n  // 如果异步状态为等待, 渲染等待过程中的UI界面\n  if (loading) return &lt;div&gt;loading...&lt;/div&gt;;\n  // 判断鉴权结果, 如果通过, 渲染路由插座组件, 让 children 组件能够渲染到插座组件中\n  // 如果没通过, 重定向到执行授权的页面\n  return auth ? &lt;Outlet /&gt; : &lt;Navigate to=&quot;/login&quot; /&gt;;\n}\n\nexport default AuthGuardOutlet;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_13-滚动行为修正" tabindex="-1"><a class="header-anchor" href="#_13-滚动行为修正" aria-hidden="true">#</a> 13. 滚动行为修正</h3><p>问题：在 A 页面中将页面滚动到底部，切换到 B 页面，此时滚动条仍处于 A 页面的位置。</p><p>解决问题的方式就是监听路由切换行为，当路由发生切换行为时，让页面自动回到顶部。</p><p><code>src/common/ScrollTop.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect } from &quot;react&quot;;\nimport { useLocation } from &quot;react-router-dom&quot;;\n\nfunction ScrollTop() {\n  const { pathname } = useLocation();\n  useEffect(() =&gt; {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n  return null;\n}\n\nexport default ScrollTop;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ScrollTop from &quot;./common/ScrollTop&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;ScrollTop /&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_14-useroutes" tabindex="-1"><a class="header-anchor" href="#_14-useroutes" aria-hidden="true">#</a> 14. useRoutes</h3><p>通过 useRoutes 钩子函数可以实现通过 JavaScript 配置对象的方式定义路由规则。</p><p><code>src/AppRoute.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRoutes } from &quot;react-router-dom&quot;;\nimport Home from &quot;./pages/Home&quot;;\nimport InnerNews from &quot;./pages/InnerNews&quot;;\nimport News from &quot;./pages/News&quot;;\nimport OuterNews from &quot;./pages/OuterNews&quot;;\n\nconst routes = [\n  { path: &quot;/&quot;, element: &lt;Home /&gt; },\n  {\n    path: &quot;/news&quot;,\n    element: &lt;News /&gt;,\n    children: [\n      { path: &quot;inner&quot;, element: &lt;InnerNews /&gt; },\n      { path: &quot;outer&quot;, element: &lt;OuterNews /&gt; },\n    ],\n  },\n]\n\nfunction AppRoute() {\n  let element = useRoutes(routes);\n  return element;\n}\n\nexport default AppRoute;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>src/App.js</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { BrowserRouter } from &quot;react-router-dom&quot;;\nimport AppRoute from &quot;./AppRoute&quot;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;AppRoute /&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_15-嵌套路由与布局组件" tabindex="-1"><a class="header-anchor" href="#_15-嵌套路由与布局组件" aria-hidden="true">#</a> 15. 嵌套路由与布局组件</h3><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/App.js\nimport { BrowserRouter, Route, Routes } from &quot;react-router-dom&quot;;\nimport AdminHome from &quot;./admin/AdminHome&quot;;\nimport AdminLayout from &quot;./admin/AdminLayout&quot;;\nimport Layout from &quot;./components/Layout&quot;;\nimport About from &quot;./pages/About&quot;;\nimport Home from &quot;./pages/Home&quot;;\n\nexport default  function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=&quot;/&quot; element={&lt;Layout /&gt;}&gt;\n          &lt;Route path=&quot;&quot; element={&lt;Home /&gt;} /&gt;\n          &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;\n        &lt;/Route&gt;\n        &lt;Route path=&quot;/admin&quot; element={&lt;AdminLayout /&gt;}&gt;\n          &lt;Route path=&quot;&quot; element={&lt;AdminHome /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Header from &quot;./Header&quot;;\nimport Footer from &quot;./Footer&quot;;\nimport { Outlet } from &quot;react-router-dom&quot;;\n\nexport default function Layout() {\n  return (\n    &lt;&gt;\n      &lt;Header /&gt;\n      &lt;Outlet /&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',71),r={},l=(0,e(3744).Z)(r,[["render",function(n,s){return a}]])}}]);