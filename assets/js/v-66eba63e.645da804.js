"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[2483],{4206:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-66eba63e",path:"/docs/02.Front-endFrameKnowledge/02.React/03.React%20Development%20Basic.html",title:"React Development Basic -- 组件开发基础",lang:"en-US",frontmatter:{title:"React Development Basic -- 组件开发基础",date:"2022-04-02T16:20:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React Development Basic -- 组件开发基础",slug:"react-development-basic-组件开发基础",children:[{level:3,title:"1. 组件概述",slug:"_1-组件概述",children:[]},{level:3,title:"2. 复用组件",slug:"_2-复用组件",children:[]},{level:3,title:"3. 组件模板",slug:"_3-组件模板",children:[]},{level:3,title:"4. 组件状态",slug:"_4-组件状态",children:[]},{level:3,title:"5. 组件通讯",slug:"_5-组件通讯",children:[]},{level:3,title:"6. 表单控制",slug:"_6-表单控制",children:[]},{level:3,title:"7. 样式控制",slug:"_7-样式控制",children:[]},{level:3,title:"8. 传送门组件",slug:"_8-传送门组件",children:[]}]}],git:{createdTime:1649248229e3,updatedTime:1649248229e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:1}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/03.React Development Basic.md"}},4403:(n,s,e)=>{e.r(s),e.d(s,{default:()=>y});var a=e(6252);const l=(0,a.uE)('<h2 id="react-development-basic-组件开发基础" tabindex="-1"><a class="header-anchor" href="#react-development-basic-组件开发基础" aria-hidden="true">#</a> React Development Basic -- 组件开发基础</h2><blockquote><p>目标：</p><ol><li>组件概述</li><li>复用组件</li><li>组件模板</li><li>组件状态</li><li>组件通讯</li><li>表单控制</li><li>样式控制</li><li>传送门组件</li></ol></blockquote><h3 id="_1-组件概述" tabindex="-1"><a class="header-anchor" href="#_1-组件概述" aria-hidden="true">#</a> 1. 组件概述</h3><blockquote><p>目标：</p><ol><li>什么是组件</li><li>组件的设计思想</li><li>如何创建组件</li></ol></blockquote><h4 id="_1-1-什么是组件" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是组件" aria-hidden="true">#</a> 1.1 什么是组件</h4><p>​ 在一个页面中，如果将全部逻辑代码、页面的布局代码、样式代码等放在一起，这样处理起来会很麻烦，并且不利于后续管理和扩展。</p><p>​ 于是乎，产生了一种开发思路：<strong>组件化开发</strong></p><p>​ 组件化开发就是将一个页面拆分为一个个功能模块，每个功能完成自己这部分的独立功能。</p><p>整体过程为：</p><ul><li>将一个完整的页面分为很多组件</li><li>每个组件用于实现页面中的一个功能模块</li></ul><h5 id="_1-react-的组件化" tabindex="-1"><a class="header-anchor" href="#_1-react-的组件化" aria-hidden="true">#</a> 1. React 的组件化</h5><p><code>React</code> 中的组件就是页面中的一小块区域，组件内部会包含这块区域中的视图代码、样式代码以及逻辑代码。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161026819.png" alt="image-20220325161026819"></p><p><code>React</code> 采用组件化的方式构建用户界面</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161042749.png" alt="image-20220325161042749"></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161116982.png" alt="image-20220325161116982"></p><p>​ 组件的另一个核心思想就是<strong>解耦</strong>，默认情况下每个组件都有自己的作用域，内部代码在外部是不可见的，这意味着组件之间的代码不会发生冲突，从而避免在传统开发中经常出现的改A坏B的问题。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/05.png" alt="05"></p><h4 id="_1-3-如何创建组件" tabindex="-1"><a class="header-anchor" href="#_1-3-如何创建组件" aria-hidden="true">#</a> 1.3 如何创建组件</h4><p>在 React 中组件以函数的形式存在，组件最基本的特征就是一个返回视图（JSX）的函数。</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 组件的首字母必须为大写\nfunction App() {\n    return &lt;div&gt; Hello World!!! &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 React 中，组件以自定义标签的形式进行调用：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>多次调用 <code>App</code> 组件：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const jsx = (\n  &lt;&gt;\n    &lt;App /&gt;\n    &lt;App /&gt;\n  &lt;/&gt;\n)\nReactDOM.render(jsx, document.getElementById(&quot;root&quot;))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>组件和 HTML 一样，都是以树状结构存在的。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/06.png" alt="06"></p><p>示例：</p><p>![create components](https://raw.githubusercontent.com/Sue-52/PicGo/main/images/create components.png)</p><h3 id="_2-复用组件" tabindex="-1"><a class="header-anchor" href="#_2-复用组件" aria-hidden="true">#</a> 2. 复用组件</h3><blockquote><p>目标：</p><ol><li>props</li><li>children</li></ol></blockquote><h4 id="_2-1-props-继承" tabindex="-1"><a class="header-anchor" href="#_2-1-props-继承" aria-hidden="true">#</a> 2.1 Props 继承</h4><p>在调用组件时，通过为组件标签添加属性的方式向子组件内部传递数据，实现组件的差异化和复用。</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;ChildProps msg=&quot;first&quot; /&gt;\n&lt;ChildProps msg=&quot;second&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在子组件内部，通过组件函数参数接收父组件中传递的数据，组件函数中的第一个参数是对象类型，可以进行属性解构，存储了父组件中传来的所有数据。</p><p>示例1：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function ChildProps (props) {\n    return &lt;p&gt; {props.msg} &lt;/p&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>示例2：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function ChildProps ({ msg }) {\n    return &lt;p&gt; { msg } &lt;/p&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>子组件中的 props 参数可以设置为默认值，这样调用组件时就可以根据子组件内部所需内容进行传递，当数据传递了，则使用父组件传递的数据，没有则使用默认数据</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>ChildProps.defaultProps = {\n    msg: &quot;Hello React&quot;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用时：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;ChildProps msg=&quot;first&quot; /&gt; // first\n&lt;ChildProps /&gt; // Hello React\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>子组件中的 props 默认值可以防止内部代码执行出错。</p><p>错误示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Person (props) {\n  return &lt;div&gt;{props.info.name}&lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;Person /&gt; // 报错, 因为组件内部代码执行时, 通过 props 获取到的 info 为 undefined, 不能再通过 undefined 获取 name\n&lt;Person info={{name: &quot;张三&quot;}}/&gt; // 张三\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>正确示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>Person.defaultProps = {\n  info: {}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;Person /&gt; // 不会报错, 因为在 JSX 中渲染 undefined 是合法的\n&lt;Person info={{name: &quot;张三&quot;}}/&gt; // 张三\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-2-children-组合" tabindex="-1"><a class="header-anchor" href="#_2-2-children-组合" aria-hidden="true">#</a> 2.2 children 组合</h4><p>在调用组件时，可以向组件内部添加 JSX，实现差异化组件复用，相比于 props，使用 children 可以向子组件内部传递更复杂的数据。</p><p>示例1：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;Person&gt; Hello, React Children Property &lt;/Person&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>示例2：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;Person&gt; \n\t&lt;p&gt; single child &lt;/p&gt;\n&lt;/Person&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>示例3：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;Person&gt; \n\t&lt;p&gt; single child &lt;/p&gt;\n    &lt;p&gt; single child &lt;/p&gt;\n    &lt;p&gt; single child &lt;/p&gt;\n&lt;/Person&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Person 组件：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Person(props) {\n    return &lt;div&gt; { props.children } &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>能够传递任何的JavaScript表达式作为children，包括函数。其中 children 的最常用的场景就是辅助创建布局组件。布局组件可以增强组件复用能力。</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function HomePage() {\n  return &lt;div&gt;HomePage&lt;/div&gt;;\n}\nfunction AboutPage() {\n  return &lt;div&gt;AboutPage&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Header() {\n  return &lt;div&gt;Header&lt;/div&gt;;\n}\nfunction Footer() {\n  return &lt;div&gt;Footer&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Layout(props) {\n  return (\n    &lt;&gt;\n    &lt;Header /&gt;\n    &lt;div&gt;{props.children}&lt;/div&gt;\n    &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function HomePage() {\n  return &lt;Layout&gt;HomePage&lt;/Layout&gt;;\n}\nfunction AboutPage() {\n  return &lt;Layout&gt;AboutPage&lt;/Layout&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-组件模板" tabindex="-1"><a class="header-anchor" href="#_3-组件模板" aria-hidden="true">#</a> 3. 组件模板</h3><blockquote><p>目标：</p><ol><li>事件程序</li><li>条件渲染</li><li>列表渲染</li></ol></blockquote><h4 id="_3-1-事件程序" tabindex="-1"><a class="header-anchor" href="#_3-1-事件程序" aria-hidden="true">#</a> 3.1 事件程序</h4><blockquote><p>目标：</p><ol><li>添加事件</li><li>事件传参</li><li>事件对象</li></ol></blockquote><h5 id="_1-添加事件" tabindex="-1"><a class="header-anchor" href="#_1-添加事件" aria-hidden="true">#</a> 1. 添加事件</h5><p>在 JSX 中，为元素添加事件：</p><ul><li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li><li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li><li>事件处理函数通过插值的方式指定。</li></ul><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n    const handleClickButton = () =&gt; {\n        console.log(&quot;Hello React!&quot;)\n    }\n    return &lt;button onClick={handleClickButton}&gt; button &lt;/button&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 React 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code></p><h5 id="_2-事件传参" tabindex="-1"><a class="header-anchor" href="#_2-事件传参" aria-hidden="true">#</a> 2. 事件传参</h5><p>在 JSX 中，为事件添加参数和 javascript 中调用函数思路一致。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n    const handleClick = (str1, str2) =&gt; {\n        console.log(str1, str2);\n    };\n    return &lt;button onClick={() =&gt; handleClickButton(&quot;Hello&quot;, &quot;React&quot;)}&gt; button &lt;/button&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_3-事件对象-event" tabindex="-1"><a class="header-anchor" href="#_3-事件对象-event" aria-hidden="true">#</a> 3. 事件对象 event</h5><ul><li><p>事件处理函数，在没有传递参数时，第一个参数默认为事件对象</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App () {\n \tconst onClickHandler = (event) =&gt; {\n        console.log(event)\n    }\n  \treturn &lt;button onClick={onClickHandler}&gt; button &lt;/button&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>事件处理函数如果传入了参数的情况，默认最后一个参数为事件对象</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App () {\n  \tconst onClickHandler = (arg1, arg2, event) =&gt; {\n     \t console.log(arg1, arg2, event)\n  \t}\n \t return &lt;button onClick={() =&gt; onClickHandler(&#39;a&#39;, &#39;b&#39;)}&gt; button &lt;/button&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>在调用事件处理函数时，可以将事件对象以参数显性传递</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App () {\n  \tconst onClickHandler = (arg1, event, arg2) =&gt; {\n        console.log(arg1, event, arg2)\n    }\n \t return &lt;button onClick={(event) =&gt; onClickHandler(&#39;a&#39;, event, &#39;b&#39;)}&gt; button &lt;/button&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h4 id="_2-3-2-条件渲染" tabindex="-1"><a class="header-anchor" href="#_2-3-2-条件渲染" aria-hidden="true">#</a> 2.3.2 条件渲染</h4><blockquote><p>目标：</p><ol><li>If 条件判断</li><li>三元运算符</li></ol></blockquote><p>在组件模板中, 根据条件的不同渲染不同的视图元素。</p><h5 id="_1-if-条件判断" tabindex="-1"><a class="header-anchor" href="#_1-if-条件判断" aria-hidden="true">#</a> 1. If 条件判断</h5><blockquote><p>The <strong><code>if</code></strong> statement executes a statement if a specified condition is <strong>true</strong>. If the condition is <strong>false</strong>, another statement can be executed.</p></blockquote><p>当指定条件为真，<strong>if 语句</strong>会执行一段语句。如果条件为假，则执行另一段语句</p><p>示例1：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function OnMessage() {\n  \treturn &lt;span&gt;The Machine is On&lt;/span&gt;\n}\nfunction OffMessage() {\n  \treturn &lt;span&gt;The Machine is Off&lt;/span&gt;\n}\nfunction OnOff() {\n  \tif (true) {\n    \treturn &lt;OnMessage /&gt;\n  \t} else {\n    \treturn &lt;OffMessage /&gt;\n  \t}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>示例2：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Message() {\n    const getMessage() {\n        if(true) {\n            return &lt;OnMessage /&gt;\n        }else {\n            return &lt;OffMessage /&gt;\n        }\n    }\n    return {getMessage()}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>示例3：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Machine() {\n  \tlet message = null\n  \tif (true) {\n    \tmessage = &lt;OnMessage /&gt;\n  \t} else {\n    \tmessage = &lt;OffMessage /&gt;\n  \t}\n  \treturn &lt;p&gt;{message}&lt;/p&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="_2-三元运算符" tabindex="-1"><a class="header-anchor" href="#_2-三元运算符" aria-hidden="true">#</a> 2. 三元运算符</h5><blockquote><p>The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is <strong>true</strong> followed by a colon (😃, and finally the expression to execute if the condition is <strong>false</strong>. This operator is frequently used as an alternative to an if...else statement.</p></blockquote><p><strong>条件（三元）运算符</strong>是 JavaScript 仅有的使用三个操作数的运算符。一个条件后面会跟一个问号（?），如果条件为 <strong>true</strong> ，则问号后面的表达式A将会执行；表达式A后面跟着一个冒号（:），如果条件为 <strong>false</strong> ，则冒号后面的表达式B将会执行。本运算符经常作为 <code>if</code> 语句的简捷形式来使用。</p><p>示例1：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Message() {\n    return &lt;p&gt; {true ? &lt;OnMessage /&gt; : &lt;OffMessage /&gt;} &lt;/p&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>示例2：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const isError = true\nfunction Message() {\n    &lt;div className={isError ? &quot;error&quot; : &quot;success&quot;}&gt;\n    \t{isError ? &lt;p&gt;Something went wrong...&lt;/p&gt; : &lt;p&gt;Everythis is ok&lt;/p&gt;}\n    &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-3-3-列表渲染" tabindex="-1"><a class="header-anchor" href="#_2-3-3-列表渲染" aria-hidden="true">#</a> 2.3.3 列表渲染</h4><blockquote><p>目标：</p><ol><li>数组自动展开</li><li>列表渲染（map方法）</li><li>key 属性</li></ol></blockquote><h5 id="_1-数组自动展开" tabindex="-1"><a class="header-anchor" href="#_1-数组自动展开" aria-hidden="true">#</a> 1. 数组自动展开</h5><p>在 JSX 中，可以直接将数组放入插值表达式中，因为数组会被自动展开，数组中的元素追直接渲染到该位置。</p><p>示例1：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Home() {\n  const data = [&quot;The beach&quot;, &quot;The mountains&quot;, &quot;Vibrant cities&quot;, &quot;Roughing it&quot;];\n  return (\n    &lt;&gt;\n      &lt;div&gt;{data}&lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161251268.png" alt="image-20220325161251268"></p><p>示例2：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Home() {\n  const jsxList = [\n    &lt;li&gt;list-item-1&lt;/li&gt;,\n    &lt;li&gt;list-item-2&lt;/li&gt;,\n    &lt;li&gt;list-item-3&lt;/li&gt;,\n  ];\n  return (\n    &lt;&gt;\n      &lt;ul&gt;{jsxList}&lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161315285.png" alt="image-20220325161315285"></p><p>注意：不能直接将对象数组放置在插值语法中，因为当数组被展开后，JSX 不知道要如何渲染对象。</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const data = [\n  { name: &quot;The beach&quot; },\n  { name: &quot;The mountains&quot; },\n  { name: &quot;Vibrant cities&quot; },\n  { name: &quot;Roughing it&quot; }\n]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161329931.png" alt="image-20220325161329931"></p><h5 id="_2-列表渲染-map方法" tabindex="-1"><a class="header-anchor" href="#_2-列表渲染-map方法" aria-hidden="true">#</a> 2. 列表渲染（map方法）</h5><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p><strong>注意：</strong> map() 不会对空数组进行检测。</p><p><strong>注意：</strong> map() 不会改变原始数组。</p><p><strong>参数说明：</strong></p><ul><li>第一个参数：函数（必须） <ul><li>currentValue，当前元素的值（必须）</li><li>index：当前元素的索引值（可选）</li><li>arr：当前元素属于的数组对象（可选）</li></ul></li><li>thisValue：可选。对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象。</li></ul><p>返回值：一个新的数组</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const arr = [1, 2, 3, 4, 5, 6];\nconst newArr = arr.map((item, index) =&gt; item * index);\nconsole.log(newArr); // [0, 2, 6, 12, 20, 30]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>map方法内部会对原数组进行遍历，在遍历的过程中不断调用传递到 map 方法中的回调函数，并将当前遍历的值和索引值传递给回调函数，回调函数的返回值会被存储到一个新的数组中，结束遍历后返回到新的数组中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>map 方法在 JSX 中的应用：将数组中的内容渲染到 ul 标签中, 内容使用 li 标签包裹。</p><p>示例1：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Home() {\n  let data = [&quot;Data1&quot;, &quot;Data2&quot;, &quot;Data3&quot;];\n\n  return (\n    &lt;&gt;\n      &lt;ul&gt;\n        {data.map((item, index) =&gt; (\n          &lt;li key={index}&gt;{item}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161348665.png" alt="image-20220325161348665"></p><p>渲染过程图：</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/08.png" alt="08"></p><h5 id="_3-key-属性" tabindex="-1"><a class="header-anchor" href="#_3-key-属性" aria-hidden="true">#</a> 3. key 属性</h5><p>在列表渲染的过程中，React 建议开发者为列表项添加 key 属性，否则在控制台中输出警告。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161428037.png" alt="image-20220325161428037"></p><p>key 属性用于为列表中的元素提供标识，React通过标识来识别元素发生的变化，实现元素的更增删改查，以此提升性能。</p><ul><li><p>当列表渲染时没有key属性，则当数据更新时元素会发生整体的重新渲染。</p></li><li><p>当列表有 key 属性时，当数据更新时，只有变化的元素会重新渲染，其余元素则会被复用。</p></li><li><p>并且 key 值必须不为重复的，一般以id作为key值</p></li></ul><p>如果列表只在组件初始化的时候渲染一次，后续不发生变化，也可以使用循环索引作为 key 属性的值。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/17.png" alt="17"></p><h3 id="_4-组件状态" tabindex="-1"><a class="header-anchor" href="#_4-组件状态" aria-hidden="true">#</a> 4. 组件状态</h3><blockquote><p>目标：</p><ol><li>组件状态概述</li><li>钩子函数概述</li><li>useState</li><li>useEffect</li></ol></blockquote><h4 id="_4-1-组件状态概述" tabindex="-1"><a class="header-anchor" href="#_4-1-组件状态概述" aria-hidden="true">#</a> 4.1 组件状态概述</h4><p>在现实世界中，状态通常是指人或事物表现出来的形态。</p><p>由于组件执行的最终结果就是用户界面，所以组件状态指的就是用户界面的状态。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/21.png" alt="21"></p><p>React 遵循数据驱动DOM的理念，数据的变化会引起试图的更新。在React中，有两个核心的默认属性，分别是state和props。state会记录组件的状态，React根据状态的变化，会对界面做相应的调整或渲染。props则是数据流向属性，React通过props传递来实现父子组件之间的通信。</p><p>所谓的数据则是该组件的状态数据，组件状态数据其实就是组件内部维护的能够驱动视图更新的数据。</p><h4 id="_4-2-钩子函数概述" tabindex="-1"><a class="header-anchor" href="#_4-2-钩子函数概述" aria-hidden="true">#</a> 4.2 钩子函数概述</h4><blockquote><p>目标：</p><ol><li>命名规范</li><li>思想</li><li>代码组织</li></ol></blockquote><p>“hooks” 直译为：“钩子”，是系统在运行到某一时期时，会调用被注册到该师级的回调函数。</p><p>比较常见的钩子有：<code>windows</code> 系统的钩子能监听到系统的各种事件，浏览器提供的 <code>onload</code> 或 <code>addEventListener</code> 能注册在浏览器各种时机被调用的方法。</p><p>在react中的 hooks 为：</p><blockquote><p>一系列以 <code>“use”</code> 作为开头的方法，它们提供了让你可以完全避开 <code>class式写法</code>，在函数式组件中完成生命周期、状态管理、逻辑复用等几乎全部组件开发工作的能力。</p></blockquote><p>就是说提供了在<strong>函数式组件</strong>中完成开发工作的能力。</p><p>React 使用函数作为组件，但是函数自身有重大限制，就是不能持续保存状态，因为函数在执行完成以后内部的局部变量就被释放了。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161600344.png" alt="image-20220325161600344"></p><p>其钩子具有保存状态的功能，因为只有状态被保存了，我们才可以基于现有状态计算新状态，使用新的状态更新视图。</p><h5 id="_1-命名规范" tabindex="-1"><a class="header-anchor" href="#_1-命名规范" aria-hidden="true">#</a> 1. 命名规范</h5><p>通常来说，<code>hooks</code> 的命名都是以 <code>use</code> 作为开头，这个规范也包括了那么我们自定义的 <code>hooks</code>。</p><h5 id="_2-思想" tabindex="-1"><a class="header-anchor" href="#_2-思想" aria-hidden="true">#</a> 2. 思想</h5><p>在 <code>react</code> 官方文档里，对 <code>hooks</code> 的定义和使用提出了 <strong>“一个假设、两个只在”</strong> 核心指导思想。</p><ul><li><strong>一个假设：</strong> 假设任何以 「<code>use</code>」 开头并紧跟着一个大写字母的函数就是一个 <code>Hook</code>。</li><li><strong>第一个只在：</strong> 只在 <code>React</code> 函数组件中调用 <code>Hook</code>，而不在普通函数中调用 <code>Hook</code>。（<code>Eslint</code> 通过判断一个方法是不是大坨峰命名来判断它是否是 <code>React</code> 函数）</li><li><strong>第二个只在：</strong> 只在最顶层使用 <code>Hook</code>，而不要在循环，条件或嵌套函数中调用 Hook。</li></ul><p>因为是约定，因此 <code>useXxx </code>的命名并非强制，你依然可以将你自定义的 <code>hook</code> 命名为 <code>byXxx</code> 或其他方式，但不推荐。</p><h5 id="_3-代码组织" tabindex="-1"><a class="header-anchor" href="#_3-代码组织" aria-hidden="true">#</a> 3. 代码组织</h5><p>项目、模块、页面、功能，如何高效而清晰地组织代码。一个页面中，N件事情的代码在一个组件内互相纠缠确实是在 <code>Hooks</code> 出现之前非常常见的一种状态。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161618693.png" alt="image-20220325161618693"></p><p>（假设每一种颜色就是代码一种高度相关的业务逻辑）</p><p>无论是 <code>vue</code> 还是 <code>react</code>, 通过 <code>Hooks</code> 写法都能做到，将“分散在各种声明周期里的代码块”，通过 <code>Hooks</code> 的方式将相关的内容聚合到一起。</p><p>这样带来的好处是显而易见的：<strong>“高度聚合，可阅读性提升”</strong>。伴随而来的便是 <strong>“效率提升，bug变少”</strong>。</p><h4 id="_4-3-usestate" tabindex="-1"><a class="header-anchor" href="#_4-3-usestate" aria-hidden="true">#</a> 4.3 useState</h4><p><code>React.useState</code> 方法用于声明组件状态数据，通过该方法声明状态数据被更新后触发视图的更新。</p><p>使用示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const [state, setState] = useState(initialState)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>useState 有一个参数（initialState 可以是一个函数，返回一个值，但一般都不会这么用），该参数可以为任意数据类型，一般用作默认值.</li><li>useState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为一个改变state的函数（功能和this.setState一样）</li></ul><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React,{useState} from &quot;react&quot;;\nfunction Example() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><strong>「第一行」:</strong> 引入 React 中的 <code>useState</code> Hook。它让我们在函数组件中存储内部 state。</li><li><strong>「第三行」:</strong> 在 <code>Example</code> 组件内部，通过调用 <code>useState</code> Hook 声明了一个新的 state 变量。它返回一对值给到我们命名的变量上。把变量命名为 <code>count</code>，因为它存储的是点击次数。我们通过传 <code>0</code> 作为 <code>useState</code> 唯一的参数来将其初始化为 <code>0</code>。第二个返回的值本身就是一个函数。它让我们可以更新 <code>count</code> 的值，所以我们命名为 <code>setCount</code>。</li><li><strong>「第七行」:</strong> 当用户点击按钮后，传递一个新的值给 <code>setCount</code>。React 会重新渲染 <code>Example</code> 组件，并把最新的 <code>count</code> 传给它。</li></ul><p>组件状态数据发生变化后会触发视图更新，视图更新意味着组件函数被重新执行，虽然组件函数重新执行了，但是状态变量并没有被释放，组件状态在每次组件函数重新执行后被保留了下来。</p><p>组件中的普通变量就不具备此功能，普通变量被更改后不会触发视图更新，而且当真正的组件状态变化后组件函数重新执行，普通变量也被重置为初始值。</p><p>问题代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [count, setCount] = React.useState(0);\n  let number = 0;\n  console.log(&quot;rerender&quot;, number);\n  return (\n    &lt;&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+1&lt;/button&gt;\n      &lt;button\n        onClick={() =&gt; {\n          number = number + 1;\n          console.log(&quot;onClick&quot;, number);\n        }}\n        &gt;\n        {number}\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>解答：当页面每次触发视图的更新，普通变量都会重新执行并重置为初始值。</p><p>重点：<strong>useState的初始值只有第一次有效</strong></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const Hook =()=&gt;{\n    console.log(&#39;Hook render...&#39;)\n    const [count, setCount] = useState(0)\n    const [name, setName] = useState(&#39;rose&#39;)\n\n    return(\n        &lt;div&gt;\n            &lt;div&gt;\n                {count}\n            &lt;/div&gt;\n            &lt;button onClick={()=&gt;setCount(count+1)}&gt;update count &lt;/button&gt;\n            &lt;button onClick={()=&gt;setName(&#39;jack&#39;)}&gt;update name &lt;/button&gt;\n            &lt;Child data={name}/&gt;\n        &lt;/div&gt;\n    )\n}\n\nconst Child = memo(({data}) =&gt;{\n    console.log(&#39;child render...&#39;, data)\n    const [name, setName] = useState(data)\n    return (\n        &lt;div&gt;\n            &lt;div&gt;child&lt;/div&gt;\n            &lt;div&gt;{name} --- {data}&lt;/div&gt;\n        &lt;/div&gt;\n    );\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/33.png" alt="33"></p><h4 id="_4-4-useeffect" tabindex="-1"><a class="header-anchor" href="#_4-4-useeffect" aria-hidden="true">#</a> 4.4 useEffect</h4><blockquote><p>目标：</p><ol><li>副作用概述</li><li>使用概要</li><li>useEffect 做了什么</li></ol></blockquote><p><em><strong>Effect Hook</strong></em> 可以让你在函数组件中执行副作用（数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作用）操作。</p><p>使用示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useEffect(fn, array)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>useEffect在初次完成渲染之后都会执行一次</strong>, 配合第二个参数可以模拟类的一些生命周期。</p><p>相当于类组件中的<code>componentDidMount</code>，<code>componentDidUpdate</code>，<code>componentWillUnmount</code> 这三个生命周期的集合体。</p><h5 id="_1-副作用概述" tabindex="-1"><a class="header-anchor" href="#_1-副作用概述" aria-hidden="true">#</a> 1. 副作用概述</h5><p>组件的职责就围绕 props 和 state 计算用户界面所需要的状态数据，其他的和渲染用户界面逻辑没有关系的操作都属于副作用。</p><p>比如 Ajax Request、手动修改 DOM、localStorage、console.log、setInterval 等。</p><p>副作用本身不是错误代码，但是如果副作用代码在组件中放置的不是最佳位置，可能导致组件的性能变差。</p><h5 id="_2-使用概要" tabindex="-1"><a class="header-anchor" href="#_2-使用概要" aria-hidden="true">#</a> 2. 使用概要</h5><ul><li><p><code>useEffect</code> 实现 <code>componentDidMount</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useState, useEffect } from &quot;react&quot;;\nfunction Example() {\n  const [count, setCount] = useState(0);\n  useEffect(() =&gt; {\n    console.log(&quot;在组件初次挂载完成后执行&quot;);\n  }, []);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>如果第二个参数为空数组，useEffect相当于类组件里面componentDidMount。</strong></p></li><li><p><code>useEffect</code> 实现 <code>componentDidUpdate</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useState, useEffect } from &quot;react&quot;;\nfunction Example() {\n  const [count, setCount] = useState(0);\n  useEffect(() =&gt; {\n    console.log(&quot;在组件初次挂载完成后执行&quot;);\n  });\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>如果不传第二个参数，useEffect 会在初次渲染和每次更新时，都会执行。</strong></p></li><li><p><code>useEffect</code> 实现 <code>componentWillUnmount</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  React.useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {\n      console.log(&quot;hello&quot;);\n    }, 1000);\n    // 该函数在组件卸载前被执行\n    return () =&gt; clearInterval(timer);\n  }, []);\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;\n      &lt;button onClick={() =&gt;  ReactDOM.unmountComponentAtNode(document.getElementById(&quot;root&quot;))}&gt;卸载组件&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>effect 返回一个函数，React 将会在执行清除操作时调用它。</strong></p></li><li><p>控制 <code>useEffect</code> 执行</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useState, useEffect } from &quot;react&quot;;\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const [number, setNumber] = useState(1);\n  useEffect(() =&gt; {\n    console.log(&quot;只会在cout变化时执行&quot;);\n  }, [count]);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click cout&lt;/button&gt;\n      &lt;button onClick={() =&gt; setNumber(number + 1)}&gt;Click number&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>当第二个参数中添加了依赖，那么只有依赖发生了变化后，useEffect才会执行。</strong></p></li><li><p>使用多个 <code>useEffect</code> 实现关注点分离</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useState, useEffect } from &quot;react&quot;;\nfunction Example() {\n  useEffect(() =&gt; {\n    // 逻辑一\n  });\n  useEffect(() =&gt; {\n    // 逻辑二\n  });\n   useEffect(() =&gt; {\n    // 逻辑三\n  });\n  return (\n    &lt;div&gt;\n      useEffect的使用\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>Hook 允许我们按照代码的用途分离他们，</strong> 而不是像生命周期函数那样。React 将按照 effect 声明的顺序依次调用组件中的<em>每一个</em> effect。</p></li><li><p><code>useEffect</code> 中使用异步函数</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>/* 错误用法 ，effect不支持直接 async await*/\n useEffect(async ()=&gt;{\n        /* 请求数据 */\n      const res = await getData()\n },[])\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>useEffect是不能直接用 async await 语法糖的。useEffect<code>的回调参数返回的是一个清除副作用的</code>clean-up<code>函数。因此无法返回</code>Promise<code>，更无法使用 </code>async/await。</p><ul><li><p>解决方法一（推荐）：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const App = () =&gt; {\n  useEffect(() =&gt; {\n    (async function getDatas() {\n      await getData();\n    })();\n  }, []);\n  return &lt;div&gt;&lt;/div&gt;;\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>解决方法二：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>  useEffect(() =&gt; {\n    const getDatas = async () =&gt; {\n      const data = await getData();\n      setData(data);\n    };\n    getDatas();\n  }, []);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li></ul><h5 id="_3-useeffect-做了什么" tabindex="-1"><a class="header-anchor" href="#_3-useeffect-做了什么" aria-hidden="true">#</a> 3. useEffect 做了什么</h5><p>useEffect 告诉了我们，当 React 组件需要在 <code>渲染后</code> 执行某些操作。React 会保存你传递的函数，并且在执行DOM更新之后调用。</p><h3 id="_5-组件通讯" tabindex="-1"><a class="header-anchor" href="#_5-组件通讯" aria-hidden="true">#</a> 5. 组件通讯</h3><blockquote><p>目标：</p><ol><li>父子通讯</li><li>兄弟通讯</li><li>JSX 扩展运算符</li><li>Context</li></ol></blockquote><p>组件通讯指的是，当组件A中的数据需要流向组件B中并使用，则需要将组件A中的数据传递给组件B，然后组件B再进行使用。</p><p>其传递的方式有很多种，通过 <code>props</code> 、<code>context</code>、 <code>回调函数</code> 等等。</p><h4 id="_5-1-父子通讯" tabindex="-1"><a class="header-anchor" href="#_5-1-父子通讯" aria-hidden="true">#</a> 5.1 父子通讯</h4><p>在 React 应用中，组件与组件之间传递状态数据采用的是单向数据流架构，这是构建 React 应用必须遵循的状态数据传递规范。</p><p>单向数据流指的是状态数据只能在一个方向上传递，就是从上到下，即从父组件到子组件。状态数据不能反向传递，也不能横传递。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161701341.png" alt="image-20220325161701341"></p><p>示例：</p><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Father() {\n    const [message, setMessage] = useState(&quot;Hello&quot;);\n    // 调用子组件并传递数据\n    return &lt;Child msg={message} /&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Child(props) {\n    // 接收来自父组件的 msg 状态数据\n    return &lt;div&gt; {props.msg} &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Child({ msg }) {\n    // 接收来自父组件的 msg 状态数据\n    return &lt;div&gt; {msg} &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>单项数据流意味着子组件无法直接更新父组件传递的状态来实现视图的更新，事实上，props传来的数据是只读的（read only）不能被修改。</p><p>若是子组件想要修改父组件传递下来的状态数据，必须要将修改数据状态的方法传递过去，从而达到子组件更新父组件数据状态并触发视图更新</p><p>示例：</p><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Father() {\n    const [message, setMessage] = useState(&quot;Hello&quot;);\n    // 调用子组件并传递数据\n    return &lt;Child msg={message} setMsg={setMessage} /&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Child(props) {\n    // 接收来自父组件的 msg 状态数据\n    return (\n    \t&lt;&gt;\n        \t&lt;div&gt; {props.msg} &lt;/div&gt;\n        \t&lt;button onClick={()=&gt; props.setMsg(&quot;React&quot;)}&gt;button&lt;/button&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>或：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Child({ msg, setMsg }) {\n    // 接收来自父组件的 msg 状态数据\n    return (\n    \t&lt;&gt;\n        \t&lt;div&gt; {msg} &lt;/div&gt;\n        \t&lt;button onClick={()=&gt; setMsg(&quot;React&quot;)}&gt;button&lt;/button&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161716935.png" alt="image-20220325161716935"></p><ul><li>父组件将初始状态传递给子组件并通过子组件的props或解构的方式渲染用户界面</li><li>当用户进行交互操作时，触发父组件的修改状态</li><li>修改状态出发后更新数据状态并通过props传递到子组件</li><li>最后，视图通信渲染并同步当前状态</li></ul><h4 id="_5-2-兄弟组件" tabindex="-1"><a class="header-anchor" href="#_5-2-兄弟组件" aria-hidden="true">#</a> 5.2 兄弟组件</h4><p>如果要实现兄弟组件直接的数据状态传递需要借助一种思想：状态提升。</p><p>所谓的状态提升就是将兄弟组件直接共享状态提升到最近的公共父组件中，通过公共父组件来维护该状态，然后通过子组件props接收。</p><p>示例：</p><p><code>公共父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Father() {\n    const [person, setPerson] = React.useState({ name: &quot;张三&quot; });\n    return (\n    \t&lt;&gt;\n        \t&lt;ChildFirst person={person} /&gt;\n        \t&lt;ChildSecond person={person} /&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>兄弟组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function ChildFirst({person}) {\n    return &lt;div&gt; {person.name} &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function ChildSecond({person}) {\n    return &lt;div&gt; {person.name} &lt;/div&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_5-3-jsx-扩展运算符" tabindex="-1"><a class="header-anchor" href="#_5-3-jsx-扩展运算符" aria-hidden="true">#</a> 5.3 JSX 扩展运算符</h4><p>在 JSX 中可以使用扩展运算符将对象展开，对象展开后将对象中的每个属性直接传入组件。</p><p>示例1：</p><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const values = { sayHello: &quot;Hello&quot;, sayHi: &quot;hi&quot; };\n  return &lt;Message sayHello={values.sayHello} sayHi={values.sayHi} /&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const values = { sayHello: &quot;Hello&quot;, sayHi: &quot;hi&quot; };\n  return &lt;Message {...values} /&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>示例2：</p><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const values = { sayHello: &quot;Hello&quot;, sayHi: &quot;hi&quot; };\n  return &lt;Message {...values} /&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Message(props) {\n  return &lt;Button {...props} /&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>孙子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function Button(props) {\n  return &lt;pre&gt;{JSON.stringify(props, null, 2)}&lt;/pre&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_5-4-context" tabindex="-1"><a class="header-anchor" href="#_5-4-context" aria-hidden="true">#</a> 5.4 Context</h4><blockquote><p>目标：</p><ol><li>prop drilling 概述</li><li>context 概述</li><li>context 使用</li></ol></blockquote><h5 id="_1-props-drilling-概述" tabindex="-1"><a class="header-anchor" href="#_1-props-drilling-概述" aria-hidden="true">#</a> 1. props drilling 概述</h5><p>在之前的组件状态提升并不适用，并且会使层级关系变得更加复杂，并且使无关的组件参与到了状态传递的过程，我们通常称这种情况为 <code>props drilling</code></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161756074.png" alt="image-20220325161756074"></p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// Application: 应用页面级组件\nfunction Application() {\n  const userName = &quot;John Smith&quot;;\n  return &lt;Layout userName={userName}&gt;Main content&lt;/Layout&gt;;\n}\n// Layout: 应用布局组件\nfunction Layout({ children, userName }) {\n  return (\n    &lt;div&gt;\n      &lt;Header userName={userName} /&gt;\n      &lt;main&gt;{children}&lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n// Header 头部组件\nfunction Header({ userName }) {\n  return (\n    &lt;header&gt;\n      &lt;UserInfo userName={userName} /&gt;\n    &lt;/header&gt;\n  );\n}\n// UserInfo: 用户信息组件\nfunction UserInfo({ userName }) {\n  return &lt;span&gt;{userName}&lt;/span&gt;;\n}\n// 渲染应用级页面组件 Application\nReactDOM.render(&lt;Application /&gt;, document.getElementById(&quot;root&quot;));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h5 id="_2-context-概述" tabindex="-1"><a class="header-anchor" href="#_2-context-概述" aria-hidden="true">#</a> 2. Context 概述</h5><p>为了解决以上问题，React 提供了 Context（上下文），允许组件访问全局状态并通过全局状态变化而更新视图。</p><p>无论组件嵌套有多深，都可以通过Context 传递数据</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161810871.png" alt="image-20220325161810871"></p><h5 id="_3-context-使用" tabindex="-1"><a class="header-anchor" href="#_3-context-使用" aria-hidden="true">#</a> 3. Context 使用</h5><p>使用实例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const value = useContext(MyContext);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',266),t=(0,a.Uk)("接收一个 context 对象（"),r=(0,a._)("code",null,"React.createContext",-1),p=(0,a.Uk)(" 的返回值）并返回该 context 的当前值。当组件上层最近的 "),c=(0,a._)("code",null,"<MyContext.Provider>",-1),i=(0,a.Uk)(" 更新时，该 Hook 会触发重渲染，并使用最新传递给 "),u=(0,a._)("code",null,"MyContext",-1),o=(0,a.Uk)(" provider 的 context "),b=(0,a._)("code",null,"value",-1),m=(0,a.Uk)(" 值。即使祖先使用 "),d={href:"https://link.juejin.cn?target=https%3A%2F%2Freact.docschina.org%2Fdocs%2Freact-api.html%23reactmemo",target:"_blank",rel:"noopener noreferrer"},g=(0,a._)("code",null,"React.memo",-1),h=(0,a.Uk)(" 或 "),v={href:"https://link.juejin.cn?target=https%3A%2F%2Freact.docschina.org%2Fdocs%2Freact-component.html%23shouldcomponentupdate",target:"_blank",rel:"noopener noreferrer"},f=(0,a._)("code",null,"shouldComponentUpdate",-1),k=(0,a.Uk)("，也会在组件本身使用 "),x=(0,a._)("code",null,"useContext",-1),q=(0,a.Uk)(" 时重新渲染。"),S=(0,a.uE)('<p>别忘记 <code>useContext</code> 的参数必须是 <em>context 对象本身</em>：</p><ul><li><strong>正确：</strong> <code>useContext(MyContext)</code></li><li><strong>错误：</strong> <code>useContext(MyContext.Consumer)</code></li><li><strong>错误：</strong> <code>useContext(MyContext.Provider)</code></li></ul><p>第一步：通过 <code>createContext </code>创建 <code>Context</code>，并提供默认值：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 创建 Context 对象\n// createContext 方法的参数就是默认的状态值\nconst Context = React.createContext(&quot;Default Value&quot;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>第二步：组件通过 <code>React.useContext</code> 方法获取默认状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  // 组件通过 useContext 方法获取 Context 提供的默认状态\n  const value = React.useContext(Context);\n  return &lt;div&gt;{value}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第三步：通过 <code>Context.Provider</code> 组件提供全局状态，实现组件访问。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 创建 Context 对象存储默认状态值\nconst Context = React.createContext(&quot;Default Value&quot;);\n\nfunction App() {\n  const value = &quot;My Context Value&quot;;\n  // 通过 Context.Provider 组件提供状态, 该状态值会覆盖默认状态值\n  return (\n    &lt;Context.Provider value={value}&gt;\n      &lt;MyComponent /&gt;\n    &lt;/Context.Provider&gt;\n  );\n}\n\nfunction MyComponent() {\n  // 下层组件获取 Context 全局状态值\n  const value = React.useContext(Context);\n  return &lt;div&gt;{value}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_6-表单控制" tabindex="-1"><a class="header-anchor" href="#_6-表单控制" aria-hidden="true">#</a> 6. 表单控制</h3><blockquote><p>目标：</p><ol><li>受控表单组件</li><li>非受控表单组件</li></ol></blockquote><h4 id="_6-1-受控表单组件" tabindex="-1"><a class="header-anchor" href="#_6-1-受控表单组件" aria-hidden="true">#</a> 6.1 受控表单组件</h4><blockquote><p>目标：</p><ol start="0"><li><p>受控表单三步骤</p></li><li><p>text</p></li><li><p>password</p></li><li><p>textarea</p></li><li><p>select</p></li><li><p>radio</p></li><li><p>checkbox</p></li><li><p>submit</p></li><li><p>reset</p></li></ol></blockquote><p>在 React 组件中使用表单元素时，为了获取表单控件的值，常常会将表单控件和组件状态进行绑定，通过该方式使用表单的组件叫做受控表单组件。</p><h5 id="_0-受控表单三步骤" tabindex="-1"><a class="header-anchor" href="#_0-受控表单三步骤" aria-hidden="true">#</a> 0. 受控表单三步骤：</h5><ol><li><p>定义保存 input 值的状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const [value, setValue] = useState(&quot;&quot;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>创建事务处理程序，该事件处理程序在值更改时更新状态</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const handleChange = (event) =&gt; setValue(event.target.value);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>为 input 分配字段状态值并添加事件处理程序</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;input type=&quot;text&quot; value={value} onChange={handleChange} /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h5 id="_1-text-文本框" tabindex="-1"><a class="header-anchor" href="#_1-text-文本框" aria-hidden="true">#</a> 1. Text 文本框</h5><p>示例代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [username, setUsername] = React.useState(&quot;&quot;);\n  const handleChange = (event) ={\n      setUsername(event.target.value)\n  }\n  return (\n    &lt;input\n      type=&quot;text&quot;\n      value={username}\n      onChange={handleChange}\n    /&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="_2-password-密码框" tabindex="-1"><a class="header-anchor" href="#_2-password-密码框" aria-hidden="true">#</a> 2. Password 密码框</h5><p><code>原始写法实例：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n    const [formState, setFormState] = useState({\n        usename: &quot;&quot;,\n        password: &quot;&quot;,\n    })\n    const handleChangeUsername = (event) =&gt; {\n        setFormState({\n            ...formState,\n            username: event.target.value\n        })\n    }\n    const handleChangePasswrod = (event) =&gt; {\n        setFormState({\n            ...formState,\n            password: event.target.value\n        })\n    }\n    \n    return (\n    \t&lt;&gt;\n        \t&lt;input \n                type=&quot;text&quot; \n                value={formState.username}\n                onChange={handleChangeUsername}\n               /&gt;\n        \t&lt;input \n                type=&quot;password&quot; \n                value={formState.password}\n                onChange={handleChangePasswrod}\n               /&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>以上这种方法过于麻烦，且代码<strong>冗余</strong>，因为 event 事件对象我们可以获取到元素的 DOM 对象，可以通过表单组件上的name属性进行进一步的简化过程：</p><p><code>简化代码：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n    const [formState, setFormState] = useState({\n        usename: &quot;&quot;,\n        password: &quot;&quot;,\n    })\n    const handleChangeFormState = (event) =&gt; {\n        setFormState({\n            ...formState,\n            [event.target.name]: event.target.value\n        })\n    }\n    \n    return (\n    \t&lt;&gt;\n        \t&lt;input \n                type=&quot;text&quot; \n                name=&quot;username&quot;\n                value={formState.username}\n                onChange={handleChangeFormState}\n               /&gt;\n        \t&lt;input \n                type=&quot;password&quot; \n                name=&quot;password&quot;\n                value={formState.password}\n                onChange={handleChangeFormState}\n               /&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h5 id="_3-textarea-文本域" tabindex="-1"><a class="header-anchor" href="#_3-textarea-文本域" aria-hidden="true">#</a> 3. Textarea 文本域</h5><p>示例代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [formState, setFormState] = React.useState({\n    textarea: &quot;&quot;,\n  });\n  const handleChangeFormState = (event) =&gt; {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n  return &lt;textarea name=&quot;textarea&quot; value={formState.textarea} onChange={onChangeHandler}&gt;&lt;/textarea&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_4-select-下拉框" tabindex="-1"><a class="header-anchor" href="#_4-select-下拉框" aria-hidden="true">#</a> 4. Select 下拉框</h5><p>示例代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [formState, setFormState] = React.useState({\n    select: &quot;&quot;,\n  });\n  const handleChangeFormState = (event) =&gt; {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n  return (\n    &lt;select\n      name=&quot;select&quot;\n      value={formState.select}\n      onChange={handleChangeFormState}\n      &gt;\n      {/* 默认值 */}\n      &lt;option value=&quot;&quot;&gt;请选择交通方式&lt;/option&gt;\n      &lt;option value=&quot;0&quot;&gt;火车&lt;/option&gt;\n      &lt;option value=&quot;1&quot;&gt;飞机&lt;/option&gt;\n    &lt;/select&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="_5-radio-单选框" tabindex="-1"><a class="header-anchor" href="#_5-radio-单选框" aria-hidden="true">#</a> 5. Radio 单选框</h5><p>示例代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [formState, setFormState] = React.useState({\n    radio: &quot;&quot;,\n  });\n  const handleChangeFormState = (event) =&gt; {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n  return (\n    &lt;&gt;\n    \t&lt;input type=&quot;radio&quot; name=&quot;radio&quot; value=&quot;m&quot;  onChange={handleChangeFormState} /&gt;\n    \t&lt;span&gt;M&lt;/span&gt;\n    \t&lt;input type=&quot;radio&quot; name=&quot;radio&quot; value=&quot;s&quot; onChange={handleChangeFormState} /&gt;\n    \t&lt;span&gt;S&lt;/span&gt;\n\t\t&lt;/&gt;\n\t);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="_6-checkbox-多选框" tabindex="-1"><a class="header-anchor" href="#_6-checkbox-多选框" aria-hidden="true">#</a> 6. Checkbox 多选框</h5><blockquote><p>目标：</p><ol><li>单独使用</li><li>多个使用</li></ol></blockquote><ul><li><p>checkbox 单独使用，比如是否同意协议、是否记住密码、是否保持登录状态等等，在这种情况下 checkbox 绑定布尔值。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [formState, setFormState] = React.useState({\n    checkbox: false,\n  });\n  const handleChangeFormState = (event) =&gt; {\n    // 如果表单控件是复选框, 获取 checked 属性的值作为 value\n    const value =\n          event.target.type === &quot;checkbox&quot;\n    ? event.target.checked\n    : event.target.value;\n      \n    setFormState({\n      ...formState,\n      [event.target.name]: value,\n    });\n  };\n  return (\n    &lt;input\n      type=&quot;checkbox&quot;\n      name=&quot;checkbox&quot;\n      checked={formState.checkbox}\n      onChange={handleChangeFormState}\n      /&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li><li><p>多个复选框一起使用，表示用户选择了多个属性符合</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 模拟数据 爱好数组\nconst data = [\n  { id: 1, title: &quot;足球&quot; },\n  { id: 2, title: &quot;篮球&quot; },\n  { id: 3, title: &quot;橄榄球&quot; },\n];\nfunction App() {\n  // 声明表单状态\n  const [formState, setFormState] = React.useState({\n    hobbies: [],\n  });\n  // 爱好数组映射, 爱好数组中有多少爱好, 该状态数组中就有多少布尔值与之对应, 表示对应的爱好当前的选中状态是什么\n  const [checkedState, setCheckedState] = React.useState(\n    new Array(data.length).fill(false)\n  );\n  // 用于选择爱好后执行的事件处理函数\n  const hobbyChangeHandler = (index) =&gt; {\n    // index 为用户更改的爱好在原数组中的索引\n    // 根据 index 找到爱好对应的布尔值, 取反, 返回新的爱好数组对应的是否选中的状态布尔值数组\n    const updatedCheckedState = checkedState.map((checked, i) =&gt;  i === index ? !checked : checked);\n    // 更新爱好状态布尔值数组, 供下次用户选择时使用\n    setCheckedState(updatedCheckedState);\n    // 根据爱好布尔值状态数组, 从原数组中找到用户选中的爱好 id\n    const udpatedHobbies = updatedCheckedState.reduce(\n      (result, checked, index) =&gt; {\n        if (checked) result.push(data[index].id);\n        return result;\n      },\n      []\n    );\n    // 更新表单状态\n    setFormState({ ...formState, hobbies: udpatedHobbies });\n  };\n  return (\n    &lt;&gt;\n      {data.map((item, index) =&gt; (\n        &lt;p key={item.id}&gt;\n          &lt;input\n            type=&quot;checkbox&quot;\n            onChange={() =&gt; hobbyChangeHandler(index)}\n            /&gt;\n          {item.title}\n        &lt;/p&gt;\n    \t))}\n  \t&lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div></li></ul><h5 id="_7-submit-表单提交" tabindex="-1"><a class="header-anchor" href="#_7-submit-表单提交" aria-hidden="true">#</a> 7. Submit 表单提交</h5><p>示例代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [formState, setFormState] = React.useState({\n    username: &quot;&quot;,\n  });\n  const handleChangeFormState = (event) =&gt; {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n  const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    console.log(formState);\n  };\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=&quot;text&quot;\n        name=&quot;username&quot;\n        value={formState.username}\n        onChange={handleChangeFormState}\n        /&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h5 id="_8-reset-重置表单" tabindex="-1"><a class="header-anchor" href="#_8-reset-重置表单" aria-hidden="true">#</a> 8. Reset 重置表单</h5><p>示例代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const initialState = {\n  username: &quot;&quot;,\n};\nfunction App() {\n  const [formState, setFormState] = React.useState(initialState);\n  const handleChangeFormState = (event) =&gt; {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n  const onResetHandler = (event) =&gt; {\n    setFormState(initialState);\n  };\n  return (\n    &lt;form&gt;\n      &lt;input\n        type=&quot;text&quot;\n        name=&quot;username&quot;\n        value={formState.username}\n        onChange={handleChangeFormState}\n        /&gt;\n      &lt;button type=&quot;button&quot; onClick={onResetHandler}&gt;\n        重置\n      &lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="_2-6-2-非受控表单组件" tabindex="-1"><a class="header-anchor" href="#_2-6-2-非受控表单组件" aria-hidden="true">#</a> 2.6.2 非受控表单组件</h4><blockquote><ol><li>useRef</li><li>forwardRef</li><li>非受控表单组件</li></ol></blockquote><h5 id="_1-useref" tabindex="-1"><a class="header-anchor" href="#_1-useref" aria-hidden="true">#</a> 1. useRef</h5><p>使用 useRef 可以获取元素的 DOM 对象</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRef } from &#39;react&#39;;\n\nfunction App () {\n  const username = useRef();\n  const handler = () =&gt; console.log(username); // {current: input}\n  return &lt;input ref={username} onChange={handler}/&gt;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_2-forwardref" tabindex="-1"><a class="header-anchor" href="#_2-forwardref" aria-hidden="true">#</a> 2. forwardRef</h5><p>通过 forwardRef 可以实现获取子元素的 DOM 对象</p><p><code>父元素：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect, useRef } from &quot;react&quot;;\nimport Message from &quot;./Message&quot;;\n\nfunction App() {\n  const messageRef = useRef();\n  useEffect(() =&gt; {\n    console.log(messageRef.current);\n  }, []);\n  return &lt;Message ref={messageRef} /&gt;;\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>子元素：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { forwardRef } from &quot;react&quot;;\n\nfunction Message(props, ref) {\n  return &lt;span ref={ref}&gt;I am span&lt;/span&gt;;\n}\nexport default forwardRef(Message);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_3-非受控表单组件" tabindex="-1"><a class="header-anchor" href="#_3-非受控表单组件" aria-hidden="true">#</a> 3. 非受控表单组件</h5><p>在 React 中受控表单组件使用起来很方便但也相对复杂，如果表单本身比较简单也可以使用非受控表单组件，非受控表单组件就是表单控件不和组件状态进行绑定，就使用原生的表单 DOM 对象存储用户输入的值。</p><p>示例代码:</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const usernameRef = React.useRef();\n  const onSubmitHandler = (event) =&gt; {\n    event.preventDefault();\n    console.log(usernameRef.current.value);\n  };\n  return (\n    &lt;form onSubmit={onSubmitHandler}&gt;\n      &lt;input type=&quot;text&quot; ref={usernameRef} /&gt;\n      &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_7-样式控制" tabindex="-1"><a class="header-anchor" href="#_7-样式控制" aria-hidden="true">#</a> 7. 样式控制</h3><blockquote><p>目标：</p><ol><li>CSS stylesheets</li><li>Inline styling</li><li>CSS Modules</li><li>classnames</li></ol></blockquote><p>React 提供了很多种方式让开发者通过 JS 操作进行CSS的操作。</p><h4 id="_7-1-css-stylesheets" tabindex="-1"><a class="header-anchor" href="#_7-1-css-stylesheets" aria-hidden="true">#</a> 7.1 CSS stylesheets</h4><p>在 JS 文件中通过 import 关键字导入 CSS 样式表，改样式表的作用范围是 全局</p><p><code>src/styles.css:</code></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.button</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #5cb85c<span class="token punctuation">;</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.42857143<span class="token punctuation">;</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>src/index:</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./styles.css&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>src/App.jsx</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  return &lt;button class=&quot;button&quot;&gt;button&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_7-2-inline-styling" tabindex="-1"><a class="header-anchor" href="#_7-2-inline-styling" aria-hidden="true">#</a> 7.2 Inline styling</h4><p>通过 style 属性为元素添加行内式样式，同时可以进行JS逻辑的编写</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nfunction App() {\n  const [state, setState] = useState({\n    colors: [&quot;palevioletred&quot;, &quot;yellow&quot;, &quot;papayawhip&quot;],\n    index: 0,\n  });\n  const styles = {\n    width: 200,\n    padding: &quot;50px 0&quot;,\n    background: state.colors[state.index],\n    textAlign: &quot;center&quot;,\n  };\n  const onClickHandler = () =&gt; {\n    setState({\n      ...state,\n      index: state.index + 1 &gt; state.colors.length - 1 ? 0 : state.index + 1,\n    });\n  };\n  return (\n    &lt;div style={styles} onClick={onClickHandler}&gt;\n      Hello React\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="_7-3-css-module" tabindex="-1"><a class="header-anchor" href="#_7-3-css-module" aria-hidden="true">#</a> 7.3 CSS Module</h4><p>通过 CSS 模块可以实现组件级样式，样式文件名称规范：<code>[name].module.css</code></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.button</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #5cb85c<span class="token punctuation">;</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.42857143<span class="token punctuation">;</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>src/App.jsx:</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// App.js\nimport styles from &quot;./App.module.css&quot;;\n\nfunction App() {\n  return &lt;button className={styles.button}&gt;button&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_7-4-classnames" tabindex="-1"><a class="header-anchor" href="#_7-4-classnames" aria-hidden="true">#</a> 7.4 classnames</h4><p>通过第三方的插件 <code>classnames</code> 实现属性值的动态绑定</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> classnames\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_8-传送门组件" tabindex="-1"><a class="header-anchor" href="#_8-传送门组件" aria-hidden="true">#</a> 8. 传送门组件</h3><blockquote><p>目标：</p><ol><li>已知问题</li><li>组件应用</li></ol></blockquote><p>React Portal 之所以叫 Portal，因为其功能就是和 “传送门” 原理一样：<strong>render 到一个组件里面，实际上改变的是网页上另一处的 DOM 结构</strong>。</p><p>其作用就是，当某个组件需要一个弹出框且弹出框不受任何组件的影响，其中的原因就是：如果放置到组件内部会收到组件的 CSS 样式影响如：position、transition等属性。</p><h4 id="_8-1-已知问题" tabindex="-1"><a class="header-anchor" href="#_8-1-已知问题" aria-hidden="true">#</a> 8.1 已知问题</h4><p>需求: 在 App 组件中点击按钮渲染弹框组件。</p><p>问题: 弹框组件被渲染到 App 组件内部，弹框组件的样式受到了 App 组件元素的影响，导致布局错乱。</p><p><code>期望结果：</code></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/28.png" alt="28"></p><p><code>实际结果：</code></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/29.png" alt="29"></p><p><code>src/App.js：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\nimport Modal from &quot;./Modal&quot;;\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const appStyles = { width: &quot;60%&quot;, height: 400, transform: &quot;translate(0,0)&quot; };\n  return (\n    &lt;div style={appStyles}&gt;\n      &lt;button onClick={() =&gt; setIsOpen(!isOpen)}&gt;open modal&lt;/button&gt;\n      {isOpen ? &lt;Modal /&gt; : null}\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>src/Modal.js：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import styles from &quot;./Modal.module.css&quot;;\n\nfunction Modal() {\n  return (\n    &lt;div className={styles.overlayer}&gt;\n      &lt;div className={styles.content}&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Modal;\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code> src/Modal.module.css：</code></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.overlayer</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>\n  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.content</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>\n  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>\n  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>\n  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_8-2-组件应用" tabindex="-1"><a class="header-anchor" href="#_8-2-组件应用" aria-hidden="true">#</a> 8.2 组件应用</h4><p>通过 React 提供的方法，createPortal 将弹出框渲染到指定DOM元素位置。</p><p><code>public/index.html：</code></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>portal-root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>src/Modal.jsx：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import styles from &quot;./Modal.module.css&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\n\nfunction Modal() {\n  return ReactDOM.createPortal(\n    &lt;div className={styles.overlayer}&gt;\n      &lt;div className={styles.content}&gt;&lt;/div&gt;\n    &lt;/div&gt;,\n    document.getElementById(&quot;portal-root&quot;)\n  );\n}\nexport default Modal;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',102),C={},y=(0,e(3744).Z)(C,[["render",function(n,s){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[t,r,p,c,i,u,o,b,m,(0,a._)("a",d,[g,(0,a.Wm)(e)]),h,(0,a._)("a",v,[f,(0,a.Wm)(e)]),k,x,q]),S],64)}]])}}]);