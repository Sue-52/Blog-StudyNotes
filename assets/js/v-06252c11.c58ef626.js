"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[2505],{4231:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-06252c11",path:"/docs/02.Front-endFrameKnowledge/02.React/09.React%20Populer%20Tools.html",title:"React Populer Tools -- React 流行库",lang:"en-US",frontmatter:{title:"React Populer Tools -- React 流行库",date:"2022-04-12T18:15:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React Populer Tools -- React 流行库",slug:"react-populer-tools-react-流行库",children:[{level:3,title:"1 Styled Components",slug:"_1-styled-components",children:[]},{level:3,title:"2. React Hook Form",slug:"_2-react-hook-form",children:[]},{level:3,title:"3. React Spring",slug:"_3-react-spring",children:[]},{level:3,title:"4. React Query",slug:"_4-react-query",children:[]},{level:3,title:"5 React Modal",slug:"_5-react-modal",children:[]},{level:3,title:"6 React Player",slug:"_6-react-player",children:[]},{level:3,title:"7 React Datepicker",slug:"_7-react-datepicker",children:[]},{level:3,title:"8 React Table",slug:"_8-react-table",children:[]}]}],git:{createdTime:1649757666e3,updatedTime:1650241335e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:3}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/09.React Populer Tools.md"}},495:(n,s,a)=>{a.r(s),a.d(s,{default:()=>cn});var e=a(6252);const r=(0,e.uE)('<h2 id="react-populer-tools-react-流行库" tabindex="-1"><a class="header-anchor" href="#react-populer-tools-react-流行库" aria-hidden="true">#</a> React Populer Tools -- React 流行库</h2><blockquote><ol><li>Styled Components</li><li>React Hook Form</li><li>React Spring</li><li>React Query</li><li>React Modal</li><li>React Player</li><li>React Datepicker</li><li>React Table</li></ol></blockquote><h3 id="_1-styled-components" tabindex="-1"><a class="header-anchor" href="#_1-styled-components" aria-hidden="true">#</a> 1 Styled Components</h3><h4 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h4>',4),l={href:"https://styled-components.com/",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("styled-components"),t=(0,e.Uk)(" 允许开发者通过创建组件的方式为元素添加样式, 创建出来的组件叫做样式化组件。"),u=(0,e.uE)('<p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412174755667.png" alt="image-20220412174755667"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save styled-components\n<span class="token function">yarn</span> <span class="token function">add</span> styled-components\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_1-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-2-基本使用" aria-hidden="true">#</a> 1.2 基本使用</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412174830211.png" alt="image-20220412174830211"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 创建样式化组件\nimport styled from &quot;styled-components&quot;;\n\nexport const Wrapper = styled.div`\n  padding: 30px;\n  background: papayawhip;\n`;\n\nexport const Title = styled.h1`\n  font-size: 24px;\n  color: palevioletred;\n  text-align: center;\n  margin: 0;\n`;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// 使用样式化组件\nfunction App() {\n  return (\n    &lt;Wrapper&gt;\n      &lt;Title&gt;Hello, styled-components&lt;/Title&gt;\n    &lt;/Wrapper&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_1-3-根据属性适配样式" tabindex="-1"><a class="header-anchor" href="#_1-3-根据属性适配样式" aria-hidden="true">#</a> 1.3 根据属性适配样式</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175759252.png" alt="image-20220412175759252"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export const Button = styled.button`\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  padding: 10px 15px;\n  background-color: ${(props) =&gt; (props.primary ? &quot;palevioletred&quot; : &quot;white&quot;)};\n  color: ${(props) =&gt; (props.primary ? &quot;white&quot; : &quot;palevioletred&quot;)};\n`;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  return (\n    &lt;&gt;\n      &lt;Button primary&gt;Primary Button&lt;/Button&gt;\n    \t&lt;Button&gt;Primary Button&lt;/Button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412174852002.png" alt="image-20220412174852002"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export const Input = styled.input`\n  border: none;\n  border-radius: 3px;\n  padding: 10px;\n  background-color: papayawhip;\n  color: ${(props) =&gt; props.color || &quot;palevioletred&quot;};\n`;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  return (\n    &lt;&gt;\n      &lt;Input defaultValue=&quot;Hello&quot; type=&quot;text&quot; color=&quot;rebeccapurple&quot; /&gt;\n      &lt;Input defaultValue=&quot;styled-components&quot; type=&quot;text&quot; /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_1-4-扩展样式化组件" tabindex="-1"><a class="header-anchor" href="#_1-4-扩展样式化组件" aria-hidden="true">#</a> 1.4 扩展样式化组件</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412174902542.png" alt="image-20220412174902542"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export const Button = styled.button`\n  color: palevioletred;\n  background-color: #fff;\n  font-size: 18px;\n  padding: 15px 20px;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nexport const TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Button, TomatoButton } from &quot;./components/Wrapper&quot;;\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Button&gt;Button&lt;/Button&gt; &lt;TomatoButton&gt;TomatoButton&lt;/TomatoButton&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_1-5-为任何组件设置样式" tabindex="-1"><a class="header-anchor" href="#_1-5-为任何组件设置样式" aria-hidden="true">#</a> 1.5 为任何组件设置样式</h4><p>styled 方法不仅可以创建样式化组件，它还可以为普通的 React 组件设置样式。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import styled from &quot;styled-components&quot;;\n\nconst Link = ({ className, children }) =&gt; {\n  return (\n    &lt;a href=&quot;http://www.example.com&quot; className={className}&gt;\n      {children}\n    &lt;/a&gt;\n  );\n};\n\nconst StyledLink = styled(Link)`\n  color: palevioletred;\n  font-weight: bold;\n`;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-react-hook-form" tabindex="-1"><a class="header-anchor" href="#_2-react-hook-form" aria-hidden="true">#</a> 2. React Hook Form</h3><h4 id="_2-1-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-概述" aria-hidden="true">#</a> 2.1 概述</h4>',22),c={href:"https://react-hook-form.com/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("React Hook Form"),o=(0,e.Uk)(" 是 React 生态圈中最为流行的表单构建工具，用于简化 React 表单代码复杂冗余的问题。"),b=(0,e.uE)('<p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412174913209.png" alt="image-20220412174913209"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-hook-form\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_2-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-2-基本使用" aria-hidden="true">#</a> 2.2 基本使用</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useForm } from &quot;react-hook-form&quot;;\n\nfunction App() {\n  const { register, handleSubmit, watch } = useForm({\n    defaultValues: {\n      username: &quot;张三&quot;,\n      isAgree: true,\n      hobbies: [],\n      gender: &quot;男&quot;,\n      transport: &quot;&quot;,\n    },\n  });\n  const onSubmit = handleSubmit((data) =&gt; {\n    console.log(data);\n  });\n  \t\n  const username = watch(&quot;username&quot;);\n  useEffect(() =&gt; {\n    console.log(username);\n  }, [username]);\n  \n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      &lt;input type=&quot;text&quot; {...register(&quot;username&quot;)} /&gt;\n      &lt;input type=&quot;checkbox&quot; {...register(&quot;isAgree&quot;)} /&gt;\n      &lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; {...register(&quot;hobbies&quot;)} /&gt;\n      &lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; {...register(&quot;hobbies&quot;)} /&gt;\n      &lt;input type=&quot;radio&quot; value=&quot;男&quot; {...register(&quot;gender&quot;)} /&gt;\n      &lt;input type=&quot;radio&quot; value=&quot;女&quot; {...register(&quot;gender&quot;)} /&gt;\n      &lt;select {...register(&quot;transport&quot;)}&gt;\n        &lt;option value=&quot;&quot;&gt;请选择交通工具&lt;/option&gt;\n        &lt;option value=&quot;火车&quot;&gt;火车&lt;/option&gt;\n        &lt;option value=&quot;飞机&quot;&gt;飞机&lt;/option&gt;\n        &lt;option value=&quot;自驾&quot;&gt;自驾&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h4 id="_2-3-表单验证" tabindex="-1"><a class="header-anchor" href="#_2-3-表单验证" aria-hidden="true">#</a> 2.3 表单验证</h4><p>表单验证支持以下字段：required、min、max、minLength、maxLength、pattern、validate</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useForm } from &quot;react-hook-form&quot;;\n\nfunction App() {\n  const { formState: { errors } } = useForm({\n     // 控制触发表单验证的时机\n    // onSubmit onBlur onTouched onChange all\n    mode: &quot;onChange&quot;,\n  });\n  // 表单提交触发表单验证, 表单提交后触发表单实时验证\n  const onSubmit = handleSubmit((data) =&gt; {\n    // 在表单验证没有通过的情况下是不会调用该回调函数的\n  });\n  \n  // 注册用户名字段\n  const usernameRegister = register(&quot;username&quot;, {\n    required: &quot;用户名不能为空&quot;,\n    maxLength: {\n      value: 6,\n      message: &quot;用户名最大长度是6&quot;,\n    },\n    pattern: {\n      value: /^[A-Za-z]+$/i,\n      message: &quot;用户名只能包含字母&quot;,\n    },\n  });\n  \n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      &lt;input type=&quot;text&quot; {...usernameRegister} /&gt;\n      {errors.username &amp;&amp; &lt;span&gt;{errors.username.message}&lt;/span&gt;}\n      &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useForm } from &quot;react-hook-form&quot;;\n\nfunction App() {\n  const { watch } = useForm({\n    // 设置表单控件的默认值\n    defaultValues: {\n      password: &quot;&quot;,\n      rePassword: &quot;&quot;,\n    },\n  });\n\n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      &lt;input\n        type=&quot;password&quot;\n        {...register(&quot;password&quot;, {\n          pattern: {\n            value: /^[A-Za-z0-9]+$/,\n            message: &quot;密码必须是数字或字母&quot;,\n          },\n        })}\n      /&gt;\n      {errors.password?.message}\n      &lt;input\n        type=&quot;password&quot;\n        {...register(&quot;rePassword&quot;, {\n          validate: (value) =&gt;\n            value === watch(&quot;password&quot;) || &quot;两次密码输入不一样&quot;,\n        })}\n      /&gt;\n      {errors.rePassword?.message}\n      &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="_2-4-设置表单值" tabindex="-1"><a class="header-anchor" href="#_2-4-设置表单值" aria-hidden="true">#</a> 2.4 设置表单值</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useForm } from &quot;react-hook-form&quot;;\n\nfunction App() {\n  const { setValue, reset } = useForm({\n    // 设置表单控件的默认值\n    defaultValues: {\n      username: &quot;&quot;,\n      isAgree: false,\n    },\n  });\n\n  const onClickHandler = () =&gt; {\n    // 设置单个表单控件的值\n    // setValue(&quot;username&quot;, &quot;张三&quot;);\n    // 同时设置多个表单控件的值\n    reset({ username: &quot;张三&quot;, isAgree: true });\n  };\n\n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      &lt;input type=&quot;text&quot; {...register(&quot;username&quot;)} /&gt;\n      &lt;input type=&quot;checkbox&quot; {...register(&quot;isAgree&quot;)} /&gt;\n      &lt;button type=&quot;button&quot; onClick={onClickHandler}&gt;设置表单值&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_2-5-useformcontext" tabindex="-1"><a class="header-anchor" href="#_2-5-useformcontext" aria-hidden="true">#</a> 2.5 useFormContext</h4><p>通过 <code>useFormContext</code> 可以获取到表单上下文。</p><p>在表单内部有嵌套结构的情况下，将表单上下文作为 props 传递非常不方便。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { FormProvider, useForm, useFormContext } from &quot;react-hook-form&quot;;\n\nfunction App() {\n  const methods = useForm({\n    defaultValues: {\n      username: &quot;&quot;,\n      password: &quot;&quot;,\n    },\n  });\n  const onSubmit = methods.handleSubmit((data) =&gt; {\n    console.log(data);\n  });\n  return (\n    &lt;FormProvider {...methods}&gt;\n      &lt;form onSubmit={onSubmit}&gt;\n        &lt;input type=&quot;text&quot; {...methods.register(&quot;username&quot;)} /&gt;\n        &lt;Password /&gt;\n        &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/FormProvider&gt;\n  );\n}\n\nfunction Password() {\n  const { register } = useFormContext();\n  return &lt;input type=&quot;password&quot; {...register(&quot;password&quot;)} /&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="_3-react-spring" tabindex="-1"><a class="header-anchor" href="#_3-react-spring" aria-hidden="true">#</a> 3. React Spring</h3><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412174925132.png" alt="image-20220412174925132"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-spring@9.4.3 styled-components@5.3.3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useSpring\n// 创建单元素动画, 将元素从一个状态转换为另一个状态\nuseSprings\n// 创建多元素动画, 将多个元素同时从一个状态转换为另一个状态\nuseTrail\n// 创建多元素动画, 多个元素的动画依次执行\nuseTransition\n// 创建入场、离场动画, 可以是单元素入场、离场动画，也可以是多元素入场离场动画\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-1-usespring" tabindex="-1"><a class="header-anchor" href="#_3-1-usespring" aria-hidden="true">#</a> 3.1 useSpring</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/13.gif" alt="13"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useSpring, animated } from &quot;react-spring&quot;;\nimport { useState } from &quot;react&quot;;\n\nfunction App() {\n  const [toggle, setToggle] = useState(false);\n  const styles = useSpring({\n    backgroundSize: toggle ? &quot;150%&quot; : &quot;100%&quot;,\n  });\n  return (\n    &lt;animated.div\n      onMouseEnter={() =&gt; setToggle(true)}\n      onMouseLeave={() =&gt; setToggle(false)}\n      style={{\n        width: 300,\n        height: 300,\n        backgroundImage:\n          &quot;url(https://images.pexels.com/photos/3227984/pexels-photo-3227984.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500)&quot;,\n        backgroundPosition: &quot;center center&quot;,\n        ...styles,\n      }}\n    &gt;&lt;/animated.div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/04.gif" alt="04"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useSpring, animated } from &quot;react-spring&quot;;\n\nfunction App() {\n  const { count } = useSpring({\n    from: {\n      count: 0,\n    },\n    to: {\n      count: 556,\n    },\n    config: {\n      duration: 2000,\n    },\n  });\n  console.log(count);\n  return (\n    &lt;animated.div style={{ fontSize: 54 }}&gt;\n      {count.to((count) =&gt; count.toFixed(2))}\n    &lt;/animated.div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/05.gif" alt="05"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import styled from &quot;styled-components&quot;;\nimport { useSpring, animated } from &quot;react-spring&quot;;\nimport { useRef } from &quot;react&quot;;\n\nconst data = [\n  &quot;Cras justo odio&quot;,\n  &quot;Dapibus ac facilisis in&quot;,\n  &quot;Morbi leo risus&quot;,\n  &quot;Porta ac consectetur ac&quot;,\n  &quot;Vestibulum at eros&quot;,\n  &quot;List group item heading&quot;,\n  &quot;Something else here&quot;,\n  &quot;Separated link&quot;,\n  &quot;Another action&quot;,\n  &quot;Extra small button&quot;,\n  &quot;Signed in as Mark Otto&quot;,\n  &quot;This is a simple hero unit&quot;,\n];\n\nconst Container = styled(animated.div)`\n  width: 240px;\n  height: 100px;\n  overflow: auto;\n  background-color: skyblue;\n  padding: 0 10px;\n  color: #fff;\n  &amp; &gt; div {\n    height: 30px;\n    line-height: 30px;\n  }\n`;\n\nfunction App() {\n  const ref = useRef(null);\n  const { scroll } = useSpring({\n    scroll: ref?.current?.scrollTop || 0,\n  });\n  return (\n    &lt;&gt;\n      &lt;Container ref={ref} scrollTop={scroll}&gt;\n        {data.map((item) =&gt; (\n          &lt;div key={item}&gt;{item}&lt;/div&gt;\n        ))}\n      &lt;/Container&gt;\n      &lt;button\n        onClick={() =&gt;\n          scroll.start({\n            from: { scroll: ref.current.scrollTop },\n            to: { scroll: 0 },\n          })\n        }\n      &gt;\n        scrollToTop\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h4 id="_3-2-usesprings" tabindex="-1"><a class="header-anchor" href="#_3-2-usesprings" aria-hidden="true">#</a> 3.2 useSprings</h4><p>创建多元素动画。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/06.gif" alt="06"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;\nimport { animated, useSprings } from &quot;react-spring&quot;\n\nconst data = [&quot;primary&quot;, &quot;success&quot;, &quot;danger&quot;, &quot;warning&quot;]\n\nfunction App() {\n  const [on, setOn] = useState(false)\n  const animations = useSprings(\n    data.length,\n    data.map((item, index) =&gt; {\n      return {\n        from: {\n          transform: `translateX(${index % 2 === 0 ? -110 : 110}%)`\n        },\n        to: {\n          transform: &quot;translateX(0%)&quot;\n        },\n        // 控制动画执行方向\n        // false: from -&gt; to\n        // true: to -&gt; from\n        // 当 on 状态发生变化后会触发动画执行\n        reverse: on\n      }\n    })\n  )\n  return (\n    &lt;div className=&quot;container&quot;&gt;\n      &lt;button onClick={() =&gt; setOn(!on)} className=&quot;button mt-2 is-fullwidth is-info&quot;&gt; Click &lt;/button&gt;\n      &lt;ul&gt;\n        {data.map((item, index) =&gt; (\n          &lt;animated.li style={animations[index]} key={item}&gt;\n            &lt;button className={`button mt-2 is-fullwidth is-${item}`}&gt;\n              {item}\n            &lt;/button&gt;\n          &lt;/animated.li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h4 id="_3-3-usetrail" tabindex="-1"><a class="header-anchor" href="#_3-3-usetrail" aria-hidden="true">#</a> 3.3 useTrail</h4><p>创建交错动画，先创建动画，根据动画创建执行动画的元素。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/07.gif" alt="07"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useTrail, animated, config } from &quot;react-spring&quot;;\nimport { useState } from &quot;react&quot;;\nimport mock_data from &quot;./MOCK_DATA.json&quot;;\n\nfunction App() {\n  const [{ dataToShow, indexStartRender }, setState] = useState({\n    dataToShow: mock_data,\n    indexStartRender: 0,\n  });\n  const animations = useTrail(dataToShow.length, {\n    from: {\n      transform: &quot;translateY(100%)&quot;,\n    },\n    to: {\n      transform: &quot;translateY(0%)&quot;,\n    },\n    // 动画执行完成后重置, 以便再次执行动画\n    reset: true,\n    // config.wobby 为预置动画形式\n    config: config.wobbly,\n  });\n  const onClickHandler = (index) =&gt; {\n    const newData = [\n      ...dataToShow.slice(0, index),\n      ...dataToShow.slice(index + 1),\n    ];\n    setState({\n      dataToShow: newData,\n      indexStartRender: index,\n    });\n  };\n  return (\n    &lt;div className=&quot;container&quot;&gt;\n      {dataToShow.map((item, index) =&gt; (\n        &lt;animated.button\n          onClick={() =&gt; onClickHandler(index)}\n          key={item.id}\n          style={index &gt;= indexStartRender ? animations[index] : null}\n          className=&quot;button mt-2 is-fullwidth is-primary&quot;\n        &gt;\n          {item.first_name}\n        &lt;/animated.button&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h4 id="_3-4-usetransition" tabindex="-1"><a class="header-anchor" href="#_3-4-usetransition" aria-hidden="true">#</a> 3.4 useTransition</h4><p>创建入场动画和出场动画，可以是一个元素也可以是一组元素。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/08.gif" alt="08"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;div className=&quot;app&quot;&gt;\n  &lt;button&gt;button&lt;/button&gt;\n  &lt;div className=&quot;container&quot;&gt;\n    &lt;div className=&quot;item&quot;&gt;item&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;\nimport { animated, useTransition } from &quot;react-spring&quot;\nimport &quot;./App.css&quot;\n\nfunction App() {\n  const [isVisible, setIsVisible] = useState(false)\n  const transition = useTransition(isVisible, {\n    from: {\n      opacity: 0,\n      x: -300,\n      y: 800\n    },\n    enter: {\n      opacity: 1,\n      x: 0,\n      y: 0\n    },\n    leave: {\n      opacity: 0,\n      x: 300,\n      y: 800\n    }\n  })\n  return (\n    &lt;div className=&quot;app&quot;&gt;\n      &lt;button onClick={() =&gt; setIsVisible(!isVisible)}&gt;\n       \t{isVisible ? &quot;卸载&quot; : &quot;挂载&quot;}\n      &lt;/button&gt;\n      &lt;div className=&quot;container&quot;&gt;\n        {transition((style, item) =&gt; {\n          return item ? (\n            &lt;animated.button className=&quot;item&quot; style={style}&gt;&lt;/animated.button&gt;\n          ) : null\n        })}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/09.gif" alt="09"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;\nimport { animated, useTransition } from &quot;react-spring&quot;\nimport &quot;./App.css&quot;\n\nfunction App() {\n  const [items, setItems] = useState([])\n  const transition = useTransition(items, {\n    from: {\n      opacity: 0,\n      x: -300,\n      y: 800\n    },\n    enter: item =&gt; ({ opacity: 1, x: 0, y: item.y, delay: item.delay }),\n    leave: {\n      opacity: 0,\n      x: 300,\n      y: 800,\n    }\n  })\n  const onClickHandler = () =&gt; {\n    setItems(prev =&gt;\n      prev.length\n        ? []\n        : [\n            { y: -50, delay: 200 },\n            { y: 0, delay: 400 },\n            { y: 50, delay: 600 }\n          ]\n    )\n  }\n  return (\n    &lt;div className=&quot;app&quot;&gt;\n      &lt;button onClick={onClickHandler}&gt;{items.length ? &quot;卸载&quot; : &quot;挂载&quot;}&lt;/button&gt;\n      &lt;div className=&quot;container&quot;&gt;\n        {transition((style, item) =&gt; {\n          return item ? (\n            &lt;animated.div className=&quot;item&quot; style={style}&gt;&lt;/animated.div&gt;\n          ) : null\n        })}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/10.gif" alt="10"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;\nimport { animated, useTransition } from &quot;react-spring&quot;\nimport &quot;./App.css&quot;\n\nfunction App() {\n  const [items, setItems] = useState([])\n  const transition = useTransition(items, {\n    from: {\n      opacity: 0,\n      x: -300,\n      y: 800,\n      width: 20,\n      height: 20\n    },\n    enter: item =&gt; async next =&gt; {\n      await next({ opacity: 1, y: item.y, delay: item.delay })\n      await next({\n        x: 0,\n        width: 100,\n        height: 100\n      })\n    },\n    leave: {\n      opacity: 0,\n      x: 300,\n      y: 800\n    }\n  })\n  return (\n    &lt;div className=&quot;app&quot;&gt;\n      &lt;button\n        onClick={() =&gt;\n          setItems(prev =&gt; {\n            return prev.length\n              ? []\n              : [\n                  { y: -50, delay: 200 },\n                  { y: 0, delay: 400 },\n                  { y: 50, delay: 600 }\n                ]\n          })\n        }\n      &gt;\n        {items.length ? &quot;un-mount&quot; : &quot;mount&quot;}\n      &lt;/button&gt;\n      &lt;div className=&quot;container&quot;&gt;\n        {transition((style, item) =&gt; {\n          return item ? (\n            &lt;animated.div className=&quot;item&quot; style={style}&gt;&lt;/animated.div&gt;\n          ) : null\n        })}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div>',43),m={id:"_4-react-query",tabindex:"-1"},d=(0,e._)("a",{class:"header-anchor",href:"#_4-react-query","aria-hidden":"true"},"#",-1),g=(0,e.Uk)(" 4. "),q={href:"https://react-query.tanstack.com/",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("React Query"),k=(0,e.uE)('<h4 id="_4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a> 4.1 概述</h4><p>React Query 使 React 应用获取，缓存，同步和更新服务端状态变得轻而易举。</p><ol><li><p>请求管理</p><p>在适当时机自动向服务端发送请求以同步状态。适当时机是指当请求出错时，网络重新连接时，浏览器窗口重新获取焦点时。</p><p>它是基于请求库上层的封装，实现了和请求相关的逻辑， 比如无限加载，失败重试，轮询，请求状态查询等。</p><p>它不生产请求，它只是请求的搬运工。</p></li><li><p>状态管理</p><p>将服务端状态同步到客户端的内存中进行缓存，任何组件都可以从缓存中获取状态，从而实现全局状态共享。</p></li></ol><p>下载：<code>yarn add react-query@3.16.0</code></p><h4 id="_4-2-状态模拟" tabindex="-1"><a class="header-anchor" href="#_4-2-状态模拟" aria-hidden="true">#</a> 4.2 状态模拟</h4><ol><li><p>本地安装状态模拟工具 <code>yarn add json-server</code></p></li><li><p>创建 db.json 本地状态库</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;todos&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isCompleted&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isEditing&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isCompleted&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isEditing&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;打豆豆&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isCompleted&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;isEditing&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">3</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token property">&quot;posts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello React Query&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;React Query is Great&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></li><li><p>在 <code>package.json</code> 文件中添加命令</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;json-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json-server --watch db.json --port 3001&quot;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>启动程序 <code>npm run json-server</code></p></li></ol><h4 id="_4-3-全局配置" tabindex="-1"><a class="header-anchor" href="#_4-3-全局配置" aria-hidden="true">#</a> 4.3 全局配置</h4><ol><li>React Query 会在客户端的内存中缓存状态，任何组件都可以从缓存中获取状态</li><li>组件可以通过 <code>queryClient</code> 对象操作内存中的缓存状态</li><li>开发者需要在应用的入口文件中通过 <code>QueryClient</code> 类创建 <code>queryClient</code> 对象</li><li>开发者需要通过 <code>QueryClientProvider</code> 组件将 <code>queryClient</code> 对象传递到下层组件</li><li>组件通过 <code>useQueryClient</code> 钩子函数获取 <code>queryClient</code> 对象</li></ol><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ReactDOM from &quot;react-dom&quot;\nimport App from &quot;./App&quot;\nimport axios from &quot;axios&quot;\nimport { QueryClient, QueryClientProvider } from &quot;react-query&quot;\n\n// 响应拦截器, 让开发者直接获取到服务器端返回的数据\naxios.interceptors.response.use(response =&gt; response.data)\naxios.defaults.baseURL = &quot;http://localhost:3001&quot;\n\n// 创建 queryClient 对象\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  {/* 将 queryClient 对象传递到下层组件 */}\n  &lt;QueryClientProvider client={queryClient}&gt;\n    &lt;App /&gt;\n  &lt;/QueryClientProvider&gt;,\n  document.getElementById(&quot;root&quot;)\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_4-4-usequery-同步服务端状态" tabindex="-1"><a class="header-anchor" href="#_4-4-usequery-同步服务端状态" aria-hidden="true">#</a> 4.4 useQuery 同步服务端状态</h4><h5 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1. 基本使用</h5><p>在组件挂载完成后发送请求获取状态，缓存状态。</p><p>获取服务端默认待办事项列表。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// TodosMain.js 同步服务端状态待办事项列表\nimport axios from &quot;axios&quot;\nimport { useQuery } from &quot;react-query&quot;\nimport TodoItem from &quot;./TodoItem&quot;\n\nasync function fetchTodos() {\n  try {\n    return axios.get(&quot;/todos&quot;)\n  } catch (err) {\n    throw new Error(&quot;服务端默认待办事项加载失败&quot;)\n  }\n}\n\nfunction TodosMain() {\n  // useQuery(queryKey, queryFn)\n  const { isLoading, isError, error, data } = useQuery(&quot;todos&quot;, fetchTodos)\n  if (isLoading) return &lt;div&gt;正在加载服务端默认待办事项&lt;/div&gt;\n  if (isError) return &lt;div&gt;{error.message}&lt;/div&gt;\n  return (\n    &lt;section className=&quot;main&quot;&gt;\n      &lt;ul className=&quot;todo-list&quot;&gt;\n        {data.map(todo =&gt; &lt;TodoItem key={todo.id} todo={todo} /&gt;)}\n      &lt;/ul&gt;\n    &lt;/section&gt;\n  )\n}\n\nexport default TodosMain\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h5 id="_4-配置选项" tabindex="-1"><a class="header-anchor" href="#_4-配置选项" aria-hidden="true">#</a> 4. 配置选项</h5><h6 id="_1-retry" tabindex="-1"><a class="header-anchor" href="#_1-retry" aria-hidden="true">#</a> 1. retry</h6><p>在请求发生错误时，默认会重试 3 次，如果请求还是不成功 <code>isError</code> 为真。</p><p>可以通过 retry 配置项更改重试次数或者禁用重试 ( false )。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useQuery(&quot;todos&quot;, fetchTodos, { retry: 2 })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h6 id="_2-refetchonwindowfocus" tabindex="-1"><a class="header-anchor" href="#_2-refetchonwindowfocus" aria-hidden="true">#</a> 2. refetchOnWindowFocus</h6><p>当浏览器窗口重新获取焦点时，重新向服务器端发送请求同步最新状态。</p><p>在状态未更新之前，组件中显示缓存状态。</p><p>可以通过 <code>refetchOnWindowFocus</code> 配置项禁用此行为。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useQuery(&quot;todos&quot;, fetchTodos, { refetchOnWindowFocus: false })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h6 id="_3-enabled" tabindex="-1"><a class="header-anchor" href="#_3-enabled" aria-hidden="true">#</a> 3. enabled</h6><p>默认值为 true，即组件挂载完成后发送请求同步服务端状态。当值为 false 的时候此行为被禁止，当值被改为 true 时，发送请求同步服务端状态。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const [isLoad, setIsLoad] = useState(false)\nuseQuery(&quot;todos&quot;, fetchTodos, { enabled: isLoad })\n&lt;button onClick={() =&gt; setIsLoad(true)}&gt;同步状态&lt;/button&gt;\ndata &amp;&amp; data.map\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h6 id="_4-staletime" tabindex="-1"><a class="header-anchor" href="#_4-staletime" aria-hidden="true">#</a> 4. staleTime</h6><p>状态的保质期。在同步状态时，如果状态仍然在保质期内，直接从缓存中获取状态，不会在后台发送真实的请求来更新状态缓存。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useQuery(&quot;todos&quot;, fetchTodos, { staleTime: 5000 }) \n// 每次状态同步完成后都会有5秒的保质期\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h6 id="_5-placeholderdata" tabindex="-1"><a class="header-anchor" href="#_5-placeholderdata" aria-hidden="true">#</a> 5. placeholderData</h6><p>在服务端状态没有加载完成前，可以使用占位符状态填充客户端缓存以提升用户体验。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useQuery(&quot;todos&quot;, fetchTodos, { placeholderData: [ { id: 1, title: &quot;吃饭&quot; } ] })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h6 id="_6-refetchinterval" tabindex="-1"><a class="header-anchor" href="#_6-refetchinterval" aria-hidden="true">#</a> 6 refetchInterval</h6><p>指定轮询的间隔时间，false 为不轮询。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useQuery(&quot;todos&quot;, fetchTodos, { refetchInterval: 1000 })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="_5-querykey" tabindex="-1"><a class="header-anchor" href="#_5-querykey" aria-hidden="true">#</a> 5. queryKey</h5><p>useQuery 方法的第一个参数，除可以使用字符串以外，还可以使用数组，实现查询时传递参数。</p><p>实现查询 ID 为 1 的待办事项列表。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { useQuery } from &quot;react-query&quot;\n\nfunction getTodoById({ queryKey }) {\n  try {\n    return axios.get(`/todos/${queryKey[1]}`)\n  } catch (err) {\n    throw new Error(&quot;待办事项获取失败&quot;)\n  }\n}\n\nfunction FetchTodoById() {\n  const { data } = useQuery([&quot;todo&quot;, 2], getTodoById)\n  return (\n    &lt;div&gt;\n      &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default FetchTodoById\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>useQuery({ queryKey: [&quot;todo&quot;, 2], queryFn: getTodoById })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_4-5-usemutation" tabindex="-1"><a class="header-anchor" href="#_4-5-usemutation" aria-hidden="true">#</a> 4.5 useMutation</h4><p>修改状态，使用 useMutation 钩子函数，修改包括，删除，更新，添加。</p><p>实现添加待办事项。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// TodosHeader.js 添加待办事项\nimport axios from &quot;axios&quot;\nimport { useState } from &quot;react&quot;\nimport { useMutation } from &quot;react-query&quot;\n\nasync function addTodo(todo) {\n  try {\n    return axios.post(&quot;/todos&quot;, todo)\n  } catch (err) {\n    throw new Error(&quot;任务添加失败&quot;)\n  }\n}\n\nfunction TodosHeader() {\n  const [title, setTitle] = useState(&quot;&quot;)\n  const { mutate } = useMutation(addTodo, {\n    onSuccess() {\n      setTitle(&quot;&quot;)\n    }\n  })\n  return (\n    &lt;header className=&quot;header&quot;&gt;\n      &lt;input\n        value={title}\n        onChange={event =&gt; setTitle(event.target.value)}\n        onKeyUp={event =&gt; {\n          if (event.code === &quot;Enter&quot;) {\n            mutate({ title, isCompleted: false, isEditing: false })\n          }\n        }}\n      /&gt;\n    &lt;/header&gt;\n  )\n}\n\nexport default TodosHeader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="_4-6-queryclient" tabindex="-1"><a class="header-anchor" href="#_4-6-queryclient" aria-hidden="true">#</a> 4.6 QueryClient</h4><h5 id="_1-同步服务端缓存" tabindex="-1"><a class="header-anchor" href="#_1-同步服务端缓存" aria-hidden="true">#</a> 1. 同步服务端缓存</h5><p>实现在待办事项添加成功后更新客户端缓存以使组件展示出最新的待办事项列表。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useQueryClient } from &quot;react-query&quot;\nconst queryClient = useQueryClient()\n\nuseMutation(addTodo, {\n    onSuccess() {\n      // 使本地缓存中的 todos 状态无效, 重新发送请求同步状态。\n      queryClient.invalidateQueries(&quot;todos&quot;)\n    }\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="_2-操作客户端缓存" tabindex="-1"><a class="header-anchor" href="#_2-操作客户端缓存" aria-hidden="true">#</a> 2. 操作客户端缓存</h5><p>实现更改待办事项的是否已完成状态。</p><p>通过 setQueryData 方法可以手动设置客户端缓存数据。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { useMutation, useQueryClient } from &quot;react-query&quot;\n\nasync function modifyTodoCompleted({ id, isCompleted }) {\n  try {\n    return axios.patch(`/todos/${id}`, { isCompleted })\n  } catch (err) {\n    throw new Error(&quot;任务状态更改失败&quot;)\n  }\n}\n\nfunction TodoCompleted({ todo }) {\n  const queryClient = useQueryClient()\n  const { mutate } = useMutation(modifyTodoCompleted, {\n    onSuccess(response) {\n      queryClient.setQueryData(&quot;todos&quot;, data =&gt;\n        data.map(todo =&gt; (todo.id !== response.id ? todo : response))\n      )\n    }\n  })\n  return (\n    &lt;input\n      className=&quot;toggle&quot;\n      type=&quot;checkbox&quot;\n      checked={todo.isCompleted}\n      onChange={event =&gt; {\n        mutate({ id: todo.id, isCompleted: event.target.checked })\n      }}\n    /&gt;\n  )\n}\n\nexport default TodoCompleted\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="_4-7-usequery-同步客户端状态" tabindex="-1"><a class="header-anchor" href="#_4-7-usequery-同步客户端状态" aria-hidden="true">#</a> 4.7 useQuery 同步客户端状态</h4><p>实现计算未完成待办事项的数量。</p><p>当客户端内存中的状态发生变化后，所有使用 useQuery 同步该状态的组件都会得到更新。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// hooks/todos.js\n// 1. 将同步服务端待办事项抽象成自定义钩子函数 useTodos\n// 2. 分别在不同组件中调用钩子函数以获取待办事项列表\nimport { useQuery } from &quot;react-query&quot;\nimport axios from &quot;axios&quot;\n\nasync function fetchTodos() {\n  try {\n    return axios.get(&quot;/todos&quot;)\n  } catch (err) {\n    throw new Error(&quot;服务端默认待办事项加载失败&quot;)\n  }\n}\n\nexport function useTodos() {\n  return useQuery(&quot;todos&quot;, fetchTodos)\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useTodos } from &quot;../hooks/todos&quot;\n\nfunction UnCompletedTodoCount() {\n  const { data } = useTodos()\n  return (\n    &lt;span className=&quot;todo-count&quot;&gt;\n      &lt;strong&gt;{data &amp;&amp; data.filter(todo =&gt; !todo.isCompleted).length}&lt;/strong&gt;\n      item left\n    &lt;/span&gt;\n  )\n}\n\nexport default UnCompletedTodoCount\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_4-8-queryobserver-状态订阅" tabindex="-1"><a class="header-anchor" href="#_4-8-queryobserver-状态订阅" aria-hidden="true">#</a> 4.8 QueryObserver 状态订阅</h4><p>通过 QueryObserver 可实现在任意组件中订阅状态，实现全局状态共享。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useQueryClient, QueryObserver } from &quot;react-query&quot;\nimport { useEffect, useState } from &quot;react&quot;\n\nfunction UnCompletedTodoCount() {\n  const queryClient = useQueryClient()\n  const [todos, setTodos] = useState([])\n  useEffect(() =&gt; {\n    const todosObserver = new QueryObserver(queryClient, { queryKey: &quot;todos&quot; })\n    const unsubscribe = todosObserver.subscribe(result =&gt; setTodos(result.data))\n    return () =&gt; unsubscribe()\n  }, [])\n  return (\n    &lt;span className=&quot;todo-count&quot;&gt;\n      &lt;strong&gt;{todos &amp;&amp; todos.filter(todo =&gt; !todo.isCompleted).length}&lt;/strong&gt;{&quot; &quot;}\n      item left\n    &lt;/span&gt;\n  )\n}\n\nexport default UnCompletedTodoCount\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="_4-9-usequeries-并发同步状态" tabindex="-1"><a class="header-anchor" href="#_4-9-usequeries-并发同步状态" aria-hidden="true">#</a> 4.9 useQueries 并发同步状态</h4><p>使用 useQueries 可以并行发送请求，所有结果得到以后返回给开发者。</p><p>实现并发加载待办事项列表和文章列表。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useQueries } from &quot;react-query&quot;\nimport axios from &quot;axios&quot;\n\nasync function fetchTodos() {\n  try {\n    return axios.get(&quot;/todos&quot;)\n  } catch (err) {\n    throw new Error(&quot;服务端默认待办事项加载失败&quot;)\n  }\n}\n\nasync function fetchPosts() {\n  try {\n    return axios.get(&quot;/posts&quot;)\n  } catch (err) {\n    throw new Error(&quot;文章列表加载失败&quot;)\n  }\n}\n\nfunction Parallel() {\n  const results = useQueries([\n    {\n      queryKey: &quot;anotherTodos&quot;,\n      queryFn: fetchTodos\n    },\n    {\n      queryKey: &quot;posts&quot;,\n      queryFn: fetchPosts\n    }\n  ])\n  return (\n    &lt;div&gt;\n      &lt;pre&gt;{JSON.stringify(results, null, 2)}&lt;/pre&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Parallel\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="_4-10-useinfinitequery-分页" tabindex="-1"><a class="header-anchor" href="#_4-10-useinfinitequery-分页" aria-hidden="true">#</a> 4.10 useInfiniteQuery 分页</h4><p>使用它可以实现和分页相关的逻辑。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import axios from &quot;axios&quot;\nimport { useInfiniteQuery } from &quot;react-query&quot;\n\nasync function fetchUser({ pageParam = 1 }) {\n  try {\n    return axios.get(`https://reqres.in/api/users?page=${pageParam}`)\n  } catch (err) {\n    throw new Error(&quot;用户状态同步失败&quot;)\n  }\n}\n\nfunction LoadMore() {\n  const {\n    data,\n    isLoading,\n    isFetching,\n    hasNextPage,\n    fetchNextPage\n  } = useInfiniteQuery(&quot;users&quot;, fetchUser, {\n    getNextPageParam(current) {\n      if (current.page &lt; current.total_pages) {\n        return current.page + 1\n      }\n    }\n  })\n  if (isLoading) return &lt;div&gt;用户状态正在加载中...&lt;/div&gt;\n  return (\n    &lt;div&gt;\n      &lt;ul&gt;\n        {data.pages.map(page =&gt;\n          page.data.map(user =&gt; &lt;li key={user.id}&gt;{user.first_name}&lt;/li&gt;)\n        )}\n      &lt;/ul&gt;\n      {hasNextPage &amp;&amp; &lt;button onClick={() =&gt; fetchNextPage()}&gt;加载更多&lt;/button&gt;}\n      {isFetching &amp;&amp; &lt;div&gt;更多状态加载中...&lt;/div&gt;}\n    &lt;/div&gt;\n  )\n}\n\nexport default LoadMore\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p><code>isLoading</code> 只有初次加载时才会变为 true，通常用作首次加载数据时的加载状态。</p><p><code>isFetching</code> 是只要发生加载行为就会变为 true，通过用作加载更多时的加载状态。</p><h4 id="_4-11-useisfetching-全局加载状态" tabindex="-1"><a class="header-anchor" href="#_4-11-useisfetching-全局加载状态" aria-hidden="true">#</a> 4.11 useIsFetching 全局加载状态</h4><p>只要程序中有状态在同步，useIsFetching 钩子函数获取的结果就为 true，可以通过它实现全局加载状态的提示。</p><p><code>yarn add react-spinners@0.10.6 @emotion/react@11.1.5</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { PacmanLoader } from &quot;react-spinners&quot;\nimport { useIsFetching } from &quot;react-query&quot;\nimport { css } from &quot;@emotion/react&quot;\n\nconst loaderCss = css`\n  position: absolute;\n  left: 100%;\n  top: 0;\n  transform: translateX(-400%);\n  z-index: 1;\n`\n\nfunction GlobalLoading() {\n  const isFetching = useIsFetching()\n  return (\n    &lt;PacmanLoader\n      loading={isFetching}\n      color={&quot;rgba(175, 47, 47, 0.25)&quot;}\n      size={15}\n      css={loaderCss}\n    /&gt;\n  )\n}\n\nexport default GlobalLoading\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_5-react-modal" tabindex="-1"><a class="header-anchor" href="#_5-react-modal" aria-hidden="true">#</a> 5 React Modal</h3>',75),v={href:"http://reactcommunity.org/react-modal/",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("React Modal 文档"),y=(0,e.uE)('<p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/52.gif" alt="52"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-modal\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\nimport Modal from &quot;react-modal&quot;;\n\nModal.setAppElement(&quot;#root&quot;);\n\nfunction App() {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  // onRequestClose: 在请求关闭弹框时执行该回调函数 (单击弹框主体区域外部或按ESC键)\n  // shouldCloseOnOverlayClick: 点击弹框主体区域外部时是否关闭弹框, 配合 onRequestClose 一起使用 \n  // 比如按ESC关闭弹框, 点击弹框主体区域外部不关闭弹框\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; setModalIsOpen(true)}&gt;打开弹框&lt;/button&gt;\n      &lt;Modal\n        style={{\n          overlay: {\n            backgroundColor: &quot;rgba(100,100,100,0.5)&quot;,\n          },\n          content: {\n            color: &quot;skyblue&quot;,\n          },\n        }}\n        isOpen={modalIsOpen}\n        onRequestClose={() =&gt; setModalIsOpen(false)}\n        shouldCloseOnOverlayClick={false}\n      &gt;\n        sdfsd\n        &lt;button onClick={() =&gt; setModalIsOpen(false)}&gt;关闭弹框&lt;/button&gt;\n      &lt;/Modal&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="_6-react-player" tabindex="-1"><a class="header-anchor" href="#_6-react-player" aria-hidden="true">#</a> 6 React Player</h3>',4),x={href:"https://www.npmjs.com/package/react-player",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("React Player 文档"),w=(0,e.uE)('<p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/53.gif" alt="53"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-player\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import ReactPlayer from &quot;react-player&quot;\n\nfunction App() {\n  return (\n    &lt;ReactPlayer\n      onStart={() =&gt; console.log(&quot;onStart calllback&quot;)}\n      onEnded={() =&gt; console.log(&quot;onEnded calllback&quot;)}\n      onPause={() =&gt; console.log(&quot;onPause calllback&quot;)}\n      width=&quot;auto&quot;\n      muted={true}\n      controls\n      url=&quot;//vjs.zencdn.net/v/oceans.mp4&quot;\n    /&gt;\n  )\n}\n\nexport default App\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_7-react-datepicker" tabindex="-1"><a class="header-anchor" href="#_7-react-datepicker" aria-hidden="true">#</a> 7 React Datepicker</h3><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/53.png" alt="53"></p>',5),C={href:"https://reactdatepicker.com/",target:"_blank",rel:"noopener noreferrer"},S=(0,e.Uk)("react-datepicker"),T=(0,e.Uk)(),P={href:"https://date-fns.org/",target:"_blank",rel:"noopener noreferrer"},F=(0,e.Uk)("date-fns"),R=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-datepicker date-fns\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import DatePicker, { registerLocale, setDefaultLocale } from &quot;react-datepicker&quot;\nimport { useState } from &quot;react&quot;\nimport { addDays, subDays } from &quot;date-fns&quot;\nimport zhCN from &quot;date-fns/locale/zh-CN&quot;\nimport &quot;react-datepicker/dist/react-datepicker.css&quot;\n\n// 注册语言\nregisterLocale(&quot;zh-CN&quot;, zhCN)\n// 全局设置日期选择框语言\nsetDefaultLocale(&quot;zh-CN&quot;)\n\n// subDays: 基于给定的日期减去指定的天数\n// addDays: 基于给定的日期添加指定的天数\n\nexport default function App() {\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  // minDate 能够选择的最早的日期\n  // maxDate 能够选择的最晚的日期\n  // dateFormat 日期格式化\n  // onChange 当用户选择日期后执行的回调函数, 回调函数的参数就是用户选择的日期\n  // selected 默认选中的日期\n  // filterDate 日期过滤\n  // showTimeSelect  显示时间选择\n  return (\n    &lt;DatePicker\n      selected={selectedDate}\n      onChange={date =&gt; setSelectedDate(date)}\n      dateFormat=&quot;yyyy-MM-dd hh:mm:ss&quot;\n      filterDate={date =&gt; date.getDay() !== 6 &amp;&amp; date.getDay() !== 0}\n      minDate={subDays(new Date(), 2)}\n      maxDate={addDays(new Date(), 2)}\n      showTimeSelect\n    /&gt;\n  )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div>',2),G={id:"_8-react-table",tabindex:"-1"},N=(0,e._)("a",{class:"header-anchor",href:"#_8-react-table","aria-hidden":"true"},"#",-1),A=(0,e.Uk)(" 8 "),j={href:"https://react-table.tanstack.com/",target:"_blank",rel:"noopener noreferrer"},D=(0,e.Uk)("React Table"),H=(0,e.uE)('<h4 id="_8-1-概述" tabindex="-1"><a class="header-anchor" href="#_8-1-概述" aria-hidden="true">#</a> 8.1 概述</h4><h5 id="_1-为什么学习-react-table" tabindex="-1"><a class="header-anchor" href="#_1-为什么学习-react-table" aria-hidden="true">#</a> 1. 为什么学习 React Table</h5><ol><li>使用表格进行数据可视化是不可避免的。</li><li>构建自己的表格组件可能会充满挑战。</li></ol><h5 id="_2-react-table" tabindex="-1"><a class="header-anchor" href="#_2-react-table" aria-hidden="true">#</a> 2. React Table</h5><p>React Table 用于构建强大的可扩展的数据表格，是一组钩子函数的集合，使用什么功能就调用什么钩子函数。</p><ol><li>React Table 采用无头设计，即不提供 UI 样式，开发者可以完全控制表格如何呈现，所以它不是表格组件，而是表格的实用工具集。</li><li>功能强大，提供了过滤，排序，分组，分页和列固定等等功能。</li><li>React Table 是可扩展的，因为它拥有自己的插件系统，使开发者可以覆盖或扩展React Table 内部的逻辑步骤，阶段或过程。</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-table@7.6.3 dateformat@4.5.1 react-table-sticky@1.1.3 styled-components@5.2.3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_8-2-basic-table" tabindex="-1"><a class="header-anchor" href="#_8-2-basic-table" aria-hidden="true">#</a> 8.2 Basic Table</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220418082149442.png" alt="image-20220418082149442"></p>',9),O=(0,e.Uk)("获取要展示的数据。 生成模拟数据："),M={href:"https://mockaroo.com/",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("mockaroo"),Q=(0,e._)("p",null,[(0,e._)("img",{src:"https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175209129.png",alt:"image-20220412175209129"})],-1),B=(0,e._)("li",null,[(0,e._)("p",null,"定义表格的列。")],-1),L=(0,e._)("li",null,[(0,e._)("p",null,"使用 react-table 创建表格实例对象并传入要展示的数据和列信息。")],-1),U=(0,e._)("li",null,[(0,e._)("p",null,"使用 HTML 定义一个基本的表格结构。")],-1),E=(0,e._)("li",null,[(0,e._)("p",null,"将表格实例对象信息赋值给 HTML，展示数据。")],-1),z=(0,e.Uk)("引入 CSS 文件为表格添加样式 "),V={href:"https://www.w3schools.com/css/tryit.asp?filename=trycss_table_fancy",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("样式来源"),K=(0,e.Uk)("。"),$=(0,e.uE)('<div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// columns.js\n// Header: 定义页头列名称\n// accessor: 定义列关联的数据属性\nexport const COLUMNS = [\n  {\n    Header: &quot;ID&quot;,\n    accessor: &quot;id&quot;\n  },\n  {\n    Header: &quot;名&quot;,\n    accessor: &quot;first_name&quot;\n  },\n  {\n    Header: &quot;姓&quot;,\n    accessor: &quot;last_name&quot;\n  },\n  {\n    Header: &quot;出生日期&quot;,\n    accessor: &quot;date_of_birth&quot;\n  },\n  {\n    Header: &quot;国家&quot;,\n    accessor: &quot;country&quot;\n  },\n  {\n    Header: &quot;电话&quot;,\n    accessor: &quot;phone&quot;\n  }\n]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// BasicTable.js\nimport { COLUMNS } from &quot;./columns&quot;\nimport MOCK_DATA from &quot;./MOCK_DATA.json&quot;\nimport { useMemo } from &quot;react&quot;\nimport { useTable } from &quot;react-table&quot;\nimport &quot;./table.css&quot;\n\nconst BasicTable = () =&gt; {\n  // 缓存列信息\n  const columns = useMemo(() =&gt; COLUMNS, [])\n  // 缓存表格数据\n  const data = useMemo(() =&gt; MOCK_DATA, [])\n  // 创建表格实例对象\n  const {\n    // 获取 table 标记属性\n    getTableProps,\n    // 获取 tbody 标记属性\n    getTableBodyProps,\n    // 获取表格页头信息\n    headerGroups,\n    // 获取表格中要展示的数据\n    rows,\n    // 计算要显示的行信息 (比如分页, 当前页要显示哪些行)\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  })\n  return (\n    &lt;&gt;\n      &lt;table {...getTableProps()}&gt;\n        &lt;thead&gt;\n          {headerGroups.map(headerGroup =&gt; (\n            &lt;tr {...headerGroup.getHeaderGroupProps()}&gt;\n              {headerGroup.headers.map(column =&gt; (\n                &lt;th {...column.getHeaderProps()}&gt;\n                  {column.render(&quot;Header&quot;)}\n                &lt;/th&gt;\n              ))}\n            &lt;/tr&gt;\n          ))}\n        &lt;/thead&gt;\n        &lt;tbody {...getTableBodyProps()}&gt;\n          {rows.map(row =&gt; {\n            prepareRow(row)\n            return (\n              &lt;tr {...row.getRowProps()}&gt;\n                {row.cells.map(cell =&gt; (\n                  &lt;td {...cell.getCellProps()}&gt;{cell.render(&quot;Cell&quot;)}&lt;/td&gt;\n                ))}\n              &lt;/tr&gt;\n            )\n          })}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default BasicTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">table</span> <span class="token punctuation">{</span>\n  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>\n  <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">table td,\ntable th</span> <span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">table tr:nth-child(even)</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">table tr:hover</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">table th, tfoot td</span> <span class="token punctuation">{</span>\n  <span class="token property">padding-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>\n  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #4caf50<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="_8-3-创建表格页脚" tabindex="-1"><a class="header-anchor" href="#_8-3-创建表格页脚" aria-hidden="true">#</a> 8.3 创建表格页脚</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/04.png" alt="04"></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// columns.js</span>\n<span class="token comment">// Footer: 定义页脚列名称</span>\nexport const COLUMNS = <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;名&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;姓&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;出生日期&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;国家&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;电话&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const BasicTable = () =&gt; {\n  // 获取表格页脚信息\n  const { footerGroups } = useTable({})\n  return (\n    &lt;table&gt;\n      &lt;tfoot&gt;\n        {footerGroups.map(footerGroup =&gt; (\n          &lt;tr {...footerGroup.getFooterGroupProps()}&gt;\n            {footerGroup.headers.map(column =&gt; (\n              &lt;th {...column.getFooterProps()}&gt;{column.render(&quot;Footer&quot;)}&lt;/th&gt;\n            ))}\n          &lt;/tr&gt;\n        ))}\n      &lt;/tfoot&gt;\n    &lt;/table&gt;\n  )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_8-4-创建表格分组" tabindex="-1"><a class="header-anchor" href="#_8-4-创建表格分组" aria-hidden="true">#</a> 8.4 创建表格分组</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175257573.png" alt="image-20220412175257573"></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// columns.js</span>\nexport const COLUMNS_GROUP = <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    Header<span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    accessor<span class="token operator">:</span> <span class="token string">&quot;id&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Header<span class="token operator">:</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span>\n    columns<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        Header<span class="token operator">:</span> <span class="token string">&quot;First Name&quot;</span><span class="token punctuation">,</span>\n        Footer<span class="token operator">:</span> <span class="token string">&quot;First Name&quot;</span><span class="token punctuation">,</span>\n        accessor<span class="token operator">:</span> <span class="token string">&quot;first_name&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        Header<span class="token operator">:</span> <span class="token string">&quot;Last Name&quot;</span><span class="token punctuation">,</span>\n        Footer<span class="token operator">:</span> <span class="token string">&quot;Last Name&quot;</span><span class="token punctuation">,</span>\n        accessor<span class="token operator">:</span> <span class="token string">&quot;last_name&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    Header<span class="token operator">:</span> <span class="token string">&quot;Info&quot;</span><span class="token punctuation">,</span>\n    Footer<span class="token operator">:</span> <span class="token string">&quot;Info&quot;</span><span class="token punctuation">,</span>\n    columns<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        Header<span class="token operator">:</span> <span class="token string">&quot;Date Of Birth&quot;</span><span class="token punctuation">,</span>\n        Footer<span class="token operator">:</span> <span class="token string">&quot;Date Of Birth&quot;</span><span class="token punctuation">,</span>\n        accessor<span class="token operator">:</span> <span class="token string">&quot;date_of_birth&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        Header<span class="token operator">:</span> <span class="token string">&quot;Country&quot;</span><span class="token punctuation">,</span>\n        Footer<span class="token operator">:</span> <span class="token string">&quot;Country&quot;</span><span class="token punctuation">,</span>\n        accessor<span class="token operator">:</span> <span class="token string">&quot;country&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        Header<span class="token operator">:</span> <span class="token string">&quot;Phone&quot;</span><span class="token punctuation">,</span>\n        Footer<span class="token operator">:</span> <span class="token string">&quot;Phone&quot;</span><span class="token punctuation">,</span>\n        accessor<span class="token operator">:</span> <span class="token string">&quot;phone&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// BasicTabel.js\nimport { COLUMNS_GROUP } from &quot;./columns&quot;\n\nconst BasicTable = () =&gt; {\n  const columns = useMemo(() =&gt; COLUMNS_GROUP, [])\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_8-5-实现表格排序" tabindex="-1"><a class="header-anchor" href="#_8-5-实现表格排序" aria-hidden="true">#</a> 8.5 实现表格排序</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175315265.png" alt="image-20220412175315265"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// SortingTable.js\nimport { useTable, useSortBy } from &quot;react-table&quot;\n\nconst SortingTable = () =&gt; {\n  useTable({}, useSortBy)\n  // column.getSortByToggleProps()\n  // 将标记的鼠标移入样式改为手势, 表示该列是可以点击的\n  // 实现点击列后, 对列数据进行排序 (升序, 降序, 默认排序交替)\n  return (\n    &lt;thead&gt;\n      &lt;th {...column.getHeaderProps(column.getSortByToggleProps())}&gt;\n        {column.render(&quot;Header&quot;)}\n        &lt;span&gt;\n          {column.isSorted ? (column.isSortedDesc ? &quot;↓&quot; : &quot;↑&quot;) : &quot;&quot;}\n        &lt;/span&gt;\n      &lt;/th&gt;\n    &lt;/thead&gt;\n  )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_8-6-单元格内容格式化" tabindex="-1"><a class="header-anchor" href="#_8-6-单元格内容格式化" aria-hidden="true">#</a> 8.6 单元格内容格式化</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175324266.png" alt="image-20220412175324266"></p><p>日期格式化：<code>yarn add dateformat</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> dateformat <span class="token keyword">from</span> <span class="token string">&quot;dateformat&quot;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Date Of Birth&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Date Of Birth&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;date_of_birth&quot;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">Cell</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dateformat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;yyyy-mm-dd&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_8-7-实现全局过滤" tabindex="-1"><a class="header-anchor" href="#_8-7-实现全局过滤" aria-hidden="true">#</a> 8.7 实现全局过滤</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175333904.png" alt="image-20220412175333904"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// GlobalFilter.js\n// 进行全局搜索的搜索框组件\nconst GlobalFilter = ({ filter, setFilter }) =&gt; {\n  return (\n    &lt;div&gt;\n      搜索:{&quot; &quot;}\n      &lt;input\n        value={filter}\n        onChange={event =&gt; setFilter(event.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default GlobalFilter\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useGlobalFilter } from &quot;react-table&quot;\nimport GlobalFilter from &quot;./GlobalFilter&quot;\n\nconst FilterTable = () =&gt; {\n  const { state, setGlobalFilter } = useTable({}, useGlobalFilter)\n  const { globalFilter } = state\n  return (\n    &lt;&gt;\n      &lt;GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} /&gt;\n      &lt;table&gt;&lt;/table&gt;\n    &lt;/&gt;\n  )\n}\nexport default FilterTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_8-8-实现列过滤" tabindex="-1"><a class="header-anchor" href="#_8-8-实现列过滤" aria-hidden="true">#</a> 8.8 实现列过滤</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175352248.png" alt="image-20220412175352248"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// ColumnFilter.js\n// 进行列搜索的搜索框组件\nconst ColumnFilter = ({ column }) =&gt; {\n  const { filterValue, setFilter } = column\n  return (\n    &lt;div&gt;\n      搜索:{&quot; &quot;}\n      &lt;input\n        value={filterValue}\n        onChange={event =&gt; setFilter(event.target.value)}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\nexport default ColumnFilter\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// FilterTable.js\nimport { useFilters } from &quot;react-table&quot;\n\nconst FilterTable = () =&gt; {\n  const { } = useTable({}, useFilters, useGlobalFilter)\n  return (\n    &lt;thead&gt;\n      &lt;th&gt;\n        &lt;div&gt;\n          {column.canFilter ? column.render(&quot;Filter&quot;) : null}\n        &lt;/div&gt;\n      &lt;/th&gt;\n    &lt;/thead&gt;\n  )\n}\nexport default FilterTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// columns.js</span>\n<span class="token keyword">import</span> ColumnFilter <span class="token keyword">from</span> <span class="token string">&quot;./ColumnFilter&quot;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Filter</span><span class="token operator">:</span> ColumnFilter\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_8-9-禁用过滤" tabindex="-1"><a class="header-anchor" href="#_8-9-禁用过滤" aria-hidden="true">#</a> 8.9 禁用过滤</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175400653.png" alt="image-20220412175400653"></p><p>在表格中的某一列不想使用过滤，需要显式进行声明，否则报错，声明如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// columns.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">disableFilters</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_8-10-设置默认列属性" tabindex="-1"><a class="header-anchor" href="#_8-10-设置默认列属性" aria-hidden="true">#</a> 8.10 设置默认列属性</h4><p>在每一列中 Filter 配置选项的值都是一样的，通过配置默认列可以去除重复配置。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// FilterTable.js\nimport ColumnFilter from &quot;./ColumnFilter&quot;\n\nconst FilterTable = () =&gt; {\n  const defaultColumn = useMemo(() =&gt; ({ Filter: ColumnFilter }), [])\n  const {} = useTable({ defaultColumn })\n}\nexport default FilterTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后删除 columns.js 文件中的 Filter 配置选项。</p><h4 id="_8-11-实现过滤防抖" tabindex="-1"><a class="header-anchor" href="#_8-11-实现过滤防抖" aria-hidden="true">#</a> 8.11 实现过滤防抖</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/12.gif" alt="12"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// GlobalFilter.js\nimport { useAsyncDebounce } from &quot;react-table&quot;\nimport { useState } from &quot;react&quot;\n\nconst GlobalFilter = ({ filter, setFilter }) =&gt; {\n  const [value, setValue] = useState(filter)\n  const onChange = useAsyncDebounce(() =&gt; {\n    setFilter(value)\n  }, 1000)\n  return (\n    &lt;div&gt;\n      搜索:{&quot; &quot;}\n      &lt;input\n        value={value || &quot;&quot;}\n        onChange={event =&gt; {\n          setValue(event.target.value)\n          onChange()\n        }}\n      /&gt;\n    &lt;/div&gt;\n  )\n}\nexport default GlobalFilter\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="_8-12-实现基本分页" tabindex="-1"><a class="header-anchor" href="#_8-12-实现基本分页" aria-hidden="true">#</a> 8.12 实现基本分页</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175435759.png" alt="image-20220412175435759"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// PaginationTable.js\nimport { usePagination } from &quot;react-table&quot;\n\nconst PaginationTable = () =&gt; {\n  const {\n    // 分页数据\n    page,\n    // 跳转到下一页\n    nextPage,\n    // 跳转到上一页\n    previousPage,\n    // 是否存在下一页\n    canNextPage,\n    // 是否存在上一页\n    canPreviousPage,\n    // 一共有多少页\n    pageCount,\n    state,\n  } = useTable({}, usePagination)\n  // 页码\n  const { pageIndex } = state\n\n  return (\n    &lt;&gt;\n      &lt;table&gt;\n        &lt;tbody&gt;\n          {page.map(row =&gt; {})}\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n      &lt;div&gt;\n        &lt;span&gt;\n          {pageIndex + 1} / {pageCount}\n        &lt;/span&gt;\n        &lt;button disabled={!canPreviousPage} onClick={() =&gt; previousPage()}&gt;\n          上一页\n        &lt;/button&gt;\n        &lt;button disabled={!canNextPage} onClick={() =&gt; nextPage()}&gt;\n          下一页\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\nexport default PaginationTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="_8-13-实现页码跳转" tabindex="-1"><a class="header-anchor" href="#_8-13-实现页码跳转" aria-hidden="true">#</a> 8.13 实现页码跳转</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175452152.png" alt="image-20220412175452152"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { usePagination } from &quot;react-table&quot;\n\nconst PaginationTable = () =&gt; {\n  const { gotoPage } = useTable({ initialState: { pageIndex: 3 } }, usePagination)\n  return (\n    &lt;div&gt;\n      &lt;span&gt;\n        跳转到:{&quot; &quot;}\n        &lt;input\n          type=&quot;number&quot;\n          style={{ width: 50 }}\n          value={pageIndex + 1}\n          onChange={event =&gt; gotoPage(Number(event.target.value) - 1)}\n         /&gt;\n      &lt;/span&gt;\n      &lt;button disabled={!canPreviousPage} onClick={() =&gt; gotoPage(0)}&gt;\n        第一页\n      &lt;/button&gt;\n      &lt;button disabled={!canNextPage} onClick={() =&gt; gotoPage(pageCount - 1)}&gt;\n        最后一页\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default PaginationTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_8-14-设置数据显示条数" tabindex="-1"><a class="header-anchor" href="#_8-14-设置数据显示条数" aria-hidden="true">#</a> 8.14 设置数据显示条数</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175459231.png" alt="image-20220412175459231"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { usePagination } from &quot;react-table&quot;\n\nconst PaginationTable = () =&gt; {\n  const { setPageSize } = useTable({initialState: {pageSize: 25}})\n  const { pageSize } = state\n\n  return (\n    &lt;select value={pageSize} onChange={event =&gt; setPageSize(Number(event.target.value))}&gt;\n      {[10, 25, 50].map(pagesize =&gt; (\n        &lt;option key={pagesize} value={pagesize}&gt;\n          显示 {pagesize} 条数据\n        &lt;/option&gt;\n      ))}\n    &lt;/select&gt;\n  )\n}\n\nexport default PaginationTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_8-15-实现选择行数据" tabindex="-1"><a class="header-anchor" href="#_8-15-实现选择行数据" aria-hidden="true">#</a> 8.15 实现选择行数据</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175512087.png" alt="image-20220412175512087"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// Checkbox.js\nimport { forwardRef } from &quot;react&quot;\n// 将 indeterminate 从 props 单独解构出来, 它不能直接被添加到 input 身上\n// ref: 因为 react-table 要为复选添加功能, 要对其进行操作, 所以通过 Ref 的方式获取该复选\n// rest: 通过 props 的方式向复选框中添加属性以实现复选框的单选和全选功能\nconst Checkbox = forwardRef(({ indeterminate, ...rest }, ref) =&gt; {\n  return &lt;input type=&quot;checkbox&quot; ref={ref} {...rest} /&gt;\n})\n\nexport default Checkbox\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// RowSelection.js\n// 实现选择行数据功能\nimport { useRowSelect } from &quot;react-table&quot;\n// 通过此复选框选择行数据\nimport Checkbox from &quot;./Checkbox&quot;\n\nconst RowSelection = () =&gt; {\n  const {\n    // 选择的结果数组\n    selectedFlatRows\n  } = useTable({ columns, data }, useRowSelect, hooks =&gt; {\n    // 在初始化表格实例对象时调用\n    // hooks: 对象, 钩子函数集合\n    // 以编程方式向表格中添加列\n    hooks.visibleColumns.push(columns =&gt; {\n      // columns 现有的列数据\n      return [\n        {\n          id: &quot;selection&quot;,\n          Header: ({ getToggleAllRowsSelectedProps }) =&gt; (\n            // 实现全选功能\n            &lt;Checkbox {...getToggleAllRowsSelectedProps()} /&gt;\n          ),\n          // 实现单选功能\n          Cell: ({ row }) =&gt; &lt;Checkbox {...row.getToggleRowSelectedProps()} /&gt;\n        },\n        ...columns\n      ]\n    })\n  })\n\n  // 只显示前 10 条数据\n  const firstPageRows = rows.slice(0, 10)\n\n  return (\n    &lt;div&gt;\n      {JSON.stringify(\n        { selectedRows: selectedFlatRows.map(row =&gt; row.original) },\n        null,\n        2\n      )}\n    &lt;/div&gt;\n  )\n}\n\nexport default RowSelection\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h4 id="_8-16-更改列顺序" tabindex="-1"><a class="header-anchor" href="#_8-16-更改列顺序" aria-hidden="true">#</a> 8.16 更改列顺序</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/16.gif" alt="16"></p><p>在更改列顺序时，需要使用到列 id，对列 id 排序就是对列进行排序 。在没有为列添加 id 属性时， accessor 默认为列的 id。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// ColumnOrder.js\nimport { useColumnOrder } from &quot;react-table&quot;\n\nconst ColumnOrder = () =&gt; {\n  const { setColumnOrder } = useTable({}, useColumnOrder)\n  return (\n    &lt;button\n      onClick={() =&gt;\n        setColumnOrder([\n          &quot;id&quot;,\n          &quot;first_name&quot;,\n          &quot;last_name&quot;,\n          &quot;phone&quot;,\n          &quot;country&quot;,\n          &quot;date_of_birth&quot;\n        ])\n       }\n      &gt;\n      更改列书序\n    &lt;/button&gt;\n  )\n}\n\nexport default ColumnOrder\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_8-17-显示隐藏列" tabindex="-1"><a class="header-anchor" href="#_8-17-显示隐藏列" aria-hidden="true">#</a> 8.17 显示隐藏列</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220412175538856.png" alt="image-20220412175538856"></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// ColumnHiding.js\nimport Checkbox from &quot;./Checkbox&quot;\n\nconst ColumnHiding = () =&gt; {\n  const {\n    // 列信息数组\n    allColumns,\n    // 显示和隐藏所有列\n    getToggleHideAllColumnsProps\n  } = useTable()\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;Checkbox {...getToggleHideAllColumnsProps()} /&gt; 显示/隐藏所有列\n      &lt;/div&gt;\n      {allColumns.map(column =&gt; (\n        &lt;div key={column.id}&gt;\n          &lt;Checkbox {...column.getToggleHiddenProps()} /&gt; {column.Header }\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\nexport default ColumnHiding\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_8-18-实现列固定" tabindex="-1"><a class="header-anchor" href="#_8-18-实现列固定" aria-hidden="true">#</a> 8.18 实现列固定</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/02.gif" alt="02"></p>',60),J=(0,e.Uk)("创建样式化组件，为表格设置样式 "),X={href:"https://github.com/GuillaumeJasmin/react-table-sticky#simple-example",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("simple-example"),Y=(0,e.uE)('<div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// TableStyles.js\nimport styled from &quot;styled-components&quot;\n\nexport const Styles = styled.div`\n  .table {\n    border: 1px solid #ddd;\n\n    .tr {\n      :last-child {\n        .td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    .th,\n    .td {\n      padding: 5px;\n      border-bottom: 1px solid #ddd;\n      border-right: 1px solid #ddd;\n      background-color: #fff;\n      overflow: hidden;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    &amp;.sticky {\n      overflow: scroll;\n      .header,\n      .footer {\n        position: sticky;\n        z-index: 1;\n        width: fit-content;\n      }\n\n      .header {\n        top: 0;\n        box-shadow: 0px 3px 3px #ccc;\n      }\n\n      .footer {\n        bottom: 0;\n        box-shadow: 0px -3px 3px #ccc;\n      }\n\n      .body {\n        position: relative;\n        z-index: 0;\n      }\n\n      [data-sticky-td] {\n        position: sticky;\n      }\n\n      [data-sticky-last-left-td] {\n        box-shadow: 2px 0px 3px #ccc;\n      }\n\n      [data-sticky-first-right-td] {\n        box-shadow: -2px 0px 3px #ccc;\n      }\n    }\n  }\n`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div>',1),nn=(0,e._)("p",null,"创建 StickyTable 组件",-1),sn=(0,e._)("p",null,"先拷贝 BasicTable 组件，在此基础上进行修改。",-1),an=(0,e.Uk)("在 "),en={href:"https://github.com/GuillaumeJasmin/react-table-sticky",target:"_blank",rel:"noopener noreferrer"},rn=(0,e.Uk)("react-table-sticky"),ln=(0,e.Uk)(" 此处拷贝 JSX 。"),pn=(0,e.uE)('<div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// StickyTable.js\n// useBlockLayout\n// 为 row, cell 添加固定宽度\n// 将 row 的 display 设置为 flex\n// 将 cell 的 display 设置为 inline-block\n// 将 cell 的 box-sizing 设置 border-box\nimport { useBlockLayout } from &quot;react-table&quot;\nimport { useSticky } from &quot;react-table-sticky&quot;\nimport { Styles } from &quot;./TableStyles&quot;\n\nconst StickyTable = () =&gt; {\n  const {} = useTable({}, useBlockLayout, useSticky)\n  return (\n    &lt;Styles&gt;\n      &lt;div\n        {...getTableProps()}\n        className=&quot;table sticky&quot;\n        style={{ width: 1000, height: 500 }}\n      &gt;\n        &lt;div className=&quot;header&quot;&gt;\n          {headerGroups.map(headerGroup =&gt; (\n            &lt;div {...headerGroup.getHeaderGroupProps()} className=&quot;tr&quot;&gt;\n              {headerGroup.headers.map(column =&gt; (\n                &lt;div {...column.getHeaderProps()} className=&quot;th&quot;&gt;\n                  {column.render(&quot;Header&quot;)}\n                &lt;/div&gt;\n              ))}\n            &lt;/div&gt;\n          ))}\n        &lt;/div&gt;\n        &lt;div {...getTableBodyProps()} className=&quot;body&quot;&gt;\n          {rows.map(row =&gt; {\n            prepareRow(row)\n            return (\n              &lt;div {...row.getRowProps()} className=&quot;tr&quot;&gt;\n                {row.cells.map(cell =&gt; (\n                  &lt;div {...cell.getCellProps()} className=&quot;td&quot;&gt;\n                    {cell.render(&quot;Cell&quot;)}\n                  &lt;/div&gt;\n                ))}\n              &lt;/div&gt;\n            )\n          })}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/Styles&gt;\n  )\n}\n\nexport default StickyTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>',1),tn=(0,e.uE)('<li><p>指定固定列，添加 Email，Age 列。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// columns.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">disableFilters</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">sticky</span><span class="token operator">:</span> <span class="token string">&quot;left&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;First Name&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;First Name&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;first_name&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">sticky</span><span class="token operator">:</span> <span class="token string">&quot;left&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Last Name&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Last Name&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;last_name&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">sticky</span><span class="token operator">:</span> <span class="token string">&quot;left&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Date Of Birth&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Date Of Birth&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;date_of_birth&quot;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">Cell</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dateformat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Country&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Country&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;country&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Phone&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Phone&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;phone&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Email&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Email&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;email&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">Header</span><span class="token operator">:</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">Footer</span><span class="token operator">:</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">accessor</span><span class="token operator">:</span> <span class="token string">&quot;age&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div></li>',1),un={},cn=(0,a(3744).Z)(un,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[r,(0,e._)("p",null,[(0,e._)("a",l,[p,(0,e.Wm)(a)]),t]),u,(0,e._)("p",null,[(0,e._)("a",c,[i,(0,e.Wm)(a)]),o]),b,(0,e._)("h3",m,[d,g,(0,e._)("a",q,[h,(0,e.Wm)(a)])]),k,(0,e._)("p",null,[(0,e._)("a",v,[f,(0,e.Wm)(a)])]),y,(0,e._)("p",null,[(0,e._)("a",x,[_,(0,e.Wm)(a)])]),w,(0,e._)("p",null,[(0,e._)("a",C,[S,(0,e.Wm)(a)]),T,(0,e._)("a",P,[F,(0,e.Wm)(a)])]),R,(0,e._)("h3",G,[N,A,(0,e._)("a",j,[D,(0,e.Wm)(a)])]),H,(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("p",null,[O,(0,e._)("a",M,[I,(0,e.Wm)(a)])]),Q]),B,L,U,E,(0,e._)("li",null,[(0,e._)("p",null,[z,(0,e._)("a",V,[W,(0,e.Wm)(a)]),K])])]),$,(0,e._)("p",null,[J,(0,e._)("a",X,[Z,(0,e.Wm)(a)])]),Y,(0,e._)("ol",null,[(0,e._)("li",null,[nn,sn,(0,e._)("p",null,[an,(0,e._)("a",en,[rn,(0,e.Wm)(a)]),ln]),pn]),tn])],64)}]])}}]);