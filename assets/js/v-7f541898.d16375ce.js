"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[3721],{6800:(e,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-7f541898",path:"/docs/02.Front-endFrameKnowledge/02.React/01.React%20Basic.html",title:"React Basic - 入门知识",lang:"en-US",frontmatter:{title:"React Basic - 入门知识",date:"2022-04-02T15:55:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React Basic - 入门知识",slug:"react-basic-入门知识",children:[{level:3,title:"1. React 概述",slug:"_1-react-概述",children:[]},{level:3,title:"2 React 体验",slug:"_2-react-体验",children:[]},{level:3,title:"3 认识 JSX 语法",slug:"_3-认识-jsx-语法",children:[]},{level:3,title:"4 脚手架工具介绍：create-react-app / vite-react",slug:"_4-脚手架工具介绍-create-react-app-vite-react",children:[]}]}],git:{createdTime:1648886538e3,updatedTime:1650244007e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:2}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/01.React Basic.md"}},2628:(e,a,n)=>{n.r(a),n.d(a,{default:()=>L});var t=n(6252);const s=(0,t.uE)('<h2 id="react-basic-入门知识" tabindex="-1"><a class="header-anchor" href="#react-basic-入门知识" aria-hidden="true">#</a> React Basic - 入门知识</h2><blockquote><p>目标：</p><ol><li>React 概述</li><li>React 体验</li><li>认识 JSX 语法</li><li>脚手架工具介绍：create-react-app / vite-react</li></ol></blockquote><h3 id="_1-react-概述" tabindex="-1"><a class="header-anchor" href="#_1-react-概述" aria-hidden="true">#</a> 1. React 概述</h3><blockquote><p>目标：</p><ol><li>什么是 React</li><li>React 的生态和背景</li></ol></blockquote><h4 id="_1-1-什么是-react" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-react" aria-hidden="true">#</a> 1.1 什么是 React</h4><blockquote><p>A JavaScript library for building user interfaces</p><p>一个用于构建用户界面的 JavaScript 库</p></blockquote><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/01.jpeg" alt="01"></p><p>​ React 是一个开源的 Javascript 库，用于构建 Web 应用中的视图层，也就是 Web应用中的前端用户界面MVC中的V层（View）。</p><p>​ React的思想非常独特，性能出众，可以写出重复代码少，逻辑清晰的前端代码。并且可以将用户界面代码HTML+CSS 和 JS 逻辑代码即进行完美的融合。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/carbon.png" alt="carbon"></p><p>​ 除了构建浏览器端的 Web 页面以外，还可以构建移动端的原生 App 应用。</p><blockquote><p>官网地址：https://zh-hans.reactjs.org/</p><p>github地址：https://github.com/facebook/react/</p><p>官网（新）地址（Beta版）：https://reactjs.bootcss.com/</p></blockquote><h4 id="_1-2-react-的生态和背景" tabindex="-1"><a class="header-anchor" href="#_1-2-react-的生态和背景" aria-hidden="true">#</a> 1.2 React 的生态和背景</h4><p>​ 它是由 Facebook 的软件工程师在 2012 年创建，于 2013 年 5 月开源，目前由 Facebook 以及个人开发人员和公司组成的社区维护。</p><p>​ React 生态圈异常活跃，在构建客户端 web 应用的过程中你遇到的问题几乎都可以在社区中找到答案。</p>',15),r={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("Redux"),c={href:"https://mobx.js.org/README.html",target:"_blank",rel:"noopener noreferrer"},p=(0,t.Uk)("MobX"),i={href:"https://recoiljs.org/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("Recoil"),u={href:"https://formik.org/",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("Formik"),b={style:{"text-align":"center"}},m={href:"https://react-table.tanstack.com/",target:"_blank",rel:"noopener noreferrer"},g=(0,t.Uk)("React Table"),h={href:"https://nextjs.org/",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("Next.js"),k={href:"https://www.gatsbyjs.com/",target:"_blank",rel:"noopener noreferrer"},_=(0,t.Uk)("Gatsby"),x={href:"https://react-query.tanstack.com/",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("React Query"),q={href:"https://swr.vercel.app/zh-CN",target:"_blank",rel:"noopener noreferrer"},R=(0,t.Uk)("SWR"),S={style:{"text-align":"center"}},j={href:"https://reactrouter.com/",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("React Router"),J={href:"https://react-spring.io/",target:"_blank",rel:"noopener noreferrer"},W=(0,t.Uk)("React Spring"),E={href:"https://styled-components.com/",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("Styled-Components"),M={href:"https://ant.design/docs/react/introduce-cn",target:"_blank",rel:"noopener noreferrer"},X=(0,t.Uk)("Ant Design"),U={href:"https://mui.com/zh/",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Uk)("Material UI"),F={style:{"text-align":"center"}},B={href:"https://mswjs.io/",target:"_blank",rel:"noopener noreferrer"},G=(0,t.Uk)("MSW"),H=(0,t.uE)('<h3 id="_2-react-体验" tabindex="-1"><a class="header-anchor" href="#_2-react-体验" aria-hidden="true">#</a> 2 React 体验</h3><blockquote><p>目标：</p><ol><li>Browser 端（引入方式）</li><li>createElement</li><li>render</li><li>practice（练习）</li></ol></blockquote><h4 id="_2-1-browser-端-引入方式" tabindex="-1"><a class="header-anchor" href="#_2-1-browser-端-引入方式" aria-hidden="true">#</a> 2.1 Browser 端（引入方式）</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/react/17.0.2/umd/react.production.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ React 可以构建在浏览器中运行的 web 应用，也可以构建在移动端运行的原生应用，React 在构建这两种应用时会有一些通用方法和一些非通用方法，通用方法都被放置在了 <code>react</code> 文件中，非通用方法比如实现 web 应用的方法被放置在了 <code>react-dom</code> 中，实现移动端应用的方法被放置在了 <code>react-native-web</code> 文件中。</p><ul><li><p>React：核心库，包括了构建 Web 应用和移动端应用通用方法</p></li><li><p>React-dom：只包含了构建 web 应用的方法</p></li><li><p>React-Native-Web：只包含构建移动端应用的方法</p></li></ul><h4 id="_2-2-createelement-创建虚拟-dom-元素" tabindex="-1"><a class="header-anchor" href="#_2-2-createelement-创建虚拟-dom-元素" aria-hidden="true">#</a> 2.2 createElement 创建虚拟 Dom 元素</h4><p>​ 当引入了 <code>React</code> 核心库文件后，window 对象下会多出一个 <code>React</code> 对象，该对象下面的<code>createElement</code> 方法用于创建元素</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/createElement.png" alt="createElement"></p><p>例如：</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/createElement-react-render.png" alt="createElement-react-render"></p><h4 id="_2-3-render-渲染" tabindex="-1"><a class="header-anchor" href="#_2-3-render-渲染" aria-hidden="true">#</a> 2.3 Render 渲染</h4><p>​ 当引入了 <code>React-Dom</code> 文件后，Window 对象下会多出 <code>ReactDOM</code> 对象，对象下的 <code>render</code> 方法就是用来渲染元素的。</p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/react-render.png" alt="react-render"></p><p><code>container:</code></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/container.png" alt="container"></p><p>使用示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>ReactDOM.render(div, document.getElementById(&quot;root&quot;));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_2-4-practice-练习" tabindex="-1"><a class="header-anchor" href="#_2-4-practice-练习" aria-hidden="true">#</a> 2.4 practice（练习）</h4><blockquote><p>目标：</p><p>​ 将指定的 HTML 结构使用 React 提供的方式渲染(createElement方法)</p></blockquote><p>![paratice - html struture](https://raw.githubusercontent.com/Sue-52/PicGo/main/images/paratice - html struture.png)</p><p>渲染：</p><p>![paratice - react render](https://raw.githubusercontent.com/Sue-52/PicGo/main/images/paratice - react render.png)</p><h3 id="_3-认识-jsx-语法" tabindex="-1"><a class="header-anchor" href="#_3-认识-jsx-语法" aria-hidden="true">#</a> 3 认识 JSX 语法</h3><blockquote><p>目标：</p><ol><li>已知问题</li><li>JSX 是什么</li><li>JSX 语法规则</li></ol></blockquote><h4 id="_3-1-已知问题" tabindex="-1"><a class="header-anchor" href="#_3-1-已知问题" aria-hidden="true">#</a> 3.1 已知问题</h4><p>​ 由于 <code>React</code> 内部的优化机制所制，其必须使用 <code>createElement</code> 方法进行用户界面的构建，但是对于开发者来说这样增加了编写代码的复杂度和开销。</p><p>​ 为了解决以上问题，<code>React</code> 为 <code>createElement</code> 方法创造了替代语法，这种语法和传统的 HTML 语法相似度极高, 这样开发者就可以使用熟悉的语法构建界面了。在应用构建阶段, 再使用 <code>balbel</code> 将这种替代语法转换为 <code>createElement</code> 方法, 这样 React 又可以使用它创建元素了。</p><p>原先创建元素：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const button = React.createElement(&quot;button&quot;, { type: &quot;button&quot; }, &quot;按钮&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>后续创建元素：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const button = &lt;button type=&quot;button&quot;&gt;按钮&lt;/button&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_3-2-jsx-是什么" tabindex="-1"><a class="header-anchor" href="#_3-2-jsx-是什么" aria-hidden="true">#</a> 3.2 JSX 是什么</h4><p>​ JSX 是 JavaScript 编程语言的语法扩充，是由 Facebook 创建的，用于在 React 中构建用户界面。</p><p>使用：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const button = &lt;button&gt; button &lt;/button&gt;\nReactDOM.render(button, document.getElementById(&quot;root&quot;));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 但是这种语法浏览器是无法识别的，所以我们需要使用 <code>Babel</code> 转换，将其转换为 <code>React.createElement</code> 方法的调用，所以说 JSX 本质就是 Javascript。</p><ul><li><p>Babel：将语法转换为 <code>React.createElement</code> 方法的调用</p></li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/@babel/standalone@7.13.17/babel.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_3-3-jsx-语法规则" tabindex="-1"><a class="header-anchor" href="#_3-3-jsx-语法规则" aria-hidden="true">#</a> 3.3 JSX 语法规则</h4><p>​ JSX 的基本语法规则：遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。</p><h5 id="_1-跟标记" tabindex="-1"><a class="header-anchor" href="#_1-跟标记" aria-hidden="true">#</a> 1. 跟标记</h5><p>​ 在使用 JSX 语法创建元素时，元素的最外层需要一个跟标记。</p><p>错误用法：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const jsx = (\n    &lt;p&gt; p1 &lt;/p&gt;\n    &lt;p&gt; p2 &lt;/p&gt;\n    &lt;p&gt; p3 &lt;/p&gt;\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>正确用法：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const jsx = (\n\t&lt;div&gt;\n    \t&lt;p&gt; p1 &lt;/p&gt;\n    \t&lt;p&gt; p2 &lt;/p&gt;\n    \t&lt;p&gt; p3 &lt;/p&gt;\n    &lt;/div&gt;\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>​ 为了避免因为满足规则而出现的无意义标签，<code>React</code> 提供了占位符标记，占位符标记在渲染后不会产生真实 DOM 对象</p><p>使用：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const jsx = (\n\t&lt;React.Fragment&gt;\n    \t&lt;p&gt; p1 &lt;/p&gt;\n    \t&lt;p&gt; p2 &lt;/p&gt;\n    \t&lt;p&gt; p3 &lt;/p&gt;\n\t&lt;/React.Fragment&gt;\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>简写方法：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const jsx = (\n\t&lt;&gt;\n    \t&lt;p&gt; p1 &lt;/p&gt;\n    \t&lt;p&gt; p2 &lt;/p&gt;\n    \t&lt;p&gt; p3 &lt;/p&gt;\n\t&lt;/&gt;\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_2-单标记需闭合" tabindex="-1"><a class="header-anchor" href="#_2-单标记需闭合" aria-hidden="true">#</a> 2. 单标记需闭合</h5><p>错误示范：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;input type=&quot;text&quot; &gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>正确示范：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;input type=&quot;text&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="_3-属性命名规则" tabindex="-1"><a class="header-anchor" href="#_3-属性命名规则" aria-hidden="true">#</a> 3. 属性命名规则</h5><p>属性名应该遵循小驼峰命名发</p><p>示例：</p><ol><li><p>HTML 写法</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">readonly</span> <span class="token attr-name">autofoucs</span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>JSX 写法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;input maxLength=&quot;10&quot; readOnly autoFoucs /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h5 id="_4-classname-属性" tabindex="-1"><a class="header-anchor" href="#_4-classname-属性" aria-hidden="true">#</a> 4. className 属性</h5><p>​ 再给元素添加类名应该使用 className 属性，因为 class 在 Javascript 中是保留关键字。</p><ol><li><p>HTML写法</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> I am a div <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>JSX 写法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;div className=&quot;div&quot;&gt; I am a div &lt;/div&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h5 id="_5-htmlfor-属性" tabindex="-1"><a class="header-anchor" href="#_5-htmlfor-属性" aria-hidden="true">#</a> 5. HtmlFor 属性</h5><p>​ 在 label 标签中 使用 <code>htmlFor</code> 属性，因为 for 在 Javascript 中是保留关键字。</p><ol><li><p>HTML写法</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>This is a test input<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>JSX 写法</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;label htmlFor=&quot;demo&quot;&gt;This is a test input&lt;/label&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h5 id="_6-jsx-格式美化" tabindex="-1"><a class="header-anchor" href="#_6-jsx-格式美化" aria-hidden="true">#</a> 6. JSX 格式美化</h5><p>​ 在多个 JSX 标签同时使用时避免了不一定会换行，只需在最外层的根元素外套上一组小括号即可使标记格式对其，避免了格式混乱产生的错误。</p><p>示例：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const element = (\n  &lt;&gt;\n    &lt;div&gt;header&lt;/div&gt;\n    &lt;div&gt;footer&lt;/div&gt;\n  &lt;/&gt;\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_7-注释" tabindex="-1"><a class="header-anchor" href="#_7-注释" aria-hidden="true">#</a> 7. 注释</h5><p>在 JSX 中注释的写法为：<code>{/* */}</code>、<code>//</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n    // 注释\n    const data = 0;\n    return (\n    \t&lt;&gt;\n       \t    {/* 注释 */}\n        \t&lt;div&gt;div&lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_8-插值语法" tabindex="-1"><a class="header-anchor" href="#_8-插值语法" aria-hidden="true">#</a> 8. 插值语法</h5><p>在 JSX 中可以使用插值语法将动态数据插入到指定位置。</p><ol><li><p>插入文本</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const someClass = &quot;some-class&quot;\nconst someText = &quot;I am interpolating text&quot;\nconst text_jsx = &lt;p className={someClass}&gt;{someText}&lt;/p&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>执行计算</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const x = 10\nconst y = 20\nconst paragraph = &lt;p&gt;{x * y}&lt;/p&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>渲染函数返回值</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function getValue() {\n  return &quot;some value from getValue function&quot;\n}\nconst text = &lt;p&gt;{getValue()}&lt;/p&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>插值对象</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const obj = {name: &quot;张三&quot;};\nconst text = &lt;p&gt;{obj}&lt;/p&gt;\nconst other = &lt;p&gt;{{name: &quot;李四&quot;}}&lt;/p&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="_4-脚手架工具介绍-create-react-app-vite-react" tabindex="-1"><a class="header-anchor" href="#_4-脚手架工具介绍-create-react-app-vite-react" aria-hidden="true">#</a> 4 脚手架工具介绍：create-react-app / vite-react</h3><blockquote><p>目标：</p><ol><li>create-react-app</li><li>vite</li></ol></blockquote><h4 id="_4-1-create-react-app" tabindex="-1"><a class="header-anchor" href="#_4-1-create-react-app" aria-hidden="true">#</a> 4.1 create-react-app</h4><p>​ <code>create-react-app</code> 是 React 官方提供的用于创建 React 应用的脚手架工具。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> create-react-app -g\n<span class="token function">npm</span> init react-app react-demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_4-2-vite" tabindex="-1"><a class="header-anchor" href="#_4-2-vite" aria-hidden="true">#</a> 4.2 vite</h4><p>​ <code>vite</code> 是一种新型的前端构建工具，它能显著改善前端开发体验。</p><p>Vite由两个主要部分组成：</p><ol><li>dev server：利用浏览器的ESM能力来提供源文件，具有丰富的内置功能并具有高效的HMR</li><li>生产构建：生产环境利用Rollup来构建代码，提供指令用来优化构建过程</li></ol><p>​ Vite作为一个基于浏览器原生ESM的构建工具，它省略了开发环境的打包过程，利用浏览器去解析imports，在服务端按需编译返回。同时，在开发环境拥有速度快到惊人的模块热更新，且热更新的速度不会随着模块增多而变慢。因此，使用Vite进行开发，至少会比Webpack快10倍左右。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> init @vitejs/app 项目名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>选择 react 选项</strong></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325160955490.png" alt="image-20220325160955490"></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/image-20220325161010579.png" alt="image-20220325161010579"></p><p>即可创建项目。</p>',92),P={},L=(0,n(3744).Z)(P,[["render",function(e,a){const n=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[s,(0,t._)("table",null,[(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",null,[(0,t._)("a",r,[l,(0,t.Wm)(n)])]),(0,t._)("th",null,[(0,t._)("a",c,[p,(0,t.Wm)(n)])]),(0,t._)("th",null,[(0,t._)("a",i,[o,(0,t.Wm)(n)])]),(0,t._)("th",null,[(0,t._)("a",u,[d,(0,t.Wm)(n)])]),(0,t._)("th",b,[(0,t._)("a",m,[g,(0,t.Wm)(n)])])])]),(0,t._)("tbody",null,[(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",h,[v,(0,t.Wm)(n)])]),(0,t._)("td",null,[(0,t._)("a",k,[_,(0,t.Wm)(n)])]),(0,t._)("td",null,[(0,t._)("a",x,[f,(0,t.Wm)(n)])]),(0,t._)("td",null,[(0,t._)("a",q,[R,(0,t.Wm)(n)])]),(0,t._)("td",S,[(0,t._)("a",j,[w,(0,t.Wm)(n)])])]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",J,[W,(0,t.Wm)(n)])]),(0,t._)("td",null,[(0,t._)("a",E,[y,(0,t.Wm)(n)])]),(0,t._)("td",null,[(0,t._)("a",M,[X,(0,t.Wm)(n)])]),(0,t._)("td",null,[(0,t._)("a",U,[T,(0,t.Wm)(n)])]),(0,t._)("td",F,[(0,t._)("a",B,[G,(0,t.Wm)(n)])])])])]),H],64)}]])}}]);