"use strict";(self.webpackChunkvuepress_theme_reco_demo=self.webpackChunkvuepress_theme_reco_demo||[]).push([[6355],{4992:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-747a0fc5",path:"/docs/02.Front-endFrameKnowledge/02.React/04.React%20Development%20Advanced.html",title:"React Development Advanced -- 组件开发进阶",lang:"en-US",frontmatter:{title:"React Development Advanced -- 组件开发进阶",date:"2022-04-06T20:55:00.000Z",categories:["React"],tags:["React"]},excerpt:"",headers:[{level:2,title:"React Development Advanced -- 组件开发进阶",slug:"react-development-advanced-组件开发进阶",children:[{level:3,title:"1. useState",slug:"_1-usestate",children:[]},{level:3,title:"2. useReducer",slug:"_2-usereducer",children:[]},{level:3,title:"3. useLayoutEffect",slug:"_3-uselayouteffect",children:[]},{level:3,title:"4. UseRef",slug:"_4-useref",children:[]},{level:3,title:"5. memo",slug:"_5-memo",children:[]},{level:3,title:"6. useMemo",slug:"_6-usememo",children:[]},{level:3,title:"7. useCallback",slug:"_7-usecallback",children:[]},{level:3,title:"8. useImperativeHandle",slug:"_8-useimperativehandle",children:[]},{level:3,title:"9. Custom Hooks",slug:"_9-custom-hooks",children:[]},{level:3,title:"10. Children",slug:"_10-children",children:[]},{level:3,title:"11. Context",slug:"_11-context",children:[]}]}],git:{createdTime:1649661453e3,updatedTime:1649758266e3,contributors:[{name:"Sue-52",email:"1219243947@qq.com",commits:2}]},filePathRelative:"docs/02.Front-endFrameKnowledge/02.React/04.React Development Advanced.md"}},8385:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var e=a(6252);const t=(0,e.uE)('<h2 id="react-development-advanced-组件开发进阶" tabindex="-1"><a class="header-anchor" href="#react-development-advanced-组件开发进阶" aria-hidden="true">#</a> React Development Advanced -- 组件开发进阶</h2><blockquote><p>目标：</p><ol><li>useState (声明状态)</li><li>useReducer (状态管理)</li><li>useLayoutEffect (副作用代码处理)</li><li>useRef (获取元素 DOM 对象)</li><li>memo (优化渲染)</li><li>useMemo (缓存状态)</li><li>useCallback (缓存方法)</li><li>useImperativeHandle (子父通讯)</li><li>Custom Hooks (自定义 hooks)</li><li>Children (进一步优化 props.children)</li><li>Context (组件状态共享)</li></ol></blockquote><p>进一步的对 hook 方法的了解和学习。</p><h3 id="_1-usestate" tabindex="-1"><a class="header-anchor" href="#_1-usestate" aria-hidden="true">#</a> 1. useState</h3><blockquote><p>目标：</p><ol><li>状态异步更新</li><li>状态覆盖</li><li>状态合并</li><li>初始化状态函数</li></ol></blockquote><h4 id="_1-1-状态异步更新" tabindex="-1"><a class="header-anchor" href="#_1-1-状态异步更新" aria-hidden="true">#</a> 1.1 状态异步更新</h4><p>设置状态的方法在调用后不会立即更新视图，而是要等到当前执行栈中所有代码执行完成以后在更新视图，这是为了防止视图被频繁更新导致性能降低。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const onClickHandler = () =&gt; {\n    setCount(count + 1);\n    console.log(count); // 此处的输出 count 值总是未更新前的\n  };\n  return &lt;button onClick={onClickHandler}&gt;{count}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果开发者就想在 count 被更新后执行一些操作，可以通过 useEffect 方法监听状态变化。</p><h4 id="_1-2-状态覆盖" tabindex="-1"><a class="header-anchor" href="#_1-2-状态覆盖" aria-hidden="true">#</a> 1.2 状态覆盖</h4><p>多次调用更新状态的方法，如果参数类型不为函数，那么React内部会进行状态的覆盖。</p><p>只有最后一个状态才会生效。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [obj, setObj] = useState({});\n  const onClickHandler = () =&gt; {\n    setObj({ a: 1 });\n    setObj({ b: 1 });\n    setObj({ c: 1 });\n    setObj({ d: 1 });\n    // 最终的状态结果就是 { d: 1 }\n    // 注意这里是状态对象整体覆盖，而不是属性合并\n  };\n  return &lt;button onClick={onClickHandler}&gt;{JSON.stringify(obj)}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_1-3-状态合并" tabindex="-1"><a class="header-anchor" href="#_1-3-状态合并" aria-hidden="true">#</a> 1.3 状态合并</h4><p>如果参数为函数，并进行多次的调用，那么会进行状态的合并，一步一步按照函数顺序执行。</p><p>函数的第一个参数保存和状态的初始值</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>function App() {\n  const [obj, setObj] = useState({});\n  const onClickHandler = () =&gt; {\n    setObj((prev) =&gt; ({ ...prev, a: 1 }));\n    setObj((prev) =&gt; ({ ...prev, b: 1 }));\n    setObj((prev) =&gt; ({ ...prev, c: 1 }));\n    setObj((prev) =&gt; ({ ...prev, d: 1 }));\n    // 最终的状态结果就是 { a: 1, d: 1, c: 1, d: 1 }\n    // 每一个 prev 参数都是上一次合并的结果\n  };\n  return &lt;button onClick={onClickHandler}&gt;{JSON.stringify(obj)}&lt;/button&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_1-4-初始化状态函数" tabindex="-1"><a class="header-anchor" href="#_1-4-初始化状态函数" aria-hidden="true">#</a> 1.4 初始化状态函数</h4><p>在使用 useState 方法生命状态时，状态初始值只在组件渲染使用，以后的每次组件渲染中都不会使用，但是如果初始值中包含昂贵的计算，在每次组件重新渲染时都会被执行，导致组件性能变差。</p><p><code>问题代码：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nfunction App() {\n  let inialState = 0;\n  for (let i = 0; i &lt; 100000000; i++) {\n    inialState += i;\n  }\n  const [number, setNumber] = useState(inialState);\n  return (\n    &lt;button onClick={() =&gt; setNumber((prev) =&gt; prev + 1)}&gt;{number}&lt;/button&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>问题：</p><ul><li>门当组件重新渲染，for 循环都会执行一次，浪费了大量的性能。</li></ul><p>如果将初始状态的代码放入 useState 中，那么只会在初始状态函数调用时使用</p><p><code>解决问题：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nfunction App() {\n  const [number, setNumber] = useState(() =&gt; {\n    let inialState = 0;\n    for (let i = 0; i &lt; 100000000; i++) {\n      inialState += i;\n    }\n    return inialState;\n  });\n  return (\n    &lt;button onClick={() =&gt; setNumber((prev) =&gt; prev + 1)}&gt;{number}&lt;/button&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_2-usereducer" tabindex="-1"><a class="header-anchor" href="#_2-usereducer" aria-hidden="true">#</a> 2. useReducer</h3><p>useReducer 是另一种在组件中声明状态管理的方式，适用于逻辑复杂的场景，相当于 useState 的增强方案。</p><p>React 组件本身之应该包含用户界面的渲染逻辑，而用户在操作状态的CRUD时，通常情况使用 useState 在内部进行一些增删改查的操作，使管理状态的逻辑占据组件的大部分主体，时组件变得更加复杂了，所以应该将状态管理的逻辑单独放入一个地方进行管理，方便了后续需的维护。</p><p>使用 useReducer 可以帮助开发者更好的分离组件状态管理逻辑和用户界面渲染逻辑，使代码分离。</p><h4 id="_2-1-工作方式" tabindex="-1"><a class="header-anchor" href="#_2-1-工作方式" aria-hidden="true">#</a> 2.1 工作方式</h4><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/20210219093952144.png" alt="useReducer"></p><ul><li>action 对象：用于描述组件状态要执行什么的操作</li><li>reducer 方法：用于对状态的集中管理和操作的地方</li><li>store 对象：用于设置初始状态和通过reducer方法修改完后传入store对象并修改</li><li>dispatch 方法：用于触发对象状态的操作</li></ul><h4 id="_2-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-2-基本使用" aria-hidden="true">#</a> 2.2 基本使用</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>//正常使用\nconst [state,dispatch]=useReducer(reducer,initState);\n//惰性初始化\nconst [state, dispatch] = useReducer(reducer, initialArg, init);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它接收一个形如 (state, action) =&gt; newState 的 reducer和一个初始值。当然这个初始值也可以通过一个函数计算出来，也就是惰性初始化。如果做惰性初始化，那么useReducer就传递了三个参数，第一个参数依旧是reducer，第三个参数是一个初始化函数，第二个参数是初始化函数要传递的参数列表。</p><p>尽管 useReducer 是扩展的 hook， 而 useState 是基本的 hook，但 useState 实际上执行的也是一个 useReducer。这意味着 useReducer 是更原生的，你能在任何使用 useState 的地方都替换成使用 useReducer。</p><h5 id="_1-案例-计数器" tabindex="-1"><a class="header-anchor" href="#_1-案例-计数器" aria-hidden="true">#</a> 1. 案例：计数器</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useReducer } from &quot;react&quot;;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case &quot;increment&quot;:\n      return state + 1;\n    case &quot;decrement&quot;:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\nfunction Counter() {\n  const [count, dispatch] = useReducer(reducer, 0);\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: &quot;increment&quot; })}&gt;{count}&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: &quot;decrement&quot; })}&gt;{count}&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default Counter;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_3-uselayouteffect" tabindex="-1"><a class="header-anchor" href="#_3-uselayouteffect" aria-hidden="true">#</a> 3. useLayoutEffect</h3><p><code>useLayoutEffect</code> 和 <code>useEffect</code> 两个方法的作用和使用方式都是一样的，都是用来处理副作用代码的，它们之间唯一的区别就是回调函数的执行时机不同。</p><p><code>useEffect 执行时机：</code></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/31.png" alt="useEffect"></p><p><code>useEffect</code> 在组件视图更新完成后执行，组件状态发生变化 -&gt; 比较状态差异 -&gt; 视图更新 -&gt; useEffect</p><p><code>useLayoutEffect 执行时机：</code></p><p><img src="https://raw.githubusercontent.com/Sue-52/PicGo/main/images/32.png" alt="useLayoutEffect"></p><p><code>useLayoutEffect</code> 在组件视图更新前执行，组件状态发生变化 -&gt; 比较状态差异 -&gt; useEffectLayout -&gt; 更新视图</p><h4 id="_3-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_3-1-基础使用" aria-hidden="true">#</a> 3.1 基础使用</h4><p><code>问题代码：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useLayoutEffect, useRef, useState } from &quot;react&quot;;\n\nfunction App() {\n  const [isShow, setIsShow] = useState(false);\n  const divRef = useRef();\n  useEffect(() =&gt; {\n    if (!divRef.current) return;\n    divRef.current.style.top = &quot;100px&quot;;\n  }, [isShow]);\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; setIsShow(!isShow)}&gt;button&lt;/button&gt;\n      {isShow ? (\n        &lt;div ref={divRef} style={{ position: &quot;absolute&quot; }}&gt;\n          div\n        &lt;/div&gt;\n      ) : null}\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>问题：</p><ul><li>在使用 useEffect 会出现元素的闪烁问题，即，在页面初始渲染完成后元素声称在该位置，当用户点击按钮进行位置的修改时先渲染初始状态位置，然后开始渲染 useEffect 内部 DOM 操作。</li></ul><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useLayoutEffect, useRef, useState } from &quot;react&quot;;\n\nfunction App() {\n  const [isShow, setIsShow] = useState(false);\n  const divRef = useRef();\n  useLayoutEffect(() =&gt; {\n    if (!divRef.current) return;\n    divRef.current.style.top = &quot;100px&quot;;\n  }, [isShow]);\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; setIsShow(!isShow)}&gt;button&lt;/button&gt;\n      {isShow ? (\n        &lt;div ref={divRef} style={{ position: &quot;absolute&quot; }}&gt;\n          div\n        &lt;/div&gt;\n      ) : null}\n    &lt;/&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>使用 useLayoutEffect 后，代码在更新时先进行 useLayoutEffect 内部 DOM 操作后在开始组件的状态渲染。</p><h3 id="_4-useref" tabindex="-1"><a class="header-anchor" href="#_4-useref" aria-hidden="true">#</a> 4. UseRef</h3><blockquote><p>目标：</p><ol><li>获取 DOM 对象</li><li>useRef 缓存数据</li></ol></blockquote><p><code>使用方法：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const refContainer = useRef(initialValue);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过 useRef 方法返回一个可变的 ref 对象，其 <code>current</code> 属性被初始化为传入的参数（initialValue）。</p><p>它保存的数据脱离组件的渲染，当组件在重新渲染后仍然存在保持不变。</p><h4 id="_4-1-获取-dom-对象" tabindex="-1"><a class="header-anchor" href="#_4-1-获取-dom-对象" aria-hidden="true">#</a> 4.1 获取 DOM 对象</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useRef } from &quot;react&quot;;\nfunction Example() {\n  const divRef = useRef();\n  function changeDOM() {\n    // 获取整个div\n    console.log(&quot;整个div&quot;, divRef.current);\n    // 获取div的class\n    console.log(&quot;div的class&quot;, divRef.current.className);\n    // 获取div自定义属性\n    console.log(&quot;div自定义属性&quot;, divRef.current.getAttribute(&quot;data-clj&quot;));\n  }\n  return (\n    &lt;div&gt;\n      &lt;div className=&quot;div-class&quot; data-clj=&quot;我是div的自定义属性&quot; ref={divRef}&gt;\n        我是div\n      &lt;/div&gt;\n      &lt;button onClick={(e) =&gt; changeDOM()}&gt;获取DOM&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>useRef, 它有一个参数可以作为缓存数据的初始值，返回值可以被 DOM 元素 ref 标记，可以获取被标记的元素节点。</p><h4 id="_4-2-useref-缓存数据" tabindex="-1"><a class="header-anchor" href="#_4-2-useref-缓存数据" aria-hidden="true">#</a> 4.2 useRef 缓存数据</h4><p>useEffect、useReducer 这两个 hooks 都可以保存当前数据源，但是如果当执行更新操作后，整体组件会进行重新的渲染，函数内部声明的状态也会被重置；如果想要保存数据且不触发函数的更新则可以使用 useRef 方法。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import React, { useRef, useState, useEffect } from &quot;react&quot;;\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  const numRef = useRef(count);\n\n  useEffect(() =&gt; {\n    numRef.current = count;\n  }, [count]);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;count上一次的值: {numRef.current}&lt;/h2&gt;\n      &lt;h2&gt;count这一次的值: {count}&lt;/h2&gt;\n      &lt;button onClick={(e) =&gt; setCount(count + 10)}&gt;+10&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\nexport default Example;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>当 ref 对象内容发生辩护啊使， useRef 不会通知变更 <code>.current</code> 属性不会引发组件的重渲染。</p><p>问题：能不能不使用 useRef 方法而使用 useState 方法记录组件渲染次数 ?</p><p>答案是不能，因为通过 <code>useState</code> 方法声明的是组件状态，组件状态被改变会触发视图更新，一旦视图更新就要通过 count 记录更新次数，count 被改变又会触发视图更新，从而引发组件的无限次循环渲染。</p><h3 id="_5-memo" tabindex="-1"><a class="header-anchor" href="#_5-memo" aria-hidden="true">#</a> 5. memo</h3><blockquote><p>目标：</p><ol><li>memo 详情</li><li>memo 使用</li></ol></blockquote><p>问题代码：</p><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect, useState } from &quot;react&quot;;\nimport ShowName from &quot;./ShowName&quot;;\n\nfunction App() {\n  const [index, setIndex] = useState(0);\n  useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {\n      setIndex((prev) =&gt; prev + 1);\n    }, 1000);\n    return () =&gt; clearInterval(timer);\n  }, []);\n  return (\n    &lt;&gt;\n      &lt;p&gt;{index}&lt;/p&gt;\n      &lt;ShowName name=&quot;张三&quot; /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/ShowName.js\nimport { useEffect } from &quot;react&quot;;\n\nfunction ShowName({ name }) {\n  useEffect(() =&gt; {\n    console.log(&quot;ShowName rendered&quot;);\n  });\n  return &lt;div&gt;{name}&lt;/div&gt;;\n}\n\nexport default ShowName;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>问题：</p><ul><li>每当父组件引起更新时，子组件也会随之更新但是子组件本身没有任何变化</li></ul><p>浪费了性能，子组件可在数据没有变化的情况应该保持不变。</p><h4 id="_5-1-memo-详情" tabindex="-1"><a class="header-anchor" href="#_5-1-memo-详情" aria-hidden="true">#</a> 5.1 memo 详情</h4><p>React.memo(...)<code>是React v16.6引进来的新属性。它的作用和</code>React.PureComponent<code>类似，是用来控制函数组件的重新渲染的。</code>React.memo(...)<code> 其实就是函数组件的</code>React.PureComponent</p><h4 id="_5-2-memo-使用" tabindex="-1"><a class="header-anchor" href="#_5-2-memo-使用" aria-hidden="true">#</a> 5.2 memo 使用</h4><p>memo 方法可以为组件添加输入数据 (props) 的比对逻辑，如果当前渲染时的输入数据和上一次渲染时的输入数据一致，阻止组件重新渲染。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { memo } from &quot;react&quot;;\n\nexport default memo(ShowName);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>memo 方法内部采用的是浅层比较，比较基本数据类型的值是否相同，比较引用类型是否为相同的引用地址。</p><p>以下代码在父组件每次重新渲染时都会生成新的 person 对象，memo 方法在内部比较时每次得到的都是不同的对象，所以每次子组件也会跟着重新渲染。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>&lt;ShowPerson person={{ name: &quot;张三&quot; }} /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>memo 方法的第二个参数即为比较函数，可以通过它解决以上问题。比较函数的第一个参数为 prevProps，比较函数的第二个参数为 nextProps, 比较函数返回 true 不进行渲染，比较函数返回 false 组件重新渲染。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>export default memo(ShowName, compareFunction);\n\nfunction compareFunction(prevProps, nextProps) {\n  if (prevProps.person.name === nextProps.person.name) {\n    return true;\n  }\n  return false;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_6-usememo" tabindex="-1"><a class="header-anchor" href="#_6-usememo" aria-hidden="true">#</a> 6. useMemo</h3><blockquote><p>目标：</p><ol><li>useMemo 详情</li><li>useMemo 使用</li></ol></blockquote><p>问题代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useState } from &quot;react&quot;;\n\nfunction App() {\n  const [number, setNumber] = useState(0);\n  const [dark, setDark] = useState(false);\n  const styles = {\n    background: dark ? &quot;black&quot; : &quot;white&quot;,\n    color: dark ? &quot;white&quot; : &quot;black&quot;,\n  };\n  const double = slowFunction(number);\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=&quot;number&quot;\n        value={number}\n        onChange={(event) =&gt; setNumber(event.target.value)}\n      /&gt;\n      &lt;div style={styles} onClick={() =&gt; setDark(!dark)}&gt;\n        {double}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction slowFunction(n) {\n  for (let i = 0; i &lt; 1000000000; i++) {}\n  return n * 2;\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>问题：</p><ul><li>在每次组件重新渲染时都会区执行 <code>slowFunction</code> 函数</li><li>函数内部的循环没有进行值的修改</li><li>使得每次渲染都要走循环，浪费了极大的性能</li></ul><h4 id="_6-1-usememo-详情" tabindex="-1"><a class="header-anchor" href="#_6-1-usememo-详情" aria-hidden="true">#</a> 6.1 useMemo 详情</h4><p>通过 <code>useMemo</code> 方法可以对组件中的值进行缓存，就是说在每次组件重新渲染时都返回相同的值，也可以指定哪些状态发生改变时重新计算该值。</p><p><code>useMemo</code> 有助于避免在每个渲染上进行昂贵的计算，提升组件性能。</p><h4 id="_6-2-usememo-使用" tabindex="-1"><a class="header-anchor" href="#_6-2-usememo-使用" aria-hidden="true">#</a> 6.2 useMemo 使用</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect, useMemo, useState } from &quot;react&quot;;\n\nfunction App() {\n  const [number, setNumber] = useState(0);\n  const [dark, setDark] = useState(false);\n  const double = useMemo(() =&gt; {\n    return slowFunction(number);\n  }, [number]);\n  const styles = useMemo(() =&gt; {\n    return {\n      background: dark ? &quot;black&quot; : &quot;white&quot;,\n      color: dark ? &quot;white&quot; : &quot;black&quot;,\n    };\n  }, [dark]);\n  useEffect(() =&gt; {\n    console.log(&quot;styles&quot;);\n  }, [styles]);\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=&quot;number&quot;\n        value={number}\n        onChange={(event) =&gt; setNumber(event.target.value)}\n      /&gt;\n      &lt;div style={styles} onClick={() =&gt; setDark(!dark)}&gt;\n        {double}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction slowFunction(n) {\n  for (let i = 0; i &lt; 1000000000; i++) {}\n  return n * 2;\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="_7-usecallback" tabindex="-1"><a class="header-anchor" href="#_7-usecallback" aria-hidden="true">#</a> 7. useCallback</h3><blockquote><p>目标：</p><ol><li>useCallback 详情</li><li>useCallback 使用</li></ol></blockquote><h4 id="_7-1-usecallback-详情" tabindex="-1"><a class="header-anchor" href="#_7-1-usecallback-详情" aria-hidden="true">#</a> 7.1 useCallback 详情</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>const memoizedCallback = useCallback(\n  () =&gt; {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>返回一个 [memoized] 回调函数。</p><p>把 内联回调函数及依赖像数组作为参数传入 <code>useCallback</code>，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 <code>shouldComponentUpdate</code>）的子组件时，它将非常有用。</p><p>通过 <code>useCallback</code> 方法可以缓存函数，使用组件每次重新渲染都返回相同的函数实例，也可以指定当某个状态发生变化后返回新的函数实例。</p><p>问题代码：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useEffect, useState } from &quot;react&quot;;\n\nfunction App() {\n  const [number, setNumber] = useState(1);\n  const [dark, setDark] = useState(false);\n  const styles = {\n    background: dark ? &quot;black&quot; : &quot;white&quot;,\n    color: dark ? &quot;white&quot; : &quot;black&quot;,\n  };\n  const getItems = () =&gt; {\n    return [number, number + 1, number + 2];\n  };\n  return (\n    &lt;div style={styles}&gt;\n      &lt;input\n        type=&quot;number&quot;\n        value={number}\n        onChange={() =&gt; setNumber((prev) =&gt; prev + 1)}\n      /&gt;\n      &lt;button onClick={() =&gt; setDark((dark) =&gt; !dark)}&gt;button&lt;/button&gt;\n      &lt;List getItems={getItems} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction List({ getItems }) {\n  const [items, setItems] = useState([]);\n  \n  useEffect(() =&gt; {\n    setItems(getItems());\n    console.log(&quot;update items&quot;);\n  }, [getItems]);\n\n  return (\n    &lt;div&gt;\n      {items.map((item) =&gt; (\n        &lt;p key={item}&gt;{item}&lt;/p&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>问题：</p><ul><li>每次组件重渲染都会生成一个新的 <code>getItems</code> ，List 接受的值都是不一样的 <code>getItems</code> 方法</li><li>当点击按钮时，List 组件无变化但是也会重新渲染</li><li>当 <code>getItems</code> 变化时，styles 会重新生成</li></ul><h4 id="_7-2-usecallback-使用" tabindex="-1"><a class="header-anchor" href="#_7-2-usecallback-使用" aria-hidden="true">#</a> 7.2 useCallback 使用</h4><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useCallback } from &quot;react&quot;;\n\nfunction App () {\n  const getItems = useCallback(() =&gt; {\n    return [number, number + 1, number + 2];\n  }, [number]);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_8-useimperativehandle" tabindex="-1"><a class="header-anchor" href="#_8-useimperativehandle" aria-hidden="true">#</a> 8. useImperativeHandle</h3><blockquote><p>目标：</p><ol><li>useImperativeHandle 详情</li><li>useImperativeHandle 使用</li></ol></blockquote><h4 id="_8-1-useimperativehandle-详情" tabindex="-1"><a class="header-anchor" href="#_8-1-useimperativehandle-详情" aria-hidden="true">#</a> 8.1 useImperativeHandle 详情</h4><p>虽然 React 遵循单项数据流原则，但React 也提供了子组件向父组件传递数据方法。</p><p>通过 <code>useImperativeHandle</code> 方法可以实现父组件获取子组件的数据或者调用子组件的里声明的函数。</p><p>父组件通过 useRef 方法创建了一个钩子，用于钩取子组件的数据，子组件在获取到钩子以后，通过 useImperativeHandle 向钩子上暴露数据。</p><h4 id="_8-1-useimperativehandle-使用" tabindex="-1"><a class="header-anchor" href="#_8-1-useimperativehandle-使用" aria-hidden="true">#</a> 8.1 useImperativeHandle 使用</h4><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useRef } from &quot;react&quot;;\nimport Message from &quot;./Message&quot;;\n\nfunction App() {\n  const messageRef = useRef();\n  const onClickHandler = () =&gt; {\n    console.log(messageRef.current.getText());\n    console.log(messageRef.current.input);\n  };\n  return (\n    &lt;&gt;\n      &lt;Message ref={messageRef} /&gt;\n      &lt;button onClick={onClickHandler}&gt;button&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { forwardRef, useImperativeHandle, useRef, useState } from &quot;react&quot;;\n\nfunction Message(props, ref) {\n  const [text, setText] = useState(&quot;&quot;);\n  const inputRef = useRef();\n  // 参数一：获取 对应元素DOM对象\n  // 参数二：回调函数，返回对象方法\n  useImperativeHandle(ref, () =&gt; {\n    return {\n      getText() {\n        return text;\n      },\n      input: inputRef.current,\n    };\n  });\n  return (\n    &lt;input\n      ref={inputRef}\n      type=&quot;text&quot;\n      value={text}\n      onChange={(event) =&gt; setText(event.target.value)}\n    /&gt;\n  );\n}\n\n// 将 forwardRef 包裹住整个组件\nexport default forwardRef(Message);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="_9-custom-hooks" tabindex="-1"><a class="header-anchor" href="#_9-custom-hooks" aria-hidden="true">#</a> 9. Custom Hooks</h3><p>收录了部分常用且实用的自定义Hooks</p><h4 id="_9-1-usetoggle-hooks" tabindex="-1"><a class="header-anchor" href="#_9-1-usetoggle-hooks" aria-hidden="true">#</a> 9.1 useToggle Hooks</h4><p>该钩子函数的主要作用就是用来接收一个布尔值的参数，并将该值进行切换为相反的值，主要的案例如：显示和隐藏，显示更多/显示更少文本，打开或关闭菜单栏。</p><blockquote><p>Basically, what this hook does is that, it takes a parameter with value true or false and toggles that value to opposite. It&#39;s useful when we want to take some action into it&#39;s opposite action, for example: show and hide modal, show more/show less text, open/close side menu.</p></blockquote><p>JavaScript 写法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Hook</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// Parameter is the boolean, with default &quot;false&quot; value</span>\n<span class="token comment">// 参数为布尔值，默认为 false</span>\n<span class="token keyword">const</span> <span class="token function-variable function">useToggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">initialState <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Initialize the state</span>\n    <span class="token comment">// 初始化状态</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// Define and memorize toggler function in case we pass down the component,</span>\n    <span class="token comment">// This function change the boolean value to it&#39;s opposite value</span>\n    <span class="token comment">// 实用 useCallback 优化钩子函数，并且该方法将获取的布尔值取反</span>\n    <span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 返回数组状态</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> toggle<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导出方法</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> useToggle<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>TypeScript 写法：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// Hook</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// Parameter is the boolean, with default &quot;false&quot; value</span>\n<span class="token comment">// 参数为布尔值，默认为 false</span>\n<span class="token keyword">const</span> useToggle <span class="token operator">=</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Initialize the state</span>\n    <span class="token comment">// 初始化状态</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// Define and memorize toggler function in case we pass down the component,</span>\n    <span class="token comment">// This function change the boolean value to it&#39;s opposite value</span>\n    <span class="token comment">// 实用 useCallback 优化钩子函数，并且该方法将获取的布尔值取反</span>\n    <span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> <span class="token operator">!</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 返回数组状态</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> toggle<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 导出方法</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> useToggle<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>使用：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// Usage</span>\n<span class="token keyword">import</span> useToggle <span class="token keyword">from</span> <span class="token string">&quot;@/hooks/useToggle&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Call the hook which returns, current value and the toggler function</span>\n    <span class="token comment">// useToggle 的返回值为数组</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>isTextChanged<span class="token punctuation">,</span> setIsTextChanged<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token comment">// 点击后进行 button 文字切换</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setIsTextChanged<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>isTextChanged <span class="token operator">?</span> <span class="token string">&#39;Toggled&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Click to Toggle&#39;</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_9-2-usememocompare-hooks" tabindex="-1"><a class="header-anchor" href="#_9-2-usememocompare-hooks" aria-hidden="true">#</a> 9.2 useMemoCompare Hooks</h4>',136),p=(0,e.Uk)("This hook is similar to "),r={href:"https://reactjs.org/docs/hooks-reference.html#usememo",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("useMemo"),o=(0,e.Uk)(", but instead of passing an array of dependencies we pass a custom compare function that receives the previous and new value. The compare function can then compare nested properties, call object methods, or anything else to determine equality. If the compare function returns true then the hook returns the old object reference."),c=(0,e._)("p",null,[(0,e.Uk)("It's worth noting that, unlike useMemo, this hook isn't meant to avoid expensive calculations. It needs to be passed a computed value so that it can compare it to the old value. Where this comes in handy is if you want to offer a library to other developers and it would be annoying to force them to memoize an object before passing it to your library. If that object is created in the component body (often the case if it's based on props) then it's going to be a new object on every render. If that object is a "),(0,e._)("code",null,"useEffect"),(0,e.Uk)(" dependency then it's going to cause the effect to fire on every render, which can lead to problems or even an infinite loop. This hook allows you to avoid that scenario by using the old object reference instead of the new one if your custom comparison function deems them equal.")],-1),u=(0,e._)("p",null,[(0,e.Uk)("Read through the recipe and comments below. For a more practical example be sure to check out our "),(0,e._)("strong",null,"useFirestoreQuery"),(0,e.Uk)(" hook.")],-1),i=(0,e.uE)('<p>JavaScript 写法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Hook</span>\n<span class="token keyword">function</span> <span class="token function">useMemoCompare</span><span class="token punctuation">(</span><span class="token parameter">next<span class="token punctuation">,</span> compare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Ref for storing previous value</span>\n  <span class="token keyword">const</span> previousRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> previous <span class="token operator">=</span> previousRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n  <span class="token comment">// Pass previous and next value to compare function</span>\n  <span class="token comment">// to determine whether to consider them equal.</span>\n  <span class="token keyword">const</span> isEqual <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>previous<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// If not equal update previousRef to next value.</span>\n  <span class="token comment">// We only update if not equal so that this hook continues to return</span>\n  <span class="token comment">// the same old value if compare keeps returning true.</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      previousRef<span class="token punctuation">.</span>current <span class="token operator">=</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Finally, if equal then return the previous value</span>\n  <span class="token keyword">return</span> isEqual <span class="token operator">?</span> previous <span class="token operator">:</span> next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>用法：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Usage</span>\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> obj <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Use the previous obj value if the &quot;id&quot; property hasn&#39;t changed</span>\n  <span class="token keyword">const</span> objFinal <span class="token operator">=</span> <span class="token function">useMemoCompare</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> prev <span class="token operator">&amp;&amp;</span> prev<span class="token punctuation">.</span>id <span class="token operator">===</span> next<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Here we want to fire off an effect if objFinal changes.</span>\n  <span class="token comment">// If we had used obj directly without the above hook and obj was technically a</span>\n  <span class="token comment">// new object on every render then the effect would fire on every render.</span>\n  <span class="token comment">// Worse yet, if our effect triggered a state change it could cause an endless loop</span>\n  <span class="token comment">// where effect runs -&gt; state change causes rerender -&gt; effect runs -&gt; etc ...</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Call a method on the object and set results to state</span>\n    <span class="token keyword">return</span> objFinal<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>objFinal<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// So why not pass [obj.id] as the dependency array instead?</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Then eslint-plugin-hooks would rightfully complain that obj is not in the</span>\n    <span class="token comment">// dependency array and we&#39;d have to use eslint-disable-next-line to work around that.</span>\n    <span class="token comment">// It&#39;s much cleaner to just get the old object reference with our custom hook.</span>\n    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> ... </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h4 id="_9-3-usefirestorequery-hooks" tabindex="-1"><a class="header-anchor" href="#_9-3-usefirestorequery-hooks" aria-hidden="true">#</a> 9.3 useFirestoreQuery Hooks</h4><p>该钩子函数可以让我们更方便的更新数据且不必担心状态管理，我们朱旭将一个查询传递到 useFirestoreQuery() 函数中，就可以获取到数据、状态、和错误信息。当数据更改时，组件将重新渲染；当组件卸载时数据会自动删除。</p><blockquote><p>This hook makes it super easy to subscribe to data in your Firestore database without having to worry about state management. Instead of calling Firestore&#39;s <code>query.onSnapshot()</code> method you simply pass a query to <code>useFirestoreQuery()</code> and you get back everything you need, including <code>status</code>, <code>data</code>, and <code>error</code>. Your component will re-render when data changes and your subscription will be automatically removed when the component unmounts. Our example even supports dependent queries where you can wait on needed data by passing a falsy value to the hook. Read through the recipe and comments below to see how it works.</p></blockquote><p>JavaScript 写法：</p><p><code>reducer.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Reducer for hook state and actions</span>\n<span class="token comment">// 全局状态共享</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取到传来的状态进行判断</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;idle&quot;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;idle&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;loading&quot;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;loading&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;success&quot;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">&quot;error&quot;</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">error</span><span class="token operator">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;invalid action&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> reducer<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>useFirestoreQuery.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&quot;@/store/reducer&quot;</span>\n<span class="token comment">// Hook</span>\n<span class="token keyword">function</span> <span class="token function">useFirestoreQuery</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Our initial state</span>\n  <span class="token comment">// Start with an &quot;idle&quot; status if query is falsy, as that means hook consumer is</span>\n  <span class="token comment">// waiting on required data before creating the query object.</span>\n  <span class="token comment">// Example: useFirestoreQuery(uid &amp;&amp; firestore.collection(&quot;profiles&quot;).doc(uid))</span>\n  <span class="token comment">// 定义初始化数据：</span>\n  <span class="token comment">//\t1. status： query（请求）loading为正在加载，idle为默认状态</span>\n  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">status</span><span class="token operator">:</span> query <span class="token operator">?</span> <span class="token string">&quot;loading&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;idle&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// Setup our state and actions</span>\n  <span class="token comment">// 设置状态</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Get cached Firestore query object with useMemoCompare (https://usehooks.com/useMemoCompare)</span>\n  <span class="token comment">// Needed because firestore.collection(&quot;profiles&quot;).doc(uid) will always being a new object reference</span>\n  <span class="token comment">// causing effect to run -&gt; state change -&gt; rerender -&gt; effect runs -&gt; etc ...</span>\n  <span class="token comment">// This is nicer than requiring hook consumer to always memoize query with useMemo.</span>\n  <span class="token keyword">const</span> queryCached <span class="token operator">=</span> <span class="token function">useMemoCompare</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prevQuery</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Use built-in Firestore isEqual method to determine if &quot;equal&quot;</span>\n    <span class="token keyword">return</span> prevQuery <span class="token operator">&amp;&amp;</span> query <span class="token operator">&amp;&amp;</span> query<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>prevQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Return early if query is falsy and reset to &quot;idle&quot; status in case</span>\n    <span class="token comment">// we&#39;re coming from &quot;success&quot; or &quot;error&quot; status due to query change.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queryCached<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;idle&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;loading&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Subscribe to query with onSnapshot</span>\n    <span class="token comment">// Will unsubscribe on cleanup since this returns an unsubscribe function</span>\n    <span class="token keyword">return</span> queryCached<span class="token punctuation">.</span><span class="token function">onSnapshot</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Get data for collection or doc</span>\n        <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>docs\n          <span class="token operator">?</span> <span class="token function">getCollectionData</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>\n          <span class="token operator">:</span> <span class="token function">getDocData</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>queryCached<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Only run effect if queryCached changes</span>\n  <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Get doc data and merge doc.id</span>\n<span class="token keyword">function</span> <span class="token function">getDocData</span><span class="token punctuation">(</span><span class="token parameter">doc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> doc<span class="token punctuation">.</span>exists <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> doc<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">...</span>doc<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Get array of doc data from collection</span>\n<span class="token keyword">function</span> <span class="token function">getCollectionData</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> collection<span class="token punctuation">.</span>docs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getDocData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>使用：</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token comment">// Usage</span>\n<span class="token keyword">function</span> <span class="token function">ProfilePage</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> uid <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Subscribe to Firestore document</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> status<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFirestoreQuery</span><span class="token punctuation">(</span>\n    firestore<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&quot;profiles&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&quot;loading&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Loading...&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProfileHeader</span></span> <span class="token attr-name">avatar</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>avatar<span class="token punctuation">}</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Posts</span></span> <span class="token attr-name">posts</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>posts<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_10-children" tabindex="-1"><a class="header-anchor" href="#_10-children" aria-hidden="true">#</a> 10. Children</h3><blockquote><p>目标：</p><ol><li>only</li><li>count</li><li>map</li><li>toArray</li></ol></blockquote><p><code>Children</code> 和 <code>children</code> 不一样，<code>children</code> 通常用作为布局组件，而 <code>Children</code> 指的是布局组件内部的元素，可以为 JSX、函数、对象等等，并对其进行操作。</p><h4 id="_10-1-only-方法" tabindex="-1"><a class="header-anchor" href="#_10-1-only-方法" aria-hidden="true">#</a> 10.1 only 方法</h4><p>通过 <code>Children.only</code> 方法可以限制组件标签只接收一个子元素。</p><p><code>父组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Message from &quot;./Message&quot;;\n\nfunction App() {\n  // 不允许 Message 组件标签传入多个子元素, 需要对这种情况进行限制\n  return (\n    &lt;Message&gt;\n      &lt;p&gt;Hello&lt;/p&gt;\n      &lt;p&gt;Hello&lt;/p&gt;\n    &lt;/Message&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>对 Message 组件进行限制</p><p><code>子组件：</code></p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Children } from &quot;react&quot;;\n\nfunction Message(props) {\n  try {\n    Children.only(props.children);\n  } catch (error) {\n    // Error: React.Children.only expected to receive a single React element child.\n    // 错误: React.children 只期望接收一个 React 元素\n    return &lt;div&gt;Message 组件标签只接收一个子元素 &lt;/div&gt;;\n  }\n  return &lt;div&gt;{props.children}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_10-2-count-方法" tabindex="-1"><a class="header-anchor" href="#_10-2-count-方法" aria-hidden="true">#</a> 10.2 count 方法</h4><p>通过 <code>Children.count</code> 方法可以获取组件标签传入的子元素的数量。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Children } from &quot;react&quot;;\n\nfunction Message(props) {\n  return &lt;div&gt;{Children.count(props.children)}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_10-3-map-方法" tabindex="-1"><a class="header-anchor" href="#_10-3-map-方法" aria-hidden="true">#</a> 10.3 map 方法</h4><p>通过 <code>Children.map</code> 方法可以对组件标签内部的子元素进行转换操作。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import Message from &quot;./Message&quot;;\n\nfunction App() {\n  return (\n    &lt;Message&gt;\n      &lt;p&gt;Hello&lt;/p&gt;\n      &lt;p&gt;Hello&lt;/p&gt;\n    &lt;/Message&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过遍历后再给元素添加父组件</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { Children } from &quot;react&quot;;\n\nfunction Message(props) {\n  const items = Children.map(props.children, (item) =&gt; (\n    &lt;a href=&quot;http://www.baidu.com&quot;&gt;{item}&lt;/a&gt;\n  ));\n  return &lt;div&gt;{items}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_10-4-toarray-方法" tabindex="-1"><a class="header-anchor" href="#_10-4-toarray-方法" aria-hidden="true">#</a> 10.4 toArray 方法</h4><p><code>props.children</code> 存储多个值时是数组类型，存储一个值时为对象类型。</p><p>通过 <code>Children.toArray</code> 方法可以将 <code>props.children</code> 转换为数组类型，以保证 <code>Children.map</code> 方法永远有用。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/App.js\nimport ImageToggle from &quot;./ImageToggle&quot;;\n\nfunction App() {\n  return (\n    &lt;ImageToggle&gt;\n      &lt;img\n        src=&quot;https://images.pexels.com/photos/10198426/pexels-photo-10198426.jpeg&quot;\n        alt=&quot;&quot;\n        width=&quot;300px&quot;\n      /&gt;\n      &lt;img\n        src=&quot;https://images.pexels.com/photos/4386364/pexels-photo-4386364.jpeg&quot;\n        alt=&quot;&quot;\n        width=&quot;300px&quot;\n      /&gt;\n      &lt;img\n        src=&quot;https://images.pexels.com/photos/9812128/pexels-photo-9812128.jpeg&quot;\n        alt=&quot;&quot;\n        width=&quot;300px&quot;\n      /&gt;\n      &lt;img\n        src=&quot;https://images.pexels.com/photos/8746965/pexels-photo-8746965.jpeg&quot;\n        width=&quot;300px&quot;\n        alt=&quot;&quot;\n      /&gt;\n    &lt;/ImageToggle&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>设置图片自动轮播：</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/ImageToggle.js\nimport { useEffect, useState, Children } from &quot;react&quot;;\n\nfunction ImageToggle(props) {\n  const [state, setState] = useState({\n    // 当前要显示的图片的索引\n    current: 0,\n    // 总共有多少张图片, 用于索引的溢出判断\n    total: 0,\n  });\n  useEffect(() =&gt; {\n    setState((prev) =&gt; ({ ...prev, total: Children.count(props.children) }));\n  }, [props.children]);\n\n  useEffect(() =&gt; {\n    const timer = setInterval(showNext, 2000);\n    return () =&gt; clearInterval(timer);\n  }, []);\n\n  const showNext = () =&gt; {\n    setState(({ current, total }) =&gt; {\n      return {\n        total,\n        current: current + 1 === total ? 0 : current + 1,\n      };\n    });\n  };\n  return &lt;div&gt;{Children.toArray(props.children)[state.current]}&lt;/div&gt;;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="_11-context" tabindex="-1"><a class="header-anchor" href="#_11-context" aria-hidden="true">#</a> 11. Context</h3><p>通过解决 <strong>跨组件数据共享问题</strong>， 但是后续会有 更好的工具使用。</p><h4 id="_11-1-已知问题" tabindex="-1"><a class="header-anchor" href="#_11-1-已知问题" aria-hidden="true">#</a> 11.1 已知问题</h4><p>在 React 中虽然使用 Context 可以方便的实现组件之间的状态共享，但是如果使用不当就会产生严重的性能问题。</p><p>当多个组件使用了 Context 中的不同的状态时，只要 Context 中的某一个状态发生改变，使用了其他状态的其他组件也会重新渲染。</p><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Context.js\nimport { createContext, useState } from &quot;react&quot;;\n\nexport const AppContenxt = createContext();\n\nexport function AppProvider({ children }) {\n  const [state, setState] = useState({\n    foo: &quot;foo context&quot;,\n    bar: &quot;bar context&quot;,\n  });\n  return (\n    &lt;AppContenxt.Provider value={[state, setState]}&gt;\n      {children}\n    &lt;/AppContenxt.Provider&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/App.js\nimport Bar from &quot;./Bar&quot;;\nimport Foo from &quot;./Foo&quot;;\nimport { AppProvider } from &quot;./Context&quot;;\n\nfunction App() {\n  return (\n    &lt;AppProvider&gt;\n      &lt;Foo /&gt;\n      &lt;Bar /&gt;\n    &lt;/AppProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Foo.js\nimport { useContext, useEffect } from &quot;react&quot;;\nimport { AppContenxt } from &quot;./Context&quot;;\n\nfunction Foo() {\n  const [appContext, setAppContext] = useContext(AppContenxt);\n  useEffect(() =&gt; {\n    console.log(&quot;Foo render&quot;);\n  });\n  const onClickHandler = () =&gt; {\n    setAppContext((state) =&gt; ({ ...state, foo: &quot;foo contenxt changed&quot; }));\n  };\n  return (\n    &lt;div&gt;\n      {appContext.foo} &lt;button onClick={onClickHandler}&gt;foo button&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Foo;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Bar.js\nimport { useContext, useEffect } from &quot;react&quot;;\nimport { AppContenxt } from &quot;./Context&quot;;\n\nfunction Bar() {\n  const [appContext] = useContext(AppContenxt);\n  useEffect(() =&gt; {\n    console.log(&quot;Bar render&quot;);\n  });\n  return &lt;div&gt;{appContext.bar}&lt;/div&gt;;\n}\n\nexport default Bar;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_11-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_11-2-解决方案" aria-hidden="true">#</a> 11.2 解决方案</h4><h5 id="_1-拆分-context" tabindex="-1"><a class="header-anchor" href="#_1-拆分-context" aria-hidden="true">#</a> 1. 拆分 Context</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/FooContext.js\nimport { createContext, useState } from &quot;react&quot;;\n\nexport const FooContext = createContext();\n\nexport function FooProvider({ children }) {\n  const [foo, setFoo] = useState(&quot;foo context&quot;);\n  return (\n    &lt;FooContext.Provider value={[foo, setFoo]}&gt;{children}&lt;/FooContext.Provider&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/BarContext.js\nimport { createContext, useState } from &quot;react&quot;;\n\nexport const BarContext = createContext();\n\nexport function BarProvider({ children }) {\n  const [bar, setBar] = useState(&quot;bar context&quot;);\n  return (\n    &lt;BarContext.Provider value={[bar, setBar]}&gt;{children}&lt;/BarContext.Provider&gt;\n  );\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/App.js\nimport Bar from &quot;./Bar&quot;;\nimport Foo from &quot;./Foo&quot;;\nimport { BarProvider } from &quot;./BarContext&quot;;\nimport { FooProvider } from &quot;./FooContext&quot;;\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;FooProvider&gt;\n        &lt;Foo /&gt;\n      &lt;/FooProvider&gt;\n      &lt;BarProvider&gt;\n        &lt;Bar /&gt;\n      &lt;/BarProvider&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Foo.js\nimport { useContext, useEffect } from &quot;react&quot;;\nimport { FooContext } from &quot;./FooContext&quot;;\n\nfunction Foo() {\n  const [foo, setFoo] = useContext(FooContext);\n  useEffect(() =&gt; {\n    console.log(&quot;Foo render&quot;);\n  });\n  return (\n    &lt;div&gt;\n      {foo}\n      &lt;button onClick={() =&gt; setFoo(&quot;foo contenxt changed&quot;)}&gt;foo button&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Foo;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Bar.js\nimport { useContext, useEffect } from &quot;react&quot;;\nimport { BarContext } from &quot;./BarContext&quot;;\n\nfunction Bar() {\n  const [bar] = useContext(BarContext);\n  useEffect(() =&gt; {\n    console.log(&quot;Bar render&quot;);\n  });\n  return &lt;div&gt;{bar}&lt;/div&gt;;\n}\n\nexport default Bar;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="_2-拆分组件" tabindex="-1"><a class="header-anchor" href="#_2-拆分组件" aria-hidden="true">#</a> 2. 拆分组件</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>// src/Bar.js\nimport { memo, useContext, useEffect } from &quot;react&quot;;\nimport { AppContenxt } from &quot;./Context&quot;;\n\nconst BarContext = memo((props) =&gt; {\n  useEffect(() =&gt; {\n    console.log(&quot;BarContext render&quot;);\n  });\n  return &lt;div&gt;{props.bar}&lt;/div&gt;;\n});\n\nfunction Bar() {\n  const [appContext] = useContext(AppContenxt);\n  return &lt;BarContext bar={appContext.bar} /&gt;;\n}\n\nexport default Bar;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="_3-缓存状态" tabindex="-1"><a class="header-anchor" href="#_3-缓存状态" aria-hidden="true">#</a> 3. 缓存状态</h5><div class="language-react ext-react line-numbers-mode"><pre class="language-react"><code>import { useContext, useMemo } from &quot;react&quot;;\nimport { AppContenxt } from &quot;./Context&quot;;\n\nfunction Bar() {\n  const [appContext] = useContext(AppContenxt);\n  const bar = appContext.bar;\n  return useMemo(() =&gt; {\n    console.log(&quot;bar render&quot;);\n    return &lt;div&gt;{bar}&lt;/div&gt;;\n  }, [bar]);\n}\n\nexport default Bar;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',58),b={},m=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("blockquote",null,[(0,e._)("p",null,[p,(0,e._)("a",r,[l,(0,e.Wm)(a)]),o]),c,u]),i],64)}]])}}]);